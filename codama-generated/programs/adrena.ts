/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAddCollateralLongInstruction,
  type ParsedAddCollateralShortInstruction,
  type ParsedAddCustodyInstruction,
  type ParsedAddGenesisLiquidityInstruction,
  type ParsedAddLimitOrderInstruction,
  type ParsedAddLiquidStakeInstruction,
  type ParsedAddLiquidityInstruction,
  type ParsedAddLockedStakeInstruction,
  type ParsedAddPoolPartOneInstruction,
  type ParsedAddPoolPartTwoInstruction,
  type ParsedAddVestInstruction,
  type ParsedCancelLimitOrderInstruction,
  type ParsedCancelStopLossInstruction,
  type ParsedCancelTakeProfitInstruction,
  type ParsedClaimReferralFeeInstruction,
  type ParsedClaimStakesInstruction,
  type ParsedClaimVestInstruction,
  type ParsedClosePositionLongInstruction,
  type ParsedClosePositionShortInstruction,
  type ParsedDeleteUserProfileInstruction,
  type ParsedDisableTokensFreezeCapabilitiesInstruction,
  type ParsedDistributeFeesInstruction,
  type ParsedEditUserProfileInstruction,
  type ParsedEditUserProfileNicknameInstruction,
  type ParsedExecuteLimitOrderLongInstruction,
  type ParsedExecuteLimitOrderShortInstruction,
  type ParsedFinalizeGenesisLockCampaignInstruction,
  type ParsedFinalizeLockedStakeInstruction,
  type ParsedGenesisOtcInInstruction,
  type ParsedGenesisOtcOutInstruction,
  type ParsedGenesisStakePatchInstruction,
  type ParsedGetAddLiquidityAmountAndFeeInstruction,
  type ParsedGetAssetsUnderManagementInstruction,
  type ParsedGetEntryPriceAndFeeInstruction,
  type ParsedGetExitPriceAndFeeInstruction,
  type ParsedGetLiquidationPriceInstruction,
  type ParsedGetLiquidationStateInstruction,
  type ParsedGetLpTokenPriceInstruction,
  type ParsedGetOpenPositionWithSwapAmountAndFeesInstruction,
  type ParsedGetOraclePriceInstruction,
  type ParsedGetPnlInstruction,
  type ParsedGetPoolInfoSnapshotInstruction,
  type ParsedGetRemoveLiquidityAmountAndFeeInstruction,
  type ParsedGetSwapAmountAndFeesInstruction,
  type ParsedIncreasePositionLongInstruction,
  type ParsedIncreasePositionShortInstruction,
  type ParsedInitFourVestingInstruction,
  type ParsedInitLimitOrderBookInstruction,
  type ParsedInitOneCoreInstruction,
  type ParsedInitReferrerRewardTokenVaultInstruction,
  type ParsedInitStakingFourInstruction,
  type ParsedInitStakingOneInstruction,
  type ParsedInitStakingThreeInstruction,
  type ParsedInitStakingTwoInstruction,
  type ParsedInitThreeGovernanceInstruction,
  type ParsedInitTwoLmTokenMetadataInstruction,
  type ParsedInitUserProfileInstruction,
  type ParsedInitUserStakingInstruction,
  type ParsedLiquidateLongInstruction,
  type ParsedLiquidateShortInstruction,
  type ParsedMigrateUserProfileFromV1ToV2Instruction,
  type ParsedMigrateVestFromV1ToV2Instruction,
  type ParsedMintLmTokensFromBucketInstruction,
  type ParsedOpenOrIncreasePositionWithSwapLongInstruction,
  type ParsedOpenOrIncreasePositionWithSwapShortInstruction,
  type ParsedOpenPositionLongInstruction,
  type ParsedOpenPositionShortInstruction,
  type ParsedPatchCustodyLockedAmountInstruction,
  type ParsedPatchStakingRoundInstruction,
  type ParsedRemoveCollateralLongInstruction,
  type ParsedRemoveCollateralShortInstruction,
  type ParsedRemoveCustodyInstruction,
  type ParsedRemoveLiquidStakeInstruction,
  type ParsedRemoveLiquidityInstruction,
  type ParsedRemoveLockedStakeInstruction,
  type ParsedRemovePoolInstruction,
  type ParsedResolveStakingRoundInstruction,
  type ParsedSetAdminInstruction,
  type ParsedSetCustodyAllowSwapInstruction,
  type ParsedSetCustodyAllowTradeInstruction,
  type ParsedSetCustodyConfigInstruction,
  type ParsedSetCustodyMaxCumulativeShortPositionSizeUsdInstruction,
  type ParsedSetPoolAllowSwapInstruction,
  type ParsedSetPoolAllowTradeInstruction,
  type ParsedSetPoolAumSoftCapUsdInstruction,
  type ParsedSetPoolLiquidityStateInstruction,
  type ParsedSetPoolWhitelistedSwapperInstruction,
  type ParsedSetProtocolFeeRecipientInstruction,
  type ParsedSetStakingLmEmissionPotentiometersInstruction,
  type ParsedSetStopLossLongInstruction,
  type ParsedSetStopLossShortInstruction,
  type ParsedSetTakeProfitLongInstruction,
  type ParsedSetTakeProfitShortInstruction,
  type ParsedSetVestDelegateInstruction,
  type ParsedSwapInstruction,
  type ParsedUpdatePoolAumInstruction,
  type ParsedUpgradeLockedStakeInstruction,
} from '../instructions';

export const ADRENA_PROGRAM_ADDRESS =
  '13gDzEXCdocbj8iAiqrScGo47NiSuYENGsRqi3SEAwet' as Address<'13gDzEXCdocbj8iAiqrScGo47NiSuYENGsRqi3SEAwet'>;

export enum AdrenaAccount {
  Cortex,
  Custody,
  GenesisLock,
  LimitOrderBook,
  Pool,
  Position,
  Staking,
  UserProfileV1,
  UserProfile,
  UserStaking,
  VestV1,
  VestRegistry,
  Vest,
}

export function identifyAdrenaAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AdrenaAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([143, 120, 192, 142, 209, 42, 159, 192])
      ),
      0
    )
  ) {
    return AdrenaAccount.Cortex;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([1, 184, 48, 81, 93, 131, 63, 145])
      ),
      0
    )
  ) {
    return AdrenaAccount.Custody;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([9, 73, 164, 119, 222, 166, 147, 239])
      ),
      0
    )
  ) {
    return AdrenaAccount.GenesisLock;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([157, 26, 225, 42, 217, 203, 162, 30])
      ),
      0
    )
  ) {
    return AdrenaAccount.LimitOrderBook;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([241, 154, 109, 4, 17, 177, 109, 188])
      ),
      0
    )
  ) {
    return AdrenaAccount.Pool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([170, 188, 143, 228, 122, 64, 247, 208])
      ),
      0
    )
  ) {
    return AdrenaAccount.Position;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([242, 134, 183, 223, 18, 13, 184, 23])
      ),
      0
    )
  ) {
    return AdrenaAccount.Staking;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([173, 169, 254, 61, 247, 125, 200, 42])
      ),
      0
    )
  ) {
    return AdrenaAccount.UserProfileV1;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([32, 37, 119, 205, 179, 180, 13, 194])
      ),
      0
    )
  ) {
    return AdrenaAccount.UserProfile;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([34, 83, 202, 93, 25, 243, 63, 54])
      ),
      0
    )
  ) {
    return AdrenaAccount.UserStaking;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([182, 88, 199, 17, 246, 154, 136, 248])
      ),
      0
    )
  ) {
    return AdrenaAccount.VestV1;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([57, 105, 96, 158, 49, 154, 10, 29])
      ),
      0
    )
  ) {
    return AdrenaAccount.VestRegistry;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([45, 204, 95, 56, 150, 233, 97, 231])
      ),
      0
    )
  ) {
    return AdrenaAccount.Vest;
  }
  throw new Error(
    'The provided account could not be identified as a adrena account.'
  );
}

export enum AdrenaInstruction {
  InitOneCore,
  InitTwoLmTokenMetadata,
  InitThreeGovernance,
  InitFourVesting,
  AddVest,
  SetVestDelegate,
  MigrateVestFromV1ToV2,
  MigrateUserProfileFromV1ToV2,
  ClaimVest,
  AddPoolPartOne,
  AddPoolPartTwo,
  RemovePool,
  AddCustody,
  RemoveCustody,
  SetCustodyConfig,
  SetCustodyAllowSwap,
  SetCustodyAllowTrade,
  SetPoolAllowSwap,
  SetPoolAllowTrade,
  SetPoolAumSoftCapUsd,
  Swap,
  AddLiquidity,
  AddGenesisLiquidity,
  GenesisOtcOut,
  GenesisOtcIn,
  RemoveLiquidity,
  OpenPositionLong,
  OpenPositionShort,
  OpenOrIncreasePositionWithSwapLong,
  OpenOrIncreasePositionWithSwapShort,
  AddCollateralLong,
  AddCollateralShort,
  RemoveCollateralLong,
  RemoveCollateralShort,
  ClosePositionLong,
  ClosePositionShort,
  LiquidateLong,
  LiquidateShort,
  UpdatePoolAum,
  GetAddLiquidityAmountAndFee,
  GetRemoveLiquidityAmountAndFee,
  GetEntryPriceAndFee,
  DisableTokensFreezeCapabilities,
  GenesisStakePatch,
  GetOpenPositionWithSwapAmountAndFees,
  GetExitPriceAndFee,
  GetPnl,
  GetLiquidationPrice,
  GetLiquidationState,
  GetOraclePrice,
  GetSwapAmountAndFees,
  GetAssetsUnderManagement,
  InitUserStaking,
  InitUserProfile,
  EditUserProfile,
  EditUserProfileNickname,
  DeleteUserProfile,
  InitStakingOne,
  InitStakingTwo,
  InitStakingThree,
  InitStakingFour,
  AddLiquidStake,
  AddLockedStake,
  UpgradeLockedStake,
  RemoveLiquidStake,
  RemoveLockedStake,
  ClaimStakes,
  FinalizeGenesisLockCampaign,
  SetPoolLiquidityState,
  FinalizeLockedStake,
  ResolveStakingRound,
  GetLpTokenPrice,
  GetPoolInfoSnapshot,
  MintLmTokensFromBucket,
  IncreasePositionLong,
  PatchCustodyLockedAmount,
  IncreasePositionShort,
  SetStakingLmEmissionPotentiometers,
  SetAdmin,
  SetProtocolFeeRecipient,
  SetCustodyMaxCumulativeShortPositionSizeUsd,
  SetTakeProfitLong,
  SetStopLossLong,
  SetTakeProfitShort,
  SetStopLossShort,
  CancelTakeProfit,
  CancelStopLoss,
  PatchStakingRound,
  SetPoolWhitelistedSwapper,
  InitLimitOrderBook,
  AddLimitOrder,
  CancelLimitOrder,
  ExecuteLimitOrderLong,
  ExecuteLimitOrderShort,
  DistributeFees,
  ClaimReferralFee,
  InitReferrerRewardTokenVault,
}

export function identifyAdrenaInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AdrenaInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([244, 243, 65, 251, 99, 235, 237, 78])
      ),
      0
    )
  ) {
    return AdrenaInstruction.InitOneCore;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([252, 186, 161, 12, 196, 147, 180, 131])
      ),
      0
    )
  ) {
    return AdrenaInstruction.InitTwoLmTokenMetadata;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([200, 232, 157, 194, 232, 235, 183, 15])
      ),
      0
    )
  ) {
    return AdrenaInstruction.InitThreeGovernance;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([3, 142, 244, 213, 166, 217, 186, 48])
      ),
      0
    )
  ) {
    return AdrenaInstruction.InitFourVesting;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([213, 88, 26, 9, 37, 186, 193, 59])
      ),
      0
    )
  ) {
    return AdrenaInstruction.AddVest;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([13, 252, 155, 199, 243, 105, 252, 251])
      ),
      0
    )
  ) {
    return AdrenaInstruction.SetVestDelegate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([111, 209, 73, 40, 58, 206, 244, 147])
      ),
      0
    )
  ) {
    return AdrenaInstruction.MigrateVestFromV1ToV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([213, 121, 86, 235, 129, 177, 108, 49])
      ),
      0
    )
  ) {
    return AdrenaInstruction.MigrateUserProfileFromV1ToV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([147, 229, 253, 84, 253, 67, 13, 178])
      ),
      0
    )
  ) {
    return AdrenaInstruction.ClaimVest;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([88, 239, 108, 37, 141, 192, 151, 214])
      ),
      0
    )
  ) {
    return AdrenaInstruction.AddPoolPartOne;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([48, 241, 100, 82, 218, 78, 185, 173])
      ),
      0
    )
  ) {
    return AdrenaInstruction.AddPoolPartTwo;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([132, 42, 53, 138, 28, 220, 170, 55])
      ),
      0
    )
  ) {
    return AdrenaInstruction.RemovePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([247, 254, 126, 17, 26, 6, 215, 117])
      ),
      0
    )
  ) {
    return AdrenaInstruction.AddCustody;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([143, 229, 131, 48, 248, 212, 167, 185])
      ),
      0
    )
  ) {
    return AdrenaInstruction.RemoveCustody;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([133, 97, 130, 143, 215, 229, 36, 176])
      ),
      0
    )
  ) {
    return AdrenaInstruction.SetCustodyConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([70, 172, 206, 130, 229, 55, 110, 97])
      ),
      0
    )
  ) {
    return AdrenaInstruction.SetCustodyAllowSwap;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([97, 76, 66, 219, 109, 177, 5, 67])
      ),
      0
    )
  ) {
    return AdrenaInstruction.SetCustodyAllowTrade;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([246, 8, 182, 136, 186, 208, 249, 35])
      ),
      0
    )
  ) {
    return AdrenaInstruction.SetPoolAllowSwap;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([135, 138, 235, 91, 224, 8, 112, 3])
      ),
      0
    )
  ) {
    return AdrenaInstruction.SetPoolAllowTrade;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([124, 194, 30, 229, 89, 235, 94, 38])
      ),
      0
    )
  ) {
    return AdrenaInstruction.SetPoolAumSoftCapUsd;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([248, 198, 158, 145, 225, 117, 135, 200])
      ),
      0
    )
  ) {
    return AdrenaInstruction.Swap;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([181, 157, 89, 67, 143, 182, 52, 72])
      ),
      0
    )
  ) {
    return AdrenaInstruction.AddLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([37, 173, 172, 33, 28, 127, 13, 69])
      ),
      0
    )
  ) {
    return AdrenaInstruction.AddGenesisLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([144, 79, 164, 22, 19, 189, 28, 99])
      ),
      0
    )
  ) {
    return AdrenaInstruction.GenesisOtcOut;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([250, 84, 122, 89, 253, 185, 57, 186])
      ),
      0
    )
  ) {
    return AdrenaInstruction.GenesisOtcIn;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([80, 85, 209, 72, 24, 206, 177, 108])
      ),
      0
    )
  ) {
    return AdrenaInstruction.RemoveLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([224, 114, 146, 60, 127, 166, 244, 56])
      ),
      0
    )
  ) {
    return AdrenaInstruction.OpenPositionLong;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([196, 212, 161, 82, 250, 39, 201, 102])
      ),
      0
    )
  ) {
    return AdrenaInstruction.OpenPositionShort;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([191, 204, 50, 25, 88, 21, 145, 43])
      ),
      0
    )
  ) {
    return AdrenaInstruction.OpenOrIncreasePositionWithSwapLong;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([65, 201, 86, 242, 134, 148, 34, 179])
      ),
      0
    )
  ) {
    return AdrenaInstruction.OpenOrIncreasePositionWithSwapShort;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([101, 191, 243, 208, 154, 22, 72, 19])
      ),
      0
    )
  ) {
    return AdrenaInstruction.AddCollateralLong;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([197, 235, 47, 1, 228, 10, 200, 184])
      ),
      0
    )
  ) {
    return AdrenaInstruction.AddCollateralShort;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([179, 122, 186, 139, 223, 72, 205, 58])
      ),
      0
    )
  ) {
    return AdrenaInstruction.RemoveCollateralLong;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([242, 74, 116, 29, 106, 148, 241, 205])
      ),
      0
    )
  ) {
    return AdrenaInstruction.RemoveCollateralShort;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([50, 66, 35, 214, 218, 31, 152, 68])
      ),
      0
    )
  ) {
    return AdrenaInstruction.ClosePositionLong;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([158, 216, 38, 16, 140, 37, 15, 131])
      ),
      0
    )
  ) {
    return AdrenaInstruction.ClosePositionShort;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([132, 118, 230, 137, 241, 193, 136, 93])
      ),
      0
    )
  ) {
    return AdrenaInstruction.LiquidateLong;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([197, 62, 252, 198, 25, 93, 177, 131])
      ),
      0
    )
  ) {
    return AdrenaInstruction.LiquidateShort;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([10, 125, 230, 234, 157, 184, 236, 241])
      ),
      0
    )
  ) {
    return AdrenaInstruction.UpdatePoolAum;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([172, 150, 249, 181, 233, 241, 78, 139])
      ),
      0
    )
  ) {
    return AdrenaInstruction.GetAddLiquidityAmountAndFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([194, 226, 233, 102, 14, 21, 196, 7])
      ),
      0
    )
  ) {
    return AdrenaInstruction.GetRemoveLiquidityAmountAndFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([134, 30, 231, 199, 83, 72, 27, 99])
      ),
      0
    )
  ) {
    return AdrenaInstruction.GetEntryPriceAndFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([138, 107, 226, 17, 200, 237, 160, 117])
      ),
      0
    )
  ) {
    return AdrenaInstruction.DisableTokensFreezeCapabilities;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([225, 99, 136, 6, 108, 202, 18, 97])
      ),
      0
    )
  ) {
    return AdrenaInstruction.GenesisStakePatch;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([105, 20, 255, 69, 225, 245, 10, 189])
      ),
      0
    )
  ) {
    return AdrenaInstruction.GetOpenPositionWithSwapAmountAndFees;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([73, 77, 94, 31, 8, 9, 92, 32])
      ),
      0
    )
  ) {
    return AdrenaInstruction.GetExitPriceAndFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([106, 212, 3, 250, 195, 224, 64, 160])
      ),
      0
    )
  ) {
    return AdrenaInstruction.GetPnl;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([73, 174, 119, 65, 149, 5, 73, 239])
      ),
      0
    )
  ) {
    return AdrenaInstruction.GetLiquidationPrice;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([127, 126, 199, 117, 90, 89, 29, 50])
      ),
      0
    )
  ) {
    return AdrenaInstruction.GetLiquidationState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([200, 20, 0, 106, 56, 210, 230, 140])
      ),
      0
    )
  ) {
    return AdrenaInstruction.GetOraclePrice;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([247, 121, 40, 99, 35, 82, 100, 32])
      ),
      0
    )
  ) {
    return AdrenaInstruction.GetSwapAmountAndFees;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([44, 3, 161, 69, 174, 75, 137, 162])
      ),
      0
    )
  ) {
    return AdrenaInstruction.GetAssetsUnderManagement;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([49, 77, 246, 16, 254, 90, 29, 206])
      ),
      0
    )
  ) {
    return AdrenaInstruction.InitUserStaking;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([148, 35, 126, 247, 28, 169, 135, 175])
      ),
      0
    )
  ) {
    return AdrenaInstruction.InitUserProfile;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([253, 8, 161, 147, 64, 21, 60, 145])
      ),
      0
    )
  ) {
    return AdrenaInstruction.EditUserProfile;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([132, 19, 244, 18, 78, 181, 31, 50])
      ),
      0
    )
  ) {
    return AdrenaInstruction.EditUserProfileNickname;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([24, 82, 133, 212, 73, 243, 46, 137])
      ),
      0
    )
  ) {
    return AdrenaInstruction.DeleteUserProfile;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([120, 240, 246, 179, 166, 109, 128, 211])
      ),
      0
    )
  ) {
    return AdrenaInstruction.InitStakingOne;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([117, 31, 227, 147, 59, 7, 139, 131])
      ),
      0
    )
  ) {
    return AdrenaInstruction.InitStakingTwo;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([58, 113, 94, 143, 161, 150, 232, 200])
      ),
      0
    )
  ) {
    return AdrenaInstruction.InitStakingThree;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([12, 112, 94, 2, 114, 242, 65, 25])
      ),
      0
    )
  ) {
    return AdrenaInstruction.InitStakingFour;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([255, 64, 163, 23, 209, 84, 185, 124])
      ),
      0
    )
  ) {
    return AdrenaInstruction.AddLiquidStake;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([254, 95, 156, 177, 106, 141, 151, 61])
      ),
      0
    )
  ) {
    return AdrenaInstruction.AddLockedStake;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([151, 103, 128, 107, 112, 115, 67, 172])
      ),
      0
    )
  ) {
    return AdrenaInstruction.UpgradeLockedStake;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([105, 41, 117, 216, 103, 113, 176, 174])
      ),
      0
    )
  ) {
    return AdrenaInstruction.RemoveLiquidStake;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([198, 147, 178, 249, 220, 14, 164, 33])
      ),
      0
    )
  ) {
    return AdrenaInstruction.RemoveLockedStake;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([254, 140, 24, 53, 197, 234, 35, 121])
      ),
      0
    )
  ) {
    return AdrenaInstruction.ClaimStakes;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([53, 212, 137, 237, 78, 217, 150, 203])
      ),
      0
    )
  ) {
    return AdrenaInstruction.FinalizeGenesisLockCampaign;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([154, 229, 163, 5, 137, 121, 175, 86])
      ),
      0
    )
  ) {
    return AdrenaInstruction.SetPoolLiquidityState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([202, 160, 165, 78, 142, 237, 39, 59])
      ),
      0
    )
  ) {
    return AdrenaInstruction.FinalizeLockedStake;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([47, 151, 59, 12, 121, 175, 248, 250])
      ),
      0
    )
  ) {
    return AdrenaInstruction.ResolveStakingRound;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([71, 172, 21, 25, 176, 168, 60, 10])
      ),
      0
    )
  ) {
    return AdrenaInstruction.GetLpTokenPrice;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([115, 34, 247, 123, 65, 121, 105, 116])
      ),
      0
    )
  ) {
    return AdrenaInstruction.GetPoolInfoSnapshot;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([7, 255, 166, 0, 86, 35, 197, 106])
      ),
      0
    )
  ) {
    return AdrenaInstruction.MintLmTokensFromBucket;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([253, 45, 99, 159, 1, 124, 132, 43])
      ),
      0
    )
  ) {
    return AdrenaInstruction.IncreasePositionLong;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([56, 103, 252, 61, 180, 140, 203, 100])
      ),
      0
    )
  ) {
    return AdrenaInstruction.PatchCustodyLockedAmount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([115, 188, 112, 206, 233, 246, 231, 166])
      ),
      0
    )
  ) {
    return AdrenaInstruction.IncreasePositionShort;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([254, 56, 180, 137, 121, 53, 128, 13])
      ),
      0
    )
  ) {
    return AdrenaInstruction.SetStakingLmEmissionPotentiometers;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([251, 163, 0, 52, 91, 194, 187, 92])
      ),
      0
    )
  ) {
    return AdrenaInstruction.SetAdmin;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([129, 247, 28, 179, 155, 143, 49, 7])
      ),
      0
    )
  ) {
    return AdrenaInstruction.SetProtocolFeeRecipient;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([183, 67, 92, 63, 115, 143, 184, 52])
      ),
      0
    )
  ) {
    return AdrenaInstruction.SetCustodyMaxCumulativeShortPositionSizeUsd;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 97, 30, 150, 50, 205, 12, 173])
      ),
      0
    )
  ) {
    return AdrenaInstruction.SetTakeProfitLong;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([114, 218, 115, 58, 115, 232, 35, 150])
      ),
      0
    )
  ) {
    return AdrenaInstruction.SetStopLossLong;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([39, 205, 117, 205, 83, 9, 69, 160])
      ),
      0
    )
  ) {
    return AdrenaInstruction.SetTakeProfitShort;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([91, 5, 98, 54, 75, 233, 9, 236])
      ),
      0
    )
  ) {
    return AdrenaInstruction.SetStopLossShort;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([123, 224, 30, 252, 159, 1, 250, 124])
      ),
      0
    )
  ) {
    return AdrenaInstruction.CancelTakeProfit;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([120, 201, 10, 102, 12, 9, 111, 126])
      ),
      0
    )
  ) {
    return AdrenaInstruction.CancelStopLoss;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([160, 195, 230, 214, 85, 208, 186, 184])
      ),
      0
    )
  ) {
    return AdrenaInstruction.PatchStakingRound;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([164, 104, 239, 240, 105, 120, 245, 213])
      ),
      0
    )
  ) {
    return AdrenaInstruction.SetPoolWhitelistedSwapper;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([179, 172, 45, 157, 192, 252, 116, 90])
      ),
      0
    )
  ) {
    return AdrenaInstruction.InitLimitOrderBook;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([163, 4, 58, 224, 7, 212, 118, 49])
      ),
      0
    )
  ) {
    return AdrenaInstruction.AddLimitOrder;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([132, 156, 132, 31, 67, 40, 232, 97])
      ),
      0
    )
  ) {
    return AdrenaInstruction.CancelLimitOrder;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([114, 251, 178, 6, 238, 31, 245, 245])
      ),
      0
    )
  ) {
    return AdrenaInstruction.ExecuteLimitOrderLong;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([160, 217, 227, 39, 232, 61, 21, 253])
      ),
      0
    )
  ) {
    return AdrenaInstruction.ExecuteLimitOrderShort;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([120, 56, 27, 7, 53, 176, 113, 186])
      ),
      0
    )
  ) {
    return AdrenaInstruction.DistributeFees;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([152, 108, 147, 123, 190, 36, 134, 62])
      ),
      0
    )
  ) {
    return AdrenaInstruction.ClaimReferralFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([176, 41, 31, 155, 206, 39, 94, 108])
      ),
      0
    )
  ) {
    return AdrenaInstruction.InitReferrerRewardTokenVault;
  }
  throw new Error(
    'The provided instruction could not be identified as a adrena instruction.'
  );
}

export type ParsedAdrenaInstruction<
  TProgram extends string = '13gDzEXCdocbj8iAiqrScGo47NiSuYENGsRqi3SEAwet',
> =
  | ({
      instructionType: AdrenaInstruction.InitOneCore;
    } & ParsedInitOneCoreInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.InitTwoLmTokenMetadata;
    } & ParsedInitTwoLmTokenMetadataInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.InitThreeGovernance;
    } & ParsedInitThreeGovernanceInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.InitFourVesting;
    } & ParsedInitFourVestingInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.AddVest;
    } & ParsedAddVestInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.SetVestDelegate;
    } & ParsedSetVestDelegateInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.MigrateVestFromV1ToV2;
    } & ParsedMigrateVestFromV1ToV2Instruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.MigrateUserProfileFromV1ToV2;
    } & ParsedMigrateUserProfileFromV1ToV2Instruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.ClaimVest;
    } & ParsedClaimVestInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.AddPoolPartOne;
    } & ParsedAddPoolPartOneInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.AddPoolPartTwo;
    } & ParsedAddPoolPartTwoInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.RemovePool;
    } & ParsedRemovePoolInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.AddCustody;
    } & ParsedAddCustodyInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.RemoveCustody;
    } & ParsedRemoveCustodyInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.SetCustodyConfig;
    } & ParsedSetCustodyConfigInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.SetCustodyAllowSwap;
    } & ParsedSetCustodyAllowSwapInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.SetCustodyAllowTrade;
    } & ParsedSetCustodyAllowTradeInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.SetPoolAllowSwap;
    } & ParsedSetPoolAllowSwapInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.SetPoolAllowTrade;
    } & ParsedSetPoolAllowTradeInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.SetPoolAumSoftCapUsd;
    } & ParsedSetPoolAumSoftCapUsdInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.Swap;
    } & ParsedSwapInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.AddLiquidity;
    } & ParsedAddLiquidityInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.AddGenesisLiquidity;
    } & ParsedAddGenesisLiquidityInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.GenesisOtcOut;
    } & ParsedGenesisOtcOutInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.GenesisOtcIn;
    } & ParsedGenesisOtcInInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.RemoveLiquidity;
    } & ParsedRemoveLiquidityInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.OpenPositionLong;
    } & ParsedOpenPositionLongInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.OpenPositionShort;
    } & ParsedOpenPositionShortInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.OpenOrIncreasePositionWithSwapLong;
    } & ParsedOpenOrIncreasePositionWithSwapLongInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.OpenOrIncreasePositionWithSwapShort;
    } & ParsedOpenOrIncreasePositionWithSwapShortInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.AddCollateralLong;
    } & ParsedAddCollateralLongInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.AddCollateralShort;
    } & ParsedAddCollateralShortInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.RemoveCollateralLong;
    } & ParsedRemoveCollateralLongInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.RemoveCollateralShort;
    } & ParsedRemoveCollateralShortInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.ClosePositionLong;
    } & ParsedClosePositionLongInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.ClosePositionShort;
    } & ParsedClosePositionShortInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.LiquidateLong;
    } & ParsedLiquidateLongInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.LiquidateShort;
    } & ParsedLiquidateShortInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.UpdatePoolAum;
    } & ParsedUpdatePoolAumInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.GetAddLiquidityAmountAndFee;
    } & ParsedGetAddLiquidityAmountAndFeeInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.GetRemoveLiquidityAmountAndFee;
    } & ParsedGetRemoveLiquidityAmountAndFeeInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.GetEntryPriceAndFee;
    } & ParsedGetEntryPriceAndFeeInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.DisableTokensFreezeCapabilities;
    } & ParsedDisableTokensFreezeCapabilitiesInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.GenesisStakePatch;
    } & ParsedGenesisStakePatchInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.GetOpenPositionWithSwapAmountAndFees;
    } & ParsedGetOpenPositionWithSwapAmountAndFeesInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.GetExitPriceAndFee;
    } & ParsedGetExitPriceAndFeeInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.GetPnl;
    } & ParsedGetPnlInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.GetLiquidationPrice;
    } & ParsedGetLiquidationPriceInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.GetLiquidationState;
    } & ParsedGetLiquidationStateInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.GetOraclePrice;
    } & ParsedGetOraclePriceInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.GetSwapAmountAndFees;
    } & ParsedGetSwapAmountAndFeesInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.GetAssetsUnderManagement;
    } & ParsedGetAssetsUnderManagementInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.InitUserStaking;
    } & ParsedInitUserStakingInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.InitUserProfile;
    } & ParsedInitUserProfileInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.EditUserProfile;
    } & ParsedEditUserProfileInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.EditUserProfileNickname;
    } & ParsedEditUserProfileNicknameInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.DeleteUserProfile;
    } & ParsedDeleteUserProfileInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.InitStakingOne;
    } & ParsedInitStakingOneInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.InitStakingTwo;
    } & ParsedInitStakingTwoInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.InitStakingThree;
    } & ParsedInitStakingThreeInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.InitStakingFour;
    } & ParsedInitStakingFourInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.AddLiquidStake;
    } & ParsedAddLiquidStakeInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.AddLockedStake;
    } & ParsedAddLockedStakeInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.UpgradeLockedStake;
    } & ParsedUpgradeLockedStakeInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.RemoveLiquidStake;
    } & ParsedRemoveLiquidStakeInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.RemoveLockedStake;
    } & ParsedRemoveLockedStakeInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.ClaimStakes;
    } & ParsedClaimStakesInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.FinalizeGenesisLockCampaign;
    } & ParsedFinalizeGenesisLockCampaignInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.SetPoolLiquidityState;
    } & ParsedSetPoolLiquidityStateInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.FinalizeLockedStake;
    } & ParsedFinalizeLockedStakeInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.ResolveStakingRound;
    } & ParsedResolveStakingRoundInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.GetLpTokenPrice;
    } & ParsedGetLpTokenPriceInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.GetPoolInfoSnapshot;
    } & ParsedGetPoolInfoSnapshotInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.MintLmTokensFromBucket;
    } & ParsedMintLmTokensFromBucketInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.IncreasePositionLong;
    } & ParsedIncreasePositionLongInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.PatchCustodyLockedAmount;
    } & ParsedPatchCustodyLockedAmountInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.IncreasePositionShort;
    } & ParsedIncreasePositionShortInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.SetStakingLmEmissionPotentiometers;
    } & ParsedSetStakingLmEmissionPotentiometersInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.SetAdmin;
    } & ParsedSetAdminInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.SetProtocolFeeRecipient;
    } & ParsedSetProtocolFeeRecipientInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.SetCustodyMaxCumulativeShortPositionSizeUsd;
    } & ParsedSetCustodyMaxCumulativeShortPositionSizeUsdInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.SetTakeProfitLong;
    } & ParsedSetTakeProfitLongInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.SetStopLossLong;
    } & ParsedSetStopLossLongInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.SetTakeProfitShort;
    } & ParsedSetTakeProfitShortInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.SetStopLossShort;
    } & ParsedSetStopLossShortInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.CancelTakeProfit;
    } & ParsedCancelTakeProfitInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.CancelStopLoss;
    } & ParsedCancelStopLossInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.PatchStakingRound;
    } & ParsedPatchStakingRoundInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.SetPoolWhitelistedSwapper;
    } & ParsedSetPoolWhitelistedSwapperInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.InitLimitOrderBook;
    } & ParsedInitLimitOrderBookInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.AddLimitOrder;
    } & ParsedAddLimitOrderInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.CancelLimitOrder;
    } & ParsedCancelLimitOrderInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.ExecuteLimitOrderLong;
    } & ParsedExecuteLimitOrderLongInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.ExecuteLimitOrderShort;
    } & ParsedExecuteLimitOrderShortInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.DistributeFees;
    } & ParsedDistributeFeesInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.ClaimReferralFee;
    } & ParsedClaimReferralFeeInstruction<TProgram>)
  | ({
      instructionType: AdrenaInstruction.InitReferrerRewardTokenVault;
    } & ParsedInitReferrerRewardTokenVaultInstruction<TProgram>);
