/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const CORTEX_DISCRIMINATOR = new Uint8Array([
  143, 120, 192, 142, 209, 42, 159, 192,
]);

export function getCortexDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CORTEX_DISCRIMINATOR);
}

export type Cortex = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  transferAuthorityBump: number;
  lmTokenBump: number;
  governanceTokenBump: number;
  initialized: number;
  feeConversionDecimals: number;
  padding: ReadonlyUint8Array;
  lmTokenMint: Address;
  inceptionTime: bigint;
  admin: Address;
  feeRedistributionMint: Address;
  protocolFeeRecipient: Address;
  pools: Array<Address>;
  userProfilesCount: bigint;
  governanceProgram: Address;
  governanceRealm: Address;
  coreContributorBucketAllocation: bigint;
  foundationBucketAllocation: bigint;
  ecosystemBucketAllocation: bigint;
  coreContributorBucketVestedAmount: bigint;
  coreContributorBucketMintedAmount: bigint;
  foundationBucketVestedAmount: bigint;
  foundationBucketMintedAmount: bigint;
  ecosystemBucketVestedAmount: bigint;
  ecosystemBucketMintedAmount: bigint;
  genesisLiquidityAlpAmount: bigint;
  uniquePositionIdCounter: bigint;
};

export type CortexArgs = {
  bump: number;
  transferAuthorityBump: number;
  lmTokenBump: number;
  governanceTokenBump: number;
  initialized: number;
  feeConversionDecimals: number;
  padding: ReadonlyUint8Array;
  lmTokenMint: Address;
  inceptionTime: number | bigint;
  admin: Address;
  feeRedistributionMint: Address;
  protocolFeeRecipient: Address;
  pools: Array<Address>;
  userProfilesCount: number | bigint;
  governanceProgram: Address;
  governanceRealm: Address;
  coreContributorBucketAllocation: number | bigint;
  foundationBucketAllocation: number | bigint;
  ecosystemBucketAllocation: number | bigint;
  coreContributorBucketVestedAmount: number | bigint;
  coreContributorBucketMintedAmount: number | bigint;
  foundationBucketVestedAmount: number | bigint;
  foundationBucketMintedAmount: number | bigint;
  ecosystemBucketVestedAmount: number | bigint;
  ecosystemBucketMintedAmount: number | bigint;
  genesisLiquidityAlpAmount: number | bigint;
  uniquePositionIdCounter: number | bigint;
};

export function getCortexEncoder(): Encoder<CortexArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['transferAuthorityBump', getU8Encoder()],
      ['lmTokenBump', getU8Encoder()],
      ['governanceTokenBump', getU8Encoder()],
      ['initialized', getU8Encoder()],
      ['feeConversionDecimals', getU8Encoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 2)],
      ['lmTokenMint', getAddressEncoder()],
      ['inceptionTime', getI64Encoder()],
      ['admin', getAddressEncoder()],
      ['feeRedistributionMint', getAddressEncoder()],
      ['protocolFeeRecipient', getAddressEncoder()],
      ['pools', getArrayEncoder(getAddressEncoder(), { size: 4 })],
      ['userProfilesCount', getU64Encoder()],
      ['governanceProgram', getAddressEncoder()],
      ['governanceRealm', getAddressEncoder()],
      ['coreContributorBucketAllocation', getU64Encoder()],
      ['foundationBucketAllocation', getU64Encoder()],
      ['ecosystemBucketAllocation', getU64Encoder()],
      ['coreContributorBucketVestedAmount', getU64Encoder()],
      ['coreContributorBucketMintedAmount', getU64Encoder()],
      ['foundationBucketVestedAmount', getU64Encoder()],
      ['foundationBucketMintedAmount', getU64Encoder()],
      ['ecosystemBucketVestedAmount', getU64Encoder()],
      ['ecosystemBucketMintedAmount', getU64Encoder()],
      ['genesisLiquidityAlpAmount', getU64Encoder()],
      ['uniquePositionIdCounter', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CORTEX_DISCRIMINATOR })
  );
}

export function getCortexDecoder(): Decoder<Cortex> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['transferAuthorityBump', getU8Decoder()],
    ['lmTokenBump', getU8Decoder()],
    ['governanceTokenBump', getU8Decoder()],
    ['initialized', getU8Decoder()],
    ['feeConversionDecimals', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 2)],
    ['lmTokenMint', getAddressDecoder()],
    ['inceptionTime', getI64Decoder()],
    ['admin', getAddressDecoder()],
    ['feeRedistributionMint', getAddressDecoder()],
    ['protocolFeeRecipient', getAddressDecoder()],
    ['pools', getArrayDecoder(getAddressDecoder(), { size: 4 })],
    ['userProfilesCount', getU64Decoder()],
    ['governanceProgram', getAddressDecoder()],
    ['governanceRealm', getAddressDecoder()],
    ['coreContributorBucketAllocation', getU64Decoder()],
    ['foundationBucketAllocation', getU64Decoder()],
    ['ecosystemBucketAllocation', getU64Decoder()],
    ['coreContributorBucketVestedAmount', getU64Decoder()],
    ['coreContributorBucketMintedAmount', getU64Decoder()],
    ['foundationBucketVestedAmount', getU64Decoder()],
    ['foundationBucketMintedAmount', getU64Decoder()],
    ['ecosystemBucketVestedAmount', getU64Decoder()],
    ['ecosystemBucketMintedAmount', getU64Decoder()],
    ['genesisLiquidityAlpAmount', getU64Decoder()],
    ['uniquePositionIdCounter', getU64Decoder()],
  ]);
}

export function getCortexCodec(): Codec<CortexArgs, Cortex> {
  return combineCodec(getCortexEncoder(), getCortexDecoder());
}

export function decodeCortex<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Cortex, TAddress>;
export function decodeCortex<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Cortex, TAddress>;
export function decodeCortex<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Cortex, TAddress> | MaybeAccount<Cortex, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCortexDecoder()
  );
}

export async function fetchCortex<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Cortex, TAddress>> {
  const maybeAccount = await fetchMaybeCortex(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCortex<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Cortex, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCortex(maybeAccount);
}

export async function fetchAllCortex(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Cortex>[]> {
  const maybeAccounts = await fetchAllMaybeCortex(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCortex(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Cortex>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeCortex(maybeAccount));
}

export function getCortexSize(): number {
  return 440;
}
