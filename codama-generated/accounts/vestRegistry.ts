/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const VEST_REGISTRY_DISCRIMINATOR = new Uint8Array([
  57, 105, 96, 158, 49, 154, 10, 29,
]);

export function getVestRegistryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VEST_REGISTRY_DISCRIMINATOR
  );
}

export type VestRegistry = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  vests: Array<Address>;
  vestingTokenAmount: bigint;
  vestedTokenAmount: bigint;
};

export type VestRegistryArgs = {
  bump: number;
  vests: Array<Address>;
  vestingTokenAmount: number | bigint;
  vestedTokenAmount: number | bigint;
};

export function getVestRegistryEncoder(): Encoder<VestRegistryArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['vests', getArrayEncoder(getAddressEncoder())],
      ['vestingTokenAmount', getU64Encoder()],
      ['vestedTokenAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: VEST_REGISTRY_DISCRIMINATOR })
  );
}

export function getVestRegistryDecoder(): Decoder<VestRegistry> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['vests', getArrayDecoder(getAddressDecoder())],
    ['vestingTokenAmount', getU64Decoder()],
    ['vestedTokenAmount', getU64Decoder()],
  ]);
}

export function getVestRegistryCodec(): Codec<VestRegistryArgs, VestRegistry> {
  return combineCodec(getVestRegistryEncoder(), getVestRegistryDecoder());
}

export function decodeVestRegistry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<VestRegistry, TAddress>;
export function decodeVestRegistry<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<VestRegistry, TAddress>;
export function decodeVestRegistry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<VestRegistry, TAddress> | MaybeAccount<VestRegistry, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVestRegistryDecoder()
  );
}

export async function fetchVestRegistry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<VestRegistry, TAddress>> {
  const maybeAccount = await fetchMaybeVestRegistry(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVestRegistry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<VestRegistry, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVestRegistry(maybeAccount);
}

export async function fetchAllVestRegistry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<VestRegistry>[]> {
  const maybeAccounts = await fetchAllMaybeVestRegistry(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVestRegistry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<VestRegistry>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVestRegistry(maybeAccount));
}
