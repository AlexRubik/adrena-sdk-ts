/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getLimitOrderDecoder,
  getLimitOrderEncoder,
  type LimitOrder,
  type LimitOrderArgs,
} from '../types';

export const LIMIT_ORDER_BOOK_DISCRIMINATOR = new Uint8Array([
  157, 26, 225, 42, 217, 203, 162, 30,
]);

export function getLimitOrderBookDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    LIMIT_ORDER_BOOK_DISCRIMINATOR
  );
}

export type LimitOrderBook = {
  discriminator: ReadonlyUint8Array;
  initialized: number;
  bump: number;
  registeredLimitOrderCount: number;
  padding: ReadonlyUint8Array;
  owner: Address;
  limitOrders: Array<LimitOrder>;
  escrowedLamports: bigint;
};

export type LimitOrderBookArgs = {
  initialized: number;
  bump: number;
  registeredLimitOrderCount: number;
  padding: ReadonlyUint8Array;
  owner: Address;
  limitOrders: Array<LimitOrderArgs>;
  escrowedLamports: number | bigint;
};

export function getLimitOrderBookEncoder(): Encoder<LimitOrderBookArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['initialized', getU8Encoder()],
      ['bump', getU8Encoder()],
      ['registeredLimitOrderCount', getU8Encoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 5)],
      ['owner', getAddressEncoder()],
      ['limitOrders', getArrayEncoder(getLimitOrderEncoder(), { size: 16 })],
      ['escrowedLamports', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: LIMIT_ORDER_BOOK_DISCRIMINATOR })
  );
}

export function getLimitOrderBookDecoder(): Decoder<LimitOrderBook> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['initialized', getU8Decoder()],
    ['bump', getU8Decoder()],
    ['registeredLimitOrderCount', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 5)],
    ['owner', getAddressDecoder()],
    ['limitOrders', getArrayDecoder(getLimitOrderDecoder(), { size: 16 })],
    ['escrowedLamports', getU64Decoder()],
  ]);
}

export function getLimitOrderBookCodec(): Codec<
  LimitOrderBookArgs,
  LimitOrderBook
> {
  return combineCodec(getLimitOrderBookEncoder(), getLimitOrderBookDecoder());
}

export function decodeLimitOrderBook<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<LimitOrderBook, TAddress>;
export function decodeLimitOrderBook<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<LimitOrderBook, TAddress>;
export function decodeLimitOrderBook<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<LimitOrderBook, TAddress> | MaybeAccount<LimitOrderBook, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getLimitOrderBookDecoder()
  );
}

export async function fetchLimitOrderBook<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<LimitOrderBook, TAddress>> {
  const maybeAccount = await fetchMaybeLimitOrderBook(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLimitOrderBook<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<LimitOrderBook, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeLimitOrderBook(maybeAccount);
}

export async function fetchAllLimitOrderBook(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<LimitOrderBook>[]> {
  const maybeAccounts = await fetchAllMaybeLimitOrderBook(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeLimitOrderBook(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<LimitOrderBook>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeLimitOrderBook(maybeAccount)
  );
}

export function getLimitOrderBookSize(): number {
  return 1848;
}
