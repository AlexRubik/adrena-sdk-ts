/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getLimitedStringDecoder,
  getLimitedStringEncoder,
  type LimitedString,
  type LimitedStringArgs,
} from '../types';

export const USER_PROFILE_DISCRIMINATOR = new Uint8Array([
  32, 37, 119, 205, 179, 180, 13, 194,
]);

export function getUserProfileDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    USER_PROFILE_DISCRIMINATOR
  );
}

export type UserProfile = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  version: number;
  profilePicture: number;
  wallpaper: number;
  title: number;
  padding: ReadonlyUint8Array;
  nickname: LimitedString;
  createdAt: bigint;
  owner: Address;
  achievements: ReadonlyUint8Array;
  referrerProfile: Address;
  claimableReferralFeeUsd: bigint;
  totalReferralFeeUsd: bigint;
  padding2: ReadonlyUint8Array;
};

export type UserProfileArgs = {
  bump: number;
  version: number;
  profilePicture: number;
  wallpaper: number;
  title: number;
  padding: ReadonlyUint8Array;
  nickname: LimitedStringArgs;
  createdAt: number | bigint;
  owner: Address;
  achievements: ReadonlyUint8Array;
  referrerProfile: Address;
  claimableReferralFeeUsd: number | bigint;
  totalReferralFeeUsd: number | bigint;
  padding2: ReadonlyUint8Array;
};

export function getUserProfileEncoder(): Encoder<UserProfileArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['version', getU8Encoder()],
      ['profilePicture', getU8Encoder()],
      ['wallpaper', getU8Encoder()],
      ['title', getU8Encoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 3)],
      ['nickname', getLimitedStringEncoder()],
      ['createdAt', getI64Encoder()],
      ['owner', getAddressEncoder()],
      ['achievements', fixEncoderSize(getBytesEncoder(), 256)],
      ['referrerProfile', getAddressEncoder()],
      ['claimableReferralFeeUsd', getU64Encoder()],
      ['totalReferralFeeUsd', getU64Encoder()],
      ['padding2', fixEncoderSize(getBytesEncoder(), 16)],
    ]),
    (value) => ({ ...value, discriminator: USER_PROFILE_DISCRIMINATOR })
  );
}

export function getUserProfileDecoder(): Decoder<UserProfile> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['version', getU8Decoder()],
    ['profilePicture', getU8Decoder()],
    ['wallpaper', getU8Decoder()],
    ['title', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 3)],
    ['nickname', getLimitedStringDecoder()],
    ['createdAt', getI64Decoder()],
    ['owner', getAddressDecoder()],
    ['achievements', fixDecoderSize(getBytesDecoder(), 256)],
    ['referrerProfile', getAddressDecoder()],
    ['claimableReferralFeeUsd', getU64Decoder()],
    ['totalReferralFeeUsd', getU64Decoder()],
    ['padding2', fixDecoderSize(getBytesDecoder(), 16)],
  ]);
}

export function getUserProfileCodec(): Codec<UserProfileArgs, UserProfile> {
  return combineCodec(getUserProfileEncoder(), getUserProfileDecoder());
}

export function decodeUserProfile<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<UserProfile, TAddress>;
export function decodeUserProfile<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<UserProfile, TAddress>;
export function decodeUserProfile<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<UserProfile, TAddress> | MaybeAccount<UserProfile, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUserProfileDecoder()
  );
}

export async function fetchUserProfile<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<UserProfile, TAddress>> {
  const maybeAccount = await fetchMaybeUserProfile(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUserProfile<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<UserProfile, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUserProfile(maybeAccount);
}

export async function fetchAllUserProfile(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<UserProfile>[]> {
  const maybeAccounts = await fetchAllMaybeUserProfile(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUserProfile(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<UserProfile>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeUserProfile(maybeAccount));
}

export function getUserProfileSize(): number {
  return 408;
}
