/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const GENESIS_LOCK_DISCRIMINATOR = new Uint8Array([
  9, 73, 164, 119, 222, 166, 147, 239,
]);

export function getGenesisLockDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GENESIS_LOCK_DISCRIMINATOR
  );
}

export type GenesisLock = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  hasTransitionedToFullyPublic: number;
  hasCompletedOtcIn: number;
  hasCompletedOtcOut: number;
  padding: ReadonlyUint8Array;
  campaignDuration: bigint;
  reservedGrantDuration: bigint;
  campaignStartDate: bigint;
  publicAmount: bigint;
  reservedAmount: bigint;
  publicAmountClaimed: bigint;
  reservedAmountClaimed: bigint;
  reservedGrantOwners: Array<Address>;
  reservedGrantAmounts: Array<bigint>;
  paddingUnsafe: ReadonlyUint8Array;
};

export type GenesisLockArgs = {
  bump: number;
  hasTransitionedToFullyPublic: number;
  hasCompletedOtcIn: number;
  hasCompletedOtcOut: number;
  padding: ReadonlyUint8Array;
  campaignDuration: number | bigint;
  reservedGrantDuration: number | bigint;
  campaignStartDate: number | bigint;
  publicAmount: number | bigint;
  reservedAmount: number | bigint;
  publicAmountClaimed: number | bigint;
  reservedAmountClaimed: number | bigint;
  reservedGrantOwners: Array<Address>;
  reservedGrantAmounts: Array<number | bigint>;
  paddingUnsafe: ReadonlyUint8Array;
};

export function getGenesisLockEncoder(): Encoder<GenesisLockArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['hasTransitionedToFullyPublic', getU8Encoder()],
      ['hasCompletedOtcIn', getU8Encoder()],
      ['hasCompletedOtcOut', getU8Encoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 4)],
      ['campaignDuration', getI64Encoder()],
      ['reservedGrantDuration', getI64Encoder()],
      ['campaignStartDate', getI64Encoder()],
      ['publicAmount', getU64Encoder()],
      ['reservedAmount', getU64Encoder()],
      ['publicAmountClaimed', getU64Encoder()],
      ['reservedAmountClaimed', getU64Encoder()],
      [
        'reservedGrantOwners',
        getArrayEncoder(getAddressEncoder(), { size: 43 }),
      ],
      ['reservedGrantAmounts', getArrayEncoder(getU64Encoder(), { size: 43 })],
      ['paddingUnsafe', fixEncoderSize(getBytesEncoder(), 8)],
    ]),
    (value) => ({ ...value, discriminator: GENESIS_LOCK_DISCRIMINATOR })
  );
}

export function getGenesisLockDecoder(): Decoder<GenesisLock> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['hasTransitionedToFullyPublic', getU8Decoder()],
    ['hasCompletedOtcIn', getU8Decoder()],
    ['hasCompletedOtcOut', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 4)],
    ['campaignDuration', getI64Decoder()],
    ['reservedGrantDuration', getI64Decoder()],
    ['campaignStartDate', getI64Decoder()],
    ['publicAmount', getU64Decoder()],
    ['reservedAmount', getU64Decoder()],
    ['publicAmountClaimed', getU64Decoder()],
    ['reservedAmountClaimed', getU64Decoder()],
    ['reservedGrantOwners', getArrayDecoder(getAddressDecoder(), { size: 43 })],
    ['reservedGrantAmounts', getArrayDecoder(getU64Decoder(), { size: 43 })],
    ['paddingUnsafe', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getGenesisLockCodec(): Codec<GenesisLockArgs, GenesisLock> {
  return combineCodec(getGenesisLockEncoder(), getGenesisLockDecoder());
}

export function decodeGenesisLock<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<GenesisLock, TAddress>;
export function decodeGenesisLock<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<GenesisLock, TAddress>;
export function decodeGenesisLock<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<GenesisLock, TAddress> | MaybeAccount<GenesisLock, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getGenesisLockDecoder()
  );
}

export async function fetchGenesisLock<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<GenesisLock, TAddress>> {
  const maybeAccount = await fetchMaybeGenesisLock(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeGenesisLock<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<GenesisLock, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeGenesisLock(maybeAccount);
}

export async function fetchAllGenesisLock(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<GenesisLock>[]> {
  const maybeAccounts = await fetchAllMaybeGenesisLock(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeGenesisLock(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<GenesisLock>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeGenesisLock(maybeAccount));
}

export function getGenesisLockSize(): number {
  return 1800;
}
