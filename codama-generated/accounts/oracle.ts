/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getOraclePriceDecoder,
  getOraclePriceEncoder,
  type OraclePrice,
  type OraclePriceArgs,
} from '../types';

export const ORACLE_DISCRIMINATOR = new Uint8Array([
  139, 194, 131, 179, 140, 179, 229, 244,
]);

export function getOracleDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ORACLE_DISCRIMINATOR);
}

export type Oracle = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  padding: ReadonlyUint8Array;
  updatedAt: bigint;
  prices: Array<OraclePrice>;
};

export type OracleArgs = {
  bump: number;
  padding: ReadonlyUint8Array;
  updatedAt: number | bigint;
  prices: Array<OraclePriceArgs>;
};

export function getOracleEncoder(): Encoder<OracleArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 7)],
      ['updatedAt', getI64Encoder()],
      ['prices', getArrayEncoder(getOraclePriceEncoder(), { size: 20 })],
    ]),
    (value) => ({ ...value, discriminator: ORACLE_DISCRIMINATOR })
  );
}

export function getOracleDecoder(): Decoder<Oracle> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 7)],
    ['updatedAt', getI64Decoder()],
    ['prices', getArrayDecoder(getOraclePriceDecoder(), { size: 20 })],
  ]);
}

export function getOracleCodec(): Codec<OracleArgs, Oracle> {
  return combineCodec(getOracleEncoder(), getOracleDecoder());
}

export function decodeOracle<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Oracle, TAddress>;
export function decodeOracle<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Oracle, TAddress>;
export function decodeOracle<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Oracle, TAddress> | MaybeAccount<Oracle, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getOracleDecoder()
  );
}

export async function fetchOracle<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Oracle, TAddress>> {
  const maybeAccount = await fetchMaybeOracle(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeOracle<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Oracle, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeOracle(maybeAccount);
}

export async function fetchAllOracle(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Oracle>[]> {
  const maybeAccounts = await fetchAllMaybeOracle(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeOracle(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Oracle>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeOracle(maybeAccount));
}

export function getOracleSize(): number {
  return 1304;
}
