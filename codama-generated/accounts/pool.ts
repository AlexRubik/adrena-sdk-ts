/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getLimitedStringDecoder,
  getLimitedStringEncoder,
  getTokenRatiosDecoder,
  getTokenRatiosEncoder,
  getU128SplitDecoder,
  getU128SplitEncoder,
  type LimitedString,
  type LimitedStringArgs,
  type TokenRatios,
  type TokenRatiosArgs,
  type U128Split,
  type U128SplitArgs,
} from '../types';

export const POOL_DISCRIMINATOR = new Uint8Array([
  241, 154, 109, 4, 17, 177, 109, 188,
]);

export function getPoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(POOL_DISCRIMINATOR);
}

export type Pool = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  lpTokenBump: number;
  nbStableCustody: number;
  initialized: number;
  allowTrade: number;
  allowSwap: number;
  liquidityState: number;
  registeredCustodyCount: number;
  name: LimitedString;
  custodies: Array<Address>;
  feesDebtUsd: bigint;
  referrersFeeDebtUsd: bigint;
  cumulativeReferrerFeeUsd: bigint;
  padding1: ReadonlyUint8Array;
  whitelistedSwapper: Address;
  ratios: Array<TokenRatios>;
  padding2: ReadonlyUint8Array;
  uniqueLimitOrderIdCounter: bigint;
  aumUsd: U128Split;
  inceptionTime: bigint;
  aumSoftCapUsd: bigint;
};

export type PoolArgs = {
  bump: number;
  lpTokenBump: number;
  nbStableCustody: number;
  initialized: number;
  allowTrade: number;
  allowSwap: number;
  liquidityState: number;
  registeredCustodyCount: number;
  name: LimitedStringArgs;
  custodies: Array<Address>;
  feesDebtUsd: number | bigint;
  referrersFeeDebtUsd: number | bigint;
  cumulativeReferrerFeeUsd: number | bigint;
  padding1: ReadonlyUint8Array;
  whitelistedSwapper: Address;
  ratios: Array<TokenRatiosArgs>;
  padding2: ReadonlyUint8Array;
  uniqueLimitOrderIdCounter: number | bigint;
  aumUsd: U128SplitArgs;
  inceptionTime: number | bigint;
  aumSoftCapUsd: number | bigint;
};

export function getPoolEncoder(): Encoder<PoolArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['lpTokenBump', getU8Encoder()],
      ['nbStableCustody', getU8Encoder()],
      ['initialized', getU8Encoder()],
      ['allowTrade', getU8Encoder()],
      ['allowSwap', getU8Encoder()],
      ['liquidityState', getU8Encoder()],
      ['registeredCustodyCount', getU8Encoder()],
      ['name', getLimitedStringEncoder()],
      ['custodies', getArrayEncoder(getAddressEncoder(), { size: 8 })],
      ['feesDebtUsd', getU64Encoder()],
      ['referrersFeeDebtUsd', getU64Encoder()],
      ['cumulativeReferrerFeeUsd', getU64Encoder()],
      ['padding1', fixEncoderSize(getBytesEncoder(), 8)],
      ['whitelistedSwapper', getAddressEncoder()],
      ['ratios', getArrayEncoder(getTokenRatiosEncoder(), { size: 8 })],
      ['padding2', fixEncoderSize(getBytesEncoder(), 8)],
      ['uniqueLimitOrderIdCounter', getU64Encoder()],
      ['aumUsd', getU128SplitEncoder()],
      ['inceptionTime', getI64Encoder()],
      ['aumSoftCapUsd', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: POOL_DISCRIMINATOR })
  );
}

export function getPoolDecoder(): Decoder<Pool> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['lpTokenBump', getU8Decoder()],
    ['nbStableCustody', getU8Decoder()],
    ['initialized', getU8Decoder()],
    ['allowTrade', getU8Decoder()],
    ['allowSwap', getU8Decoder()],
    ['liquidityState', getU8Decoder()],
    ['registeredCustodyCount', getU8Decoder()],
    ['name', getLimitedStringDecoder()],
    ['custodies', getArrayDecoder(getAddressDecoder(), { size: 8 })],
    ['feesDebtUsd', getU64Decoder()],
    ['referrersFeeDebtUsd', getU64Decoder()],
    ['cumulativeReferrerFeeUsd', getU64Decoder()],
    ['padding1', fixDecoderSize(getBytesDecoder(), 8)],
    ['whitelistedSwapper', getAddressDecoder()],
    ['ratios', getArrayDecoder(getTokenRatiosDecoder(), { size: 8 })],
    ['padding2', fixDecoderSize(getBytesDecoder(), 8)],
    ['uniqueLimitOrderIdCounter', getU64Decoder()],
    ['aumUsd', getU128SplitDecoder()],
    ['inceptionTime', getI64Decoder()],
    ['aumSoftCapUsd', getU64Decoder()],
  ]);
}

export function getPoolCodec(): Codec<PoolArgs, Pool> {
  return combineCodec(getPoolEncoder(), getPoolDecoder());
}

export function decodePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Pool, TAddress>;
export function decodePool<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Pool, TAddress>;
export function decodePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Pool, TAddress> | MaybeAccount<Pool, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPoolDecoder()
  );
}

export async function fetchPool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Pool, TAddress>> {
  const maybeAccount = await fetchMaybePool(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Pool, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePool(maybeAccount);
}

export async function fetchAllPool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Pool>[]> {
  const maybeAccounts = await fetchAllMaybePool(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Pool>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePool(maybeAccount));
}

export function getPoolSize(): number {
  return 480;
}
