/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getU128SplitDecoder,
  getU128SplitEncoder,
  type U128Split,
  type U128SplitArgs,
} from '../types';

export const POSITION_DISCRIMINATOR = new Uint8Array([
  170, 188, 143, 228, 122, 64, 247, 208,
]);

export function getPositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(POSITION_DISCRIMINATOR);
}

export type Position = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  side: number;
  takeProfitIsSet: number;
  stopLossIsSet: number;
  paddingUnsafe: ReadonlyUint8Array;
  padding: ReadonlyUint8Array;
  owner: Address;
  pool: Address;
  custody: Address;
  collateralCustody: Address;
  openTime: bigint;
  updateTime: bigint;
  price: bigint;
  sizeUsd: bigint;
  borrowSizeUsd: bigint;
  collateralUsd: bigint;
  unrealizedInterestUsd: bigint;
  cumulativeInterestSnapshot: U128Split;
  lockedAmount: bigint;
  collateralAmount: bigint;
  exitFeeUsd: bigint;
  liquidationFeeUsd: bigint;
  id: bigint;
  takeProfitLimitPrice: bigint;
  paidInterestUsd: bigint;
  stopLossLimitPrice: bigint;
  stopLossClosePositionPrice: bigint;
};

export type PositionArgs = {
  bump: number;
  side: number;
  takeProfitIsSet: number;
  stopLossIsSet: number;
  paddingUnsafe: ReadonlyUint8Array;
  padding: ReadonlyUint8Array;
  owner: Address;
  pool: Address;
  custody: Address;
  collateralCustody: Address;
  openTime: number | bigint;
  updateTime: number | bigint;
  price: number | bigint;
  sizeUsd: number | bigint;
  borrowSizeUsd: number | bigint;
  collateralUsd: number | bigint;
  unrealizedInterestUsd: number | bigint;
  cumulativeInterestSnapshot: U128SplitArgs;
  lockedAmount: number | bigint;
  collateralAmount: number | bigint;
  exitFeeUsd: number | bigint;
  liquidationFeeUsd: number | bigint;
  id: number | bigint;
  takeProfitLimitPrice: number | bigint;
  paidInterestUsd: number | bigint;
  stopLossLimitPrice: number | bigint;
  stopLossClosePositionPrice: number | bigint;
};

export function getPositionEncoder(): Encoder<PositionArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['side', getU8Encoder()],
      ['takeProfitIsSet', getU8Encoder()],
      ['stopLossIsSet', getU8Encoder()],
      ['paddingUnsafe', fixEncoderSize(getBytesEncoder(), 1)],
      ['padding', fixEncoderSize(getBytesEncoder(), 3)],
      ['owner', getAddressEncoder()],
      ['pool', getAddressEncoder()],
      ['custody', getAddressEncoder()],
      ['collateralCustody', getAddressEncoder()],
      ['openTime', getI64Encoder()],
      ['updateTime', getI64Encoder()],
      ['price', getU64Encoder()],
      ['sizeUsd', getU64Encoder()],
      ['borrowSizeUsd', getU64Encoder()],
      ['collateralUsd', getU64Encoder()],
      ['unrealizedInterestUsd', getU64Encoder()],
      ['cumulativeInterestSnapshot', getU128SplitEncoder()],
      ['lockedAmount', getU64Encoder()],
      ['collateralAmount', getU64Encoder()],
      ['exitFeeUsd', getU64Encoder()],
      ['liquidationFeeUsd', getU64Encoder()],
      ['id', getU64Encoder()],
      ['takeProfitLimitPrice', getU64Encoder()],
      ['paidInterestUsd', getU64Encoder()],
      ['stopLossLimitPrice', getU64Encoder()],
      ['stopLossClosePositionPrice', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: POSITION_DISCRIMINATOR })
  );
}

export function getPositionDecoder(): Decoder<Position> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['side', getU8Decoder()],
    ['takeProfitIsSet', getU8Decoder()],
    ['stopLossIsSet', getU8Decoder()],
    ['paddingUnsafe', fixDecoderSize(getBytesDecoder(), 1)],
    ['padding', fixDecoderSize(getBytesDecoder(), 3)],
    ['owner', getAddressDecoder()],
    ['pool', getAddressDecoder()],
    ['custody', getAddressDecoder()],
    ['collateralCustody', getAddressDecoder()],
    ['openTime', getI64Decoder()],
    ['updateTime', getI64Decoder()],
    ['price', getU64Decoder()],
    ['sizeUsd', getU64Decoder()],
    ['borrowSizeUsd', getU64Decoder()],
    ['collateralUsd', getU64Decoder()],
    ['unrealizedInterestUsd', getU64Decoder()],
    ['cumulativeInterestSnapshot', getU128SplitDecoder()],
    ['lockedAmount', getU64Decoder()],
    ['collateralAmount', getU64Decoder()],
    ['exitFeeUsd', getU64Decoder()],
    ['liquidationFeeUsd', getU64Decoder()],
    ['id', getU64Decoder()],
    ['takeProfitLimitPrice', getU64Decoder()],
    ['paidInterestUsd', getU64Decoder()],
    ['stopLossLimitPrice', getU64Decoder()],
    ['stopLossClosePositionPrice', getU64Decoder()],
  ]);
}

export function getPositionCodec(): Codec<PositionArgs, Position> {
  return combineCodec(getPositionEncoder(), getPositionDecoder());
}

export function decodePosition<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Position, TAddress>;
export function decodePosition<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Position, TAddress>;
export function decodePosition<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Position, TAddress> | MaybeAccount<Position, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPositionDecoder()
  );
}

export async function fetchPosition<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Position, TAddress>> {
  const maybeAccount = await fetchMaybePosition(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePosition<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Position, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePosition(maybeAccount);
}

export async function fetchAllPosition(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Position>[]> {
  const maybeAccounts = await fetchAllMaybePosition(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePosition(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Position>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePosition(maybeAccount));
}

export function getPositionSize(): number {
  return 288;
}
