/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getLiquidStakeDecoder,
  getLiquidStakeEncoder,
  getLockedStakeDecoder,
  getLockedStakeEncoder,
  type LiquidStake,
  type LiquidStakeArgs,
  type LockedStake,
  type LockedStakeArgs,
} from '../types';

export const USER_STAKING_DISCRIMINATOR = new Uint8Array([
  34, 83, 202, 93, 25, 243, 63, 54,
]);

export function getUserStakingDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    USER_STAKING_DISCRIMINATOR
  );
}

export type UserStaking = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  unusedUnsafe: ReadonlyUint8Array;
  stakingType: number;
  padding: ReadonlyUint8Array;
  lockedStakeIdCounter: bigint;
  liquidStake: LiquidStake;
  lockedStakes: Array<LockedStake>;
};

export type UserStakingArgs = {
  bump: number;
  unusedUnsafe: ReadonlyUint8Array;
  stakingType: number;
  padding: ReadonlyUint8Array;
  lockedStakeIdCounter: number | bigint;
  liquidStake: LiquidStakeArgs;
  lockedStakes: Array<LockedStakeArgs>;
};

export function getUserStakingEncoder(): Encoder<UserStakingArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['unusedUnsafe', fixEncoderSize(getBytesEncoder(), 1)],
      ['stakingType', getU8Encoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 5)],
      ['lockedStakeIdCounter', getU64Encoder()],
      ['liquidStake', getLiquidStakeEncoder()],
      ['lockedStakes', getArrayEncoder(getLockedStakeEncoder(), { size: 32 })],
    ]),
    (value) => ({ ...value, discriminator: USER_STAKING_DISCRIMINATOR })
  );
}

export function getUserStakingDecoder(): Decoder<UserStaking> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['unusedUnsafe', fixDecoderSize(getBytesDecoder(), 1)],
    ['stakingType', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 5)],
    ['lockedStakeIdCounter', getU64Decoder()],
    ['liquidStake', getLiquidStakeDecoder()],
    ['lockedStakes', getArrayDecoder(getLockedStakeDecoder(), { size: 32 })],
  ]);
}

export function getUserStakingCodec(): Codec<UserStakingArgs, UserStaking> {
  return combineCodec(getUserStakingEncoder(), getUserStakingDecoder());
}

export function decodeUserStaking<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<UserStaking, TAddress>;
export function decodeUserStaking<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<UserStaking, TAddress>;
export function decodeUserStaking<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<UserStaking, TAddress> | MaybeAccount<UserStaking, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUserStakingDecoder()
  );
}

export async function fetchUserStaking<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<UserStaking, TAddress>> {
  const maybeAccount = await fetchMaybeUserStaking(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUserStaking<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<UserStaking, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUserStaking(maybeAccount);
}

export async function fetchAllUserStaking(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<UserStaking>[]> {
  const maybeAccounts = await fetchAllMaybeUserStaking(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUserStaking(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<UserStaking>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeUserStaking(maybeAccount));
}

export function getUserStakingSize(): number {
  return 3904;
}
