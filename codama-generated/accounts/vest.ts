/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const VEST_DISCRIMINATOR = new Uint8Array([
  45, 204, 95, 56, 150, 233, 97, 231,
]);

export function getVestDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(VEST_DISCRIMINATOR);
}

export type Vest = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  originBucket: number;
  cancelled: number;
  version: number;
  voteMultiplier: number;
  amount: bigint;
  unlockStartTimestamp: bigint;
  unlockEndTimestamp: bigint;
  claimedAmount: bigint;
  lastClaimTimestamp: bigint;
  owner: Address;
  delegate: Address;
  hasDelegate: number;
  padding2: ReadonlyUint8Array;
  padding3: ReadonlyUint8Array;
};

export type VestArgs = {
  bump: number;
  originBucket: number;
  cancelled: number;
  version: number;
  voteMultiplier: number;
  amount: number | bigint;
  unlockStartTimestamp: number | bigint;
  unlockEndTimestamp: number | bigint;
  claimedAmount: number | bigint;
  lastClaimTimestamp: number | bigint;
  owner: Address;
  delegate: Address;
  hasDelegate: number;
  padding2: ReadonlyUint8Array;
  padding3: ReadonlyUint8Array;
};

export function getVestEncoder(): Encoder<VestArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['originBucket', getU8Encoder()],
      ['cancelled', getU8Encoder()],
      ['version', getU8Encoder()],
      ['voteMultiplier', getU32Encoder()],
      ['amount', getU64Encoder()],
      ['unlockStartTimestamp', getI64Encoder()],
      ['unlockEndTimestamp', getI64Encoder()],
      ['claimedAmount', getU64Encoder()],
      ['lastClaimTimestamp', getI64Encoder()],
      ['owner', getAddressEncoder()],
      ['delegate', getAddressEncoder()],
      ['hasDelegate', getU8Encoder()],
      ['padding2', fixEncoderSize(getBytesEncoder(), 7)],
      ['padding3', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({ ...value, discriminator: VEST_DISCRIMINATOR })
  );
}

export function getVestDecoder(): Decoder<Vest> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['originBucket', getU8Decoder()],
    ['cancelled', getU8Decoder()],
    ['version', getU8Decoder()],
    ['voteMultiplier', getU32Decoder()],
    ['amount', getU64Decoder()],
    ['unlockStartTimestamp', getI64Decoder()],
    ['unlockEndTimestamp', getI64Decoder()],
    ['claimedAmount', getU64Decoder()],
    ['lastClaimTimestamp', getI64Decoder()],
    ['owner', getAddressDecoder()],
    ['delegate', getAddressDecoder()],
    ['hasDelegate', getU8Decoder()],
    ['padding2', fixDecoderSize(getBytesDecoder(), 7)],
    ['padding3', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getVestCodec(): Codec<VestArgs, Vest> {
  return combineCodec(getVestEncoder(), getVestDecoder());
}

export function decodeVest<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Vest, TAddress>;
export function decodeVest<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Vest, TAddress>;
export function decodeVest<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Vest, TAddress> | MaybeAccount<Vest, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVestDecoder()
  );
}

export async function fetchVest<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Vest, TAddress>> {
  const maybeAccount = await fetchMaybeVest(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVest<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Vest, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVest(maybeAccount);
}

export async function fetchAllVest(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Vest>[]> {
  const maybeAccounts = await fetchAllMaybeVest(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVest(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Vest>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVest(maybeAccount));
}

export function getVestSize(): number {
  return 160;
}
