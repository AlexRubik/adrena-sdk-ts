/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getLimitedStringDecoder,
  getLimitedStringEncoder,
  getTradingStatsDecoder,
  getTradingStatsEncoder,
  type LimitedString,
  type LimitedStringArgs,
  type TradingStats,
  type TradingStatsArgs,
} from '../types';

export const USER_PROFILE_V1_DISCRIMINATOR = new Uint8Array([
  173, 169, 254, 61, 247, 125, 200, 42,
]);

export function getUserProfileV1DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    USER_PROFILE_V1_DISCRIMINATOR
  );
}

export type UserProfileV1 = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  version: number;
  padding: ReadonlyUint8Array;
  nickname: LimitedString;
  createdAt: bigint;
  owner: Address;
  swapCount: bigint;
  swapVolumeUsd: bigint;
  swapFeePaidUsd: bigint;
  shortStats: TradingStats;
  longStats: TradingStats;
};

export type UserProfileV1Args = {
  bump: number;
  version: number;
  padding: ReadonlyUint8Array;
  nickname: LimitedStringArgs;
  createdAt: number | bigint;
  owner: Address;
  swapCount: number | bigint;
  swapVolumeUsd: number | bigint;
  swapFeePaidUsd: number | bigint;
  shortStats: TradingStatsArgs;
  longStats: TradingStatsArgs;
};

export function getUserProfileV1Encoder(): Encoder<UserProfileV1Args> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['version', getU8Encoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 6)],
      ['nickname', getLimitedStringEncoder()],
      ['createdAt', getI64Encoder()],
      ['owner', getAddressEncoder()],
      ['swapCount', getU64Encoder()],
      ['swapVolumeUsd', getU64Encoder()],
      ['swapFeePaidUsd', getU64Encoder()],
      ['shortStats', getTradingStatsEncoder()],
      ['longStats', getTradingStatsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: USER_PROFILE_V1_DISCRIMINATOR })
  );
}

export function getUserProfileV1Decoder(): Decoder<UserProfileV1> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['version', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 6)],
    ['nickname', getLimitedStringDecoder()],
    ['createdAt', getI64Decoder()],
    ['owner', getAddressDecoder()],
    ['swapCount', getU64Decoder()],
    ['swapVolumeUsd', getU64Decoder()],
    ['swapFeePaidUsd', getU64Decoder()],
    ['shortStats', getTradingStatsDecoder()],
    ['longStats', getTradingStatsDecoder()],
  ]);
}

export function getUserProfileV1Codec(): Codec<
  UserProfileV1Args,
  UserProfileV1
> {
  return combineCodec(getUserProfileV1Encoder(), getUserProfileV1Decoder());
}

export function decodeUserProfileV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<UserProfileV1, TAddress>;
export function decodeUserProfileV1<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<UserProfileV1, TAddress>;
export function decodeUserProfileV1<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<UserProfileV1, TAddress> | MaybeAccount<UserProfileV1, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUserProfileV1Decoder()
  );
}

export async function fetchUserProfileV1<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<UserProfileV1, TAddress>> {
  const maybeAccount = await fetchMaybeUserProfileV1(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUserProfileV1<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<UserProfileV1, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUserProfileV1(maybeAccount);
}

export async function fetchAllUserProfileV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<UserProfileV1>[]> {
  const maybeAccounts = await fetchAllMaybeUserProfileV1(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUserProfileV1(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<UserProfileV1>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeUserProfileV1(maybeAccount));
}

export function getUserProfileV1Size(): number {
  return 224;
}
