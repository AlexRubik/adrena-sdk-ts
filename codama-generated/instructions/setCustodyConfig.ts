/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getBorrowRateParamsDecoder,
  getBorrowRateParamsEncoder,
  getFeesDecoder,
  getFeesEncoder,
  getLimitedStringDecoder,
  getLimitedStringEncoder,
  getPricingParamsDecoder,
  getPricingParamsEncoder,
  getTokenRatiosDecoder,
  getTokenRatiosEncoder,
  type BorrowRateParams,
  type BorrowRateParamsArgs,
  type Fees,
  type FeesArgs,
  type LimitedString,
  type LimitedStringArgs,
  type PricingParams,
  type PricingParamsArgs,
  type TokenRatios,
  type TokenRatiosArgs,
} from '../types';

export const SET_CUSTODY_CONFIG_DISCRIMINATOR = new Uint8Array([
  133, 97, 130, 143, 215, 229, 36, 176,
]);

export function getSetCustodyConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_CUSTODY_CONFIG_DISCRIMINATOR
  );
}

export type SetCustodyConfigInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountCustody extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountCustody extends string
        ? WritableAccount<TAccountCustody>
        : TAccountCustody,
      ...TRemainingAccounts,
    ]
  >;

export type SetCustodyConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  isStable: boolean;
  oracle: LimitedString;
  tradeOracle: LimitedString;
  pricing: PricingParams;
  fees: Fees;
  borrowRate: BorrowRateParams;
  ratios: Array<TokenRatios>;
};

export type SetCustodyConfigInstructionDataArgs = {
  isStable: boolean;
  oracle: LimitedStringArgs;
  tradeOracle: LimitedStringArgs;
  pricing: PricingParamsArgs;
  fees: FeesArgs;
  borrowRate: BorrowRateParamsArgs;
  ratios: Array<TokenRatiosArgs>;
};

export function getSetCustodyConfigInstructionDataEncoder(): Encoder<SetCustodyConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['isStable', getBooleanEncoder()],
      ['oracle', getLimitedStringEncoder()],
      ['tradeOracle', getLimitedStringEncoder()],
      ['pricing', getPricingParamsEncoder()],
      ['fees', getFeesEncoder()],
      ['borrowRate', getBorrowRateParamsEncoder()],
      ['ratios', getArrayEncoder(getTokenRatiosEncoder(), { size: 8 })],
    ]),
    (value) => ({ ...value, discriminator: SET_CUSTODY_CONFIG_DISCRIMINATOR })
  );
}

export function getSetCustodyConfigInstructionDataDecoder(): Decoder<SetCustodyConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['isStable', getBooleanDecoder()],
    ['oracle', getLimitedStringDecoder()],
    ['tradeOracle', getLimitedStringDecoder()],
    ['pricing', getPricingParamsDecoder()],
    ['fees', getFeesDecoder()],
    ['borrowRate', getBorrowRateParamsDecoder()],
    ['ratios', getArrayDecoder(getTokenRatiosDecoder(), { size: 8 })],
  ]);
}

export function getSetCustodyConfigInstructionDataCodec(): Codec<
  SetCustodyConfigInstructionDataArgs,
  SetCustodyConfigInstructionData
> {
  return combineCodec(
    getSetCustodyConfigInstructionDataEncoder(),
    getSetCustodyConfigInstructionDataDecoder()
  );
}

export type SetCustodyConfigInput<
  TAccountAdmin extends string = string,
  TAccountPool extends string = string,
  TAccountCortex extends string = string,
  TAccountCustody extends string = string,
> = {
  /** #1 */
  admin: TransactionSigner<TAccountAdmin>;
  /** #2 */
  pool: Address<TAccountPool>;
  /** #3 */
  cortex: Address<TAccountCortex>;
  /** #4 */
  custody: Address<TAccountCustody>;
  isStable: SetCustodyConfigInstructionDataArgs['isStable'];
  oracle: SetCustodyConfigInstructionDataArgs['oracle'];
  tradeOracle: SetCustodyConfigInstructionDataArgs['tradeOracle'];
  pricing: SetCustodyConfigInstructionDataArgs['pricing'];
  fees: SetCustodyConfigInstructionDataArgs['fees'];
  borrowRate: SetCustodyConfigInstructionDataArgs['borrowRate'];
  ratios: SetCustodyConfigInstructionDataArgs['ratios'];
};

export function getSetCustodyConfigInstruction<
  TAccountAdmin extends string,
  TAccountPool extends string,
  TAccountCortex extends string,
  TAccountCustody extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: SetCustodyConfigInput<
    TAccountAdmin,
    TAccountPool,
    TAccountCortex,
    TAccountCustody
  >,
  config?: { programAddress?: TProgramAddress }
): SetCustodyConfigInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountPool,
  TAccountCortex,
  TAccountCustody
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    cortex: { value: input.cortex ?? null, isWritable: true },
    custody: { value: input.custody ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.custody),
    ],
    programAddress,
    data: getSetCustodyConfigInstructionDataEncoder().encode(
      args as SetCustodyConfigInstructionDataArgs
    ),
  } as SetCustodyConfigInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountPool,
    TAccountCortex,
    TAccountCustody
  >;

  return instruction;
}

export type ParsedSetCustodyConfigInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    admin: TAccountMetas[0];
    /** #2 */
    pool: TAccountMetas[1];
    /** #3 */
    cortex: TAccountMetas[2];
    /** #4 */
    custody: TAccountMetas[3];
  };
  data: SetCustodyConfigInstructionData;
};

export function parseSetCustodyConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetCustodyConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      pool: getNextAccount(),
      cortex: getNextAccount(),
      custody: getNextAccount(),
    },
    data: getSetCustodyConfigInstructionDataDecoder().decode(instruction.data),
  };
}
