/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADD_POOL_PART_ONE_DISCRIMINATOR = new Uint8Array([
  88, 239, 108, 37, 141, 192, 151, 214,
]);

export function getAddPoolPartOneDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_POOL_PART_ONE_DISCRIMINATOR
  );
}

export type AddPoolPartOneInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountLpTokenMint extends string | IAccountMeta<string> = string,
  TAccountLpTokenMintMetadata extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountMplTokenMetadataProgram extends
    | string
    | IAccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountAdrenaProgram extends string | IAccountMeta<string> = string,
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountLpTokenMint extends string
        ? WritableAccount<TAccountLpTokenMint>
        : TAccountLpTokenMint,
      TAccountLpTokenMintMetadata extends string
        ? WritableAccount<TAccountLpTokenMintMetadata>
        : TAccountLpTokenMintMetadata,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountMplTokenMetadataProgram extends string
        ? ReadonlyAccount<TAccountMplTokenMetadataProgram>
        : TAccountMplTokenMetadataProgram,
      TAccountAdrenaProgram extends string
        ? ReadonlyAccount<TAccountAdrenaProgram>
        : TAccountAdrenaProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type AddPoolPartOneInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: string;
  aumSoftCapUsd: bigint;
  lpTokenName: string;
  lpTokenSymbol: string;
  lpTokenUri: string;
};

export type AddPoolPartOneInstructionDataArgs = {
  name: string;
  aumSoftCapUsd: number | bigint;
  lpTokenName: string;
  lpTokenSymbol: string;
  lpTokenUri: string;
};

export function getAddPoolPartOneInstructionDataEncoder(): Encoder<AddPoolPartOneInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['aumSoftCapUsd', getU64Encoder()],
      ['lpTokenName', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'lpTokenSymbol',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      ['lpTokenUri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: ADD_POOL_PART_ONE_DISCRIMINATOR })
  );
}

export function getAddPoolPartOneInstructionDataDecoder(): Decoder<AddPoolPartOneInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['aumSoftCapUsd', getU64Decoder()],
    ['lpTokenName', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['lpTokenSymbol', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['lpTokenUri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getAddPoolPartOneInstructionDataCodec(): Codec<
  AddPoolPartOneInstructionDataArgs,
  AddPoolPartOneInstructionData
> {
  return combineCodec(
    getAddPoolPartOneInstructionDataEncoder(),
    getAddPoolPartOneInstructionDataDecoder()
  );
}

export type AddPoolPartOneInput<
  TAccountAdmin extends string = string,
  TAccountPayer extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountLpTokenMint extends string = string,
  TAccountLpTokenMintMetadata extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMplTokenMetadataProgram extends string = string,
  TAccountAdrenaProgram extends string = string,
  TAccountRent extends string = string,
> = {
  /** #1 */
  admin: TransactionSigner<TAccountAdmin>;
  /** #2 */
  payer: TransactionSigner<TAccountPayer>;
  /** #3 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #4 */
  cortex: Address<TAccountCortex>;
  /** #5 */
  pool: Address<TAccountPool>;
  /** #6 */
  lpTokenMint: Address<TAccountLpTokenMint>;
  /** #7 */
  lpTokenMintMetadata: Address<TAccountLpTokenMintMetadata>;
  /** #8 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #9 */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** #10 */
  mplTokenMetadataProgram?: Address<TAccountMplTokenMetadataProgram>;
  /** #11 */
  adrenaProgram: Address<TAccountAdrenaProgram>;
  /** #12 */
  rent?: Address<TAccountRent>;
  name: AddPoolPartOneInstructionDataArgs['name'];
  aumSoftCapUsd: AddPoolPartOneInstructionDataArgs['aumSoftCapUsd'];
  lpTokenName: AddPoolPartOneInstructionDataArgs['lpTokenName'];
  lpTokenSymbol: AddPoolPartOneInstructionDataArgs['lpTokenSymbol'];
  lpTokenUri: AddPoolPartOneInstructionDataArgs['lpTokenUri'];
};

export function getAddPoolPartOneInstruction<
  TAccountAdmin extends string,
  TAccountPayer extends string,
  TAccountTransferAuthority extends string,
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountLpTokenMint extends string,
  TAccountLpTokenMintMetadata extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountMplTokenMetadataProgram extends string,
  TAccountAdrenaProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: AddPoolPartOneInput<
    TAccountAdmin,
    TAccountPayer,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountPool,
    TAccountLpTokenMint,
    TAccountLpTokenMintMetadata,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountMplTokenMetadataProgram,
    TAccountAdrenaProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): AddPoolPartOneInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountPayer,
  TAccountTransferAuthority,
  TAccountCortex,
  TAccountPool,
  TAccountLpTokenMint,
  TAccountLpTokenMintMetadata,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountMplTokenMetadataProgram,
  TAccountAdrenaProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    cortex: { value: input.cortex ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    lpTokenMint: { value: input.lpTokenMint ?? null, isWritable: true },
    lpTokenMintMetadata: {
      value: input.lpTokenMintMetadata ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    mplTokenMetadataProgram: {
      value: input.mplTokenMetadataProgram ?? null,
      isWritable: false,
    },
    adrenaProgram: { value: input.adrenaProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.mplTokenMetadataProgram.value) {
    accounts.mplTokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.lpTokenMint),
      getAccountMeta(accounts.lpTokenMintMetadata),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.mplTokenMetadataProgram),
      getAccountMeta(accounts.adrenaProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getAddPoolPartOneInstructionDataEncoder().encode(
      args as AddPoolPartOneInstructionDataArgs
    ),
  } as AddPoolPartOneInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountPayer,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountPool,
    TAccountLpTokenMint,
    TAccountLpTokenMintMetadata,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountMplTokenMetadataProgram,
    TAccountAdrenaProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedAddPoolPartOneInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    admin: TAccountMetas[0];
    /** #2 */
    payer: TAccountMetas[1];
    /** #3 */
    transferAuthority: TAccountMetas[2];
    /** #4 */
    cortex: TAccountMetas[3];
    /** #5 */
    pool: TAccountMetas[4];
    /** #6 */
    lpTokenMint: TAccountMetas[5];
    /** #7 */
    lpTokenMintMetadata: TAccountMetas[6];
    /** #8 */
    systemProgram: TAccountMetas[7];
    /** #9 */
    tokenProgram: TAccountMetas[8];
    /** #10 */
    mplTokenMetadataProgram: TAccountMetas[9];
    /** #11 */
    adrenaProgram: TAccountMetas[10];
    /** #12 */
    rent: TAccountMetas[11];
  };
  data: AddPoolPartOneInstructionData;
};

export function parseAddPoolPartOneInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAddPoolPartOneInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      payer: getNextAccount(),
      transferAuthority: getNextAccount(),
      cortex: getNextAccount(),
      pool: getNextAccount(),
      lpTokenMint: getNextAccount(),
      lpTokenMintMetadata: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      mplTokenMetadataProgram: getNextAccount(),
      adrenaProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getAddPoolPartOneInstructionDataDecoder().decode(instruction.data),
  };
}
