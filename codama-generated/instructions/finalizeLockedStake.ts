/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const FINALIZE_LOCKED_STAKE_DISCRIMINATOR = new Uint8Array([
  202, 160, 165, 78, 142, 237, 39, 59,
]);

export function getFinalizeLockedStakeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    FINALIZE_LOCKED_STAKE_DISCRIMINATOR
  );
}

export type FinalizeLockedStakeInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountCaller extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountUserStaking extends string | IAccountMeta<string> = string,
  TAccountStaking extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountLmTokenMint extends string | IAccountMeta<string> = string,
  TAccountGovernanceTokenMint extends string | IAccountMeta<string> = string,
  TAccountGovernanceRealm extends string | IAccountMeta<string> = string,
  TAccountGovernanceRealmConfig extends string | IAccountMeta<string> = string,
  TAccountGovernanceGoverningTokenHolding extends
    | string
    | IAccountMeta<string> = string,
  TAccountGovernanceGoverningTokenOwnerRecord extends
    | string
    | IAccountMeta<string> = string,
  TAccountGovernanceProgram extends string | IAccountMeta<string> = string,
  TAccountAdrenaProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountCaller extends string
        ? WritableSignerAccount<TAccountCaller> &
            IAccountSignerMeta<TAccountCaller>
        : TAccountCaller,
      TAccountOwner extends string
        ? WritableAccount<TAccountOwner>
        : TAccountOwner,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountUserStaking extends string
        ? WritableAccount<TAccountUserStaking>
        : TAccountUserStaking,
      TAccountStaking extends string
        ? WritableAccount<TAccountStaking>
        : TAccountStaking,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountLmTokenMint extends string
        ? WritableAccount<TAccountLmTokenMint>
        : TAccountLmTokenMint,
      TAccountGovernanceTokenMint extends string
        ? WritableAccount<TAccountGovernanceTokenMint>
        : TAccountGovernanceTokenMint,
      TAccountGovernanceRealm extends string
        ? ReadonlyAccount<TAccountGovernanceRealm>
        : TAccountGovernanceRealm,
      TAccountGovernanceRealmConfig extends string
        ? ReadonlyAccount<TAccountGovernanceRealmConfig>
        : TAccountGovernanceRealmConfig,
      TAccountGovernanceGoverningTokenHolding extends string
        ? WritableAccount<TAccountGovernanceGoverningTokenHolding>
        : TAccountGovernanceGoverningTokenHolding,
      TAccountGovernanceGoverningTokenOwnerRecord extends string
        ? WritableAccount<TAccountGovernanceGoverningTokenOwnerRecord>
        : TAccountGovernanceGoverningTokenOwnerRecord,
      TAccountGovernanceProgram extends string
        ? ReadonlyAccount<TAccountGovernanceProgram>
        : TAccountGovernanceProgram,
      TAccountAdrenaProgram extends string
        ? ReadonlyAccount<TAccountAdrenaProgram>
        : TAccountAdrenaProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type FinalizeLockedStakeInstructionData = {
  discriminator: ReadonlyUint8Array;
  lockedStakeId: bigint;
  earlyExit: boolean;
};

export type FinalizeLockedStakeInstructionDataArgs = {
  lockedStakeId: number | bigint;
  earlyExit: boolean;
};

export function getFinalizeLockedStakeInstructionDataEncoder(): Encoder<FinalizeLockedStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['lockedStakeId', getU64Encoder()],
      ['earlyExit', getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: FINALIZE_LOCKED_STAKE_DISCRIMINATOR,
    })
  );
}

export function getFinalizeLockedStakeInstructionDataDecoder(): Decoder<FinalizeLockedStakeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['lockedStakeId', getU64Decoder()],
    ['earlyExit', getBooleanDecoder()],
  ]);
}

export function getFinalizeLockedStakeInstructionDataCodec(): Codec<
  FinalizeLockedStakeInstructionDataArgs,
  FinalizeLockedStakeInstructionData
> {
  return combineCodec(
    getFinalizeLockedStakeInstructionDataEncoder(),
    getFinalizeLockedStakeInstructionDataDecoder()
  );
}

export type FinalizeLockedStakeInput<
  TAccountCaller extends string = string,
  TAccountOwner extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountUserStaking extends string = string,
  TAccountStaking extends string = string,
  TAccountCortex extends string = string,
  TAccountLmTokenMint extends string = string,
  TAccountGovernanceTokenMint extends string = string,
  TAccountGovernanceRealm extends string = string,
  TAccountGovernanceRealmConfig extends string = string,
  TAccountGovernanceGoverningTokenHolding extends string = string,
  TAccountGovernanceGoverningTokenOwnerRecord extends string = string,
  TAccountGovernanceProgram extends string = string,
  TAccountAdrenaProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** #1 */
  caller: TransactionSigner<TAccountCaller>;
  /** #2 */
  owner: Address<TAccountOwner>;
  /** #3 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #4 */
  userStaking: Address<TAccountUserStaking>;
  /** #5 */
  staking: Address<TAccountStaking>;
  /** #6 */
  cortex: Address<TAccountCortex>;
  /** #7 */
  lmTokenMint: Address<TAccountLmTokenMint>;
  /** #8 */
  governanceTokenMint: Address<TAccountGovernanceTokenMint>;
  /**
   * #9
   * A realm represent one project within the governance program
   */
  governanceRealm: Address<TAccountGovernanceRealm>;
  /** #10 */
  governanceRealmConfig: Address<TAccountGovernanceRealmConfig>;
  /**
   * #11
   * Token account owned by governance program holding user's locked tokens
   */
  governanceGoverningTokenHolding: Address<TAccountGovernanceGoverningTokenHolding>;
  /**
   * #12
   * Account owned by governance storing user information
   */
  governanceGoverningTokenOwnerRecord: Address<TAccountGovernanceGoverningTokenOwnerRecord>;
  /** #13 */
  governanceProgram: Address<TAccountGovernanceProgram>;
  /** #14 */
  adrenaProgram: Address<TAccountAdrenaProgram>;
  /** #15 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #16 */
  tokenProgram?: Address<TAccountTokenProgram>;
  lockedStakeId: FinalizeLockedStakeInstructionDataArgs['lockedStakeId'];
  earlyExit: FinalizeLockedStakeInstructionDataArgs['earlyExit'];
};

export function getFinalizeLockedStakeInstruction<
  TAccountCaller extends string,
  TAccountOwner extends string,
  TAccountTransferAuthority extends string,
  TAccountUserStaking extends string,
  TAccountStaking extends string,
  TAccountCortex extends string,
  TAccountLmTokenMint extends string,
  TAccountGovernanceTokenMint extends string,
  TAccountGovernanceRealm extends string,
  TAccountGovernanceRealmConfig extends string,
  TAccountGovernanceGoverningTokenHolding extends string,
  TAccountGovernanceGoverningTokenOwnerRecord extends string,
  TAccountGovernanceProgram extends string,
  TAccountAdrenaProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: FinalizeLockedStakeInput<
    TAccountCaller,
    TAccountOwner,
    TAccountTransferAuthority,
    TAccountUserStaking,
    TAccountStaking,
    TAccountCortex,
    TAccountLmTokenMint,
    TAccountGovernanceTokenMint,
    TAccountGovernanceRealm,
    TAccountGovernanceRealmConfig,
    TAccountGovernanceGoverningTokenHolding,
    TAccountGovernanceGoverningTokenOwnerRecord,
    TAccountGovernanceProgram,
    TAccountAdrenaProgram,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): FinalizeLockedStakeInstruction<
  TProgramAddress,
  TAccountCaller,
  TAccountOwner,
  TAccountTransferAuthority,
  TAccountUserStaking,
  TAccountStaking,
  TAccountCortex,
  TAccountLmTokenMint,
  TAccountGovernanceTokenMint,
  TAccountGovernanceRealm,
  TAccountGovernanceRealmConfig,
  TAccountGovernanceGoverningTokenHolding,
  TAccountGovernanceGoverningTokenOwnerRecord,
  TAccountGovernanceProgram,
  TAccountAdrenaProgram,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    caller: { value: input.caller ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    userStaking: { value: input.userStaking ?? null, isWritable: true },
    staking: { value: input.staking ?? null, isWritable: true },
    cortex: { value: input.cortex ?? null, isWritable: true },
    lmTokenMint: { value: input.lmTokenMint ?? null, isWritable: true },
    governanceTokenMint: {
      value: input.governanceTokenMint ?? null,
      isWritable: true,
    },
    governanceRealm: {
      value: input.governanceRealm ?? null,
      isWritable: false,
    },
    governanceRealmConfig: {
      value: input.governanceRealmConfig ?? null,
      isWritable: false,
    },
    governanceGoverningTokenHolding: {
      value: input.governanceGoverningTokenHolding ?? null,
      isWritable: true,
    },
    governanceGoverningTokenOwnerRecord: {
      value: input.governanceGoverningTokenOwnerRecord ?? null,
      isWritable: true,
    },
    governanceProgram: {
      value: input.governanceProgram ?? null,
      isWritable: false,
    },
    adrenaProgram: { value: input.adrenaProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.caller),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.userStaking),
      getAccountMeta(accounts.staking),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.lmTokenMint),
      getAccountMeta(accounts.governanceTokenMint),
      getAccountMeta(accounts.governanceRealm),
      getAccountMeta(accounts.governanceRealmConfig),
      getAccountMeta(accounts.governanceGoverningTokenHolding),
      getAccountMeta(accounts.governanceGoverningTokenOwnerRecord),
      getAccountMeta(accounts.governanceProgram),
      getAccountMeta(accounts.adrenaProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getFinalizeLockedStakeInstructionDataEncoder().encode(
      args as FinalizeLockedStakeInstructionDataArgs
    ),
  } as FinalizeLockedStakeInstruction<
    TProgramAddress,
    TAccountCaller,
    TAccountOwner,
    TAccountTransferAuthority,
    TAccountUserStaking,
    TAccountStaking,
    TAccountCortex,
    TAccountLmTokenMint,
    TAccountGovernanceTokenMint,
    TAccountGovernanceRealm,
    TAccountGovernanceRealmConfig,
    TAccountGovernanceGoverningTokenHolding,
    TAccountGovernanceGoverningTokenOwnerRecord,
    TAccountGovernanceProgram,
    TAccountAdrenaProgram,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedFinalizeLockedStakeInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    caller: TAccountMetas[0];
    /** #2 */
    owner: TAccountMetas[1];
    /** #3 */
    transferAuthority: TAccountMetas[2];
    /** #4 */
    userStaking: TAccountMetas[3];
    /** #5 */
    staking: TAccountMetas[4];
    /** #6 */
    cortex: TAccountMetas[5];
    /** #7 */
    lmTokenMint: TAccountMetas[6];
    /** #8 */
    governanceTokenMint: TAccountMetas[7];
    /**
     * #9
     * A realm represent one project within the governance program
     */

    governanceRealm: TAccountMetas[8];
    /** #10 */
    governanceRealmConfig: TAccountMetas[9];
    /**
     * #11
     * Token account owned by governance program holding user's locked tokens
     */

    governanceGoverningTokenHolding: TAccountMetas[10];
    /**
     * #12
     * Account owned by governance storing user information
     */

    governanceGoverningTokenOwnerRecord: TAccountMetas[11];
    /** #13 */
    governanceProgram: TAccountMetas[12];
    /** #14 */
    adrenaProgram: TAccountMetas[13];
    /** #15 */
    systemProgram: TAccountMetas[14];
    /** #16 */
    tokenProgram: TAccountMetas[15];
  };
  data: FinalizeLockedStakeInstructionData;
};

export function parseFinalizeLockedStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedFinalizeLockedStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      caller: getNextAccount(),
      owner: getNextAccount(),
      transferAuthority: getNextAccount(),
      userStaking: getNextAccount(),
      staking: getNextAccount(),
      cortex: getNextAccount(),
      lmTokenMint: getNextAccount(),
      governanceTokenMint: getNextAccount(),
      governanceRealm: getNextAccount(),
      governanceRealmConfig: getNextAccount(),
      governanceGoverningTokenHolding: getNextAccount(),
      governanceGoverningTokenOwnerRecord: getNextAccount(),
      governanceProgram: getNextAccount(),
      adrenaProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getFinalizeLockedStakeInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
