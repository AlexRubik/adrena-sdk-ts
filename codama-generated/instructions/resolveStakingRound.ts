/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const RESOLVE_STAKING_ROUND_DISCRIMINATOR = new Uint8Array([
  47, 151, 59, 12, 121, 175, 248, 250,
]);

export function getResolveStakingRoundDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RESOLVE_STAKING_ROUND_DISCRIMINATOR
  );
}

export type ResolveStakingRoundInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountCaller extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountStakingStakedTokenVault extends
    | string
    | IAccountMeta<string> = string,
  TAccountStakingRewardTokenVault extends
    | string
    | IAccountMeta<string> = string,
  TAccountStakingLmRewardTokenVault extends
    | string
    | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountStaking extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountLmTokenTreasury extends string | IAccountMeta<string> = string,
  TAccountFeeRedistributionMint extends string | IAccountMeta<string> = string,
  TAccountAdrenaProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountCaller extends string
        ? WritableSignerAccount<TAccountCaller> &
            IAccountSignerMeta<TAccountCaller>
        : TAccountCaller,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountStakingStakedTokenVault extends string
        ? WritableAccount<TAccountStakingStakedTokenVault>
        : TAccountStakingStakedTokenVault,
      TAccountStakingRewardTokenVault extends string
        ? WritableAccount<TAccountStakingRewardTokenVault>
        : TAccountStakingRewardTokenVault,
      TAccountStakingLmRewardTokenVault extends string
        ? WritableAccount<TAccountStakingLmRewardTokenVault>
        : TAccountStakingLmRewardTokenVault,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountStaking extends string
        ? WritableAccount<TAccountStaking>
        : TAccountStaking,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountLmTokenTreasury extends string
        ? WritableAccount<TAccountLmTokenTreasury>
        : TAccountLmTokenTreasury,
      TAccountFeeRedistributionMint extends string
        ? ReadonlyAccount<TAccountFeeRedistributionMint>
        : TAccountFeeRedistributionMint,
      TAccountAdrenaProgram extends string
        ? ReadonlyAccount<TAccountAdrenaProgram>
        : TAccountAdrenaProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ResolveStakingRoundInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ResolveStakingRoundInstructionDataArgs = {};

export function getResolveStakingRoundInstructionDataEncoder(): Encoder<ResolveStakingRoundInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: RESOLVE_STAKING_ROUND_DISCRIMINATOR,
    })
  );
}

export function getResolveStakingRoundInstructionDataDecoder(): Decoder<ResolveStakingRoundInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getResolveStakingRoundInstructionDataCodec(): Codec<
  ResolveStakingRoundInstructionDataArgs,
  ResolveStakingRoundInstructionData
> {
  return combineCodec(
    getResolveStakingRoundInstructionDataEncoder(),
    getResolveStakingRoundInstructionDataDecoder()
  );
}

export type ResolveStakingRoundInput<
  TAccountCaller extends string = string,
  TAccountPayer extends string = string,
  TAccountStakingStakedTokenVault extends string = string,
  TAccountStakingRewardTokenVault extends string = string,
  TAccountStakingLmRewardTokenVault extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountStaking extends string = string,
  TAccountCortex extends string = string,
  TAccountLmTokenTreasury extends string = string,
  TAccountFeeRedistributionMint extends string = string,
  TAccountAdrenaProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** #1 */
  caller: TransactionSigner<TAccountCaller>;
  /** #2 */
  payer: TransactionSigner<TAccountPayer>;
  /** #3 */
  stakingStakedTokenVault: Address<TAccountStakingStakedTokenVault>;
  /** #4 */
  stakingRewardTokenVault: Address<TAccountStakingRewardTokenVault>;
  /** #5 */
  stakingLmRewardTokenVault: Address<TAccountStakingLmRewardTokenVault>;
  /** #6 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #7 */
  staking: Address<TAccountStaking>;
  /** #8 */
  cortex: Address<TAccountCortex>;
  /** #9 */
  lmTokenTreasury: Address<TAccountLmTokenTreasury>;
  /** #10 */
  feeRedistributionMint: Address<TAccountFeeRedistributionMint>;
  /** #11 */
  adrenaProgram: Address<TAccountAdrenaProgram>;
  /** #12 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #13 */
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getResolveStakingRoundInstruction<
  TAccountCaller extends string,
  TAccountPayer extends string,
  TAccountStakingStakedTokenVault extends string,
  TAccountStakingRewardTokenVault extends string,
  TAccountStakingLmRewardTokenVault extends string,
  TAccountTransferAuthority extends string,
  TAccountStaking extends string,
  TAccountCortex extends string,
  TAccountLmTokenTreasury extends string,
  TAccountFeeRedistributionMint extends string,
  TAccountAdrenaProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: ResolveStakingRoundInput<
    TAccountCaller,
    TAccountPayer,
    TAccountStakingStakedTokenVault,
    TAccountStakingRewardTokenVault,
    TAccountStakingLmRewardTokenVault,
    TAccountTransferAuthority,
    TAccountStaking,
    TAccountCortex,
    TAccountLmTokenTreasury,
    TAccountFeeRedistributionMint,
    TAccountAdrenaProgram,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ResolveStakingRoundInstruction<
  TProgramAddress,
  TAccountCaller,
  TAccountPayer,
  TAccountStakingStakedTokenVault,
  TAccountStakingRewardTokenVault,
  TAccountStakingLmRewardTokenVault,
  TAccountTransferAuthority,
  TAccountStaking,
  TAccountCortex,
  TAccountLmTokenTreasury,
  TAccountFeeRedistributionMint,
  TAccountAdrenaProgram,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    caller: { value: input.caller ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    stakingStakedTokenVault: {
      value: input.stakingStakedTokenVault ?? null,
      isWritable: true,
    },
    stakingRewardTokenVault: {
      value: input.stakingRewardTokenVault ?? null,
      isWritable: true,
    },
    stakingLmRewardTokenVault: {
      value: input.stakingLmRewardTokenVault ?? null,
      isWritable: true,
    },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    staking: { value: input.staking ?? null, isWritable: true },
    cortex: { value: input.cortex ?? null, isWritable: true },
    lmTokenTreasury: { value: input.lmTokenTreasury ?? null, isWritable: true },
    feeRedistributionMint: {
      value: input.feeRedistributionMint ?? null,
      isWritable: false,
    },
    adrenaProgram: { value: input.adrenaProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.caller),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.stakingStakedTokenVault),
      getAccountMeta(accounts.stakingRewardTokenVault),
      getAccountMeta(accounts.stakingLmRewardTokenVault),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.staking),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.lmTokenTreasury),
      getAccountMeta(accounts.feeRedistributionMint),
      getAccountMeta(accounts.adrenaProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getResolveStakingRoundInstructionDataEncoder().encode({}),
  } as ResolveStakingRoundInstruction<
    TProgramAddress,
    TAccountCaller,
    TAccountPayer,
    TAccountStakingStakedTokenVault,
    TAccountStakingRewardTokenVault,
    TAccountStakingLmRewardTokenVault,
    TAccountTransferAuthority,
    TAccountStaking,
    TAccountCortex,
    TAccountLmTokenTreasury,
    TAccountFeeRedistributionMint,
    TAccountAdrenaProgram,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedResolveStakingRoundInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    caller: TAccountMetas[0];
    /** #2 */
    payer: TAccountMetas[1];
    /** #3 */
    stakingStakedTokenVault: TAccountMetas[2];
    /** #4 */
    stakingRewardTokenVault: TAccountMetas[3];
    /** #5 */
    stakingLmRewardTokenVault: TAccountMetas[4];
    /** #6 */
    transferAuthority: TAccountMetas[5];
    /** #7 */
    staking: TAccountMetas[6];
    /** #8 */
    cortex: TAccountMetas[7];
    /** #9 */
    lmTokenTreasury: TAccountMetas[8];
    /** #10 */
    feeRedistributionMint: TAccountMetas[9];
    /** #11 */
    adrenaProgram: TAccountMetas[10];
    /** #12 */
    systemProgram: TAccountMetas[11];
    /** #13 */
    tokenProgram: TAccountMetas[12];
  };
  data: ResolveStakingRoundInstructionData;
};

export function parseResolveStakingRoundInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedResolveStakingRoundInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      caller: getNextAccount(),
      payer: getNextAccount(),
      stakingStakedTokenVault: getNextAccount(),
      stakingRewardTokenVault: getNextAccount(),
      stakingLmRewardTokenVault: getNextAccount(),
      transferAuthority: getNextAccount(),
      staking: getNextAccount(),
      cortex: getNextAccount(),
      lmTokenTreasury: getNextAccount(),
      feeRedistributionMint: getNextAccount(),
      adrenaProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getResolveStakingRoundInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
