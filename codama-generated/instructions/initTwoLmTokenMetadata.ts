/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INIT_TWO_LM_TOKEN_METADATA_DISCRIMINATOR = new Uint8Array([
  252, 186, 161, 12, 196, 147, 180, 131,
]);

export function getInitTwoLmTokenMetadataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_TWO_LM_TOKEN_METADATA_DISCRIMINATOR
  );
}

export type InitTwoLmTokenMetadataInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountLmTokenMint extends string | IAccountMeta<string> = string,
  TAccountLmTokenMintMetadata extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountMplTokenMetadataProgram extends
    | string
    | IAccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountLmTokenMint extends string
        ? WritableAccount<TAccountLmTokenMint>
        : TAccountLmTokenMint,
      TAccountLmTokenMintMetadata extends string
        ? WritableAccount<TAccountLmTokenMintMetadata>
        : TAccountLmTokenMintMetadata,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountMplTokenMetadataProgram extends string
        ? ReadonlyAccount<TAccountMplTokenMetadataProgram>
        : TAccountMplTokenMetadataProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type InitTwoLmTokenMetadataInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitTwoLmTokenMetadataInstructionDataArgs = {};

export function getInitTwoLmTokenMetadataInstructionDataEncoder(): Encoder<InitTwoLmTokenMetadataInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: INIT_TWO_LM_TOKEN_METADATA_DISCRIMINATOR,
    })
  );
}

export function getInitTwoLmTokenMetadataInstructionDataDecoder(): Decoder<InitTwoLmTokenMetadataInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitTwoLmTokenMetadataInstructionDataCodec(): Codec<
  InitTwoLmTokenMetadataInstructionDataArgs,
  InitTwoLmTokenMetadataInstructionData
> {
  return combineCodec(
    getInitTwoLmTokenMetadataInstructionDataEncoder(),
    getInitTwoLmTokenMetadataInstructionDataDecoder()
  );
}

export type InitTwoLmTokenMetadataInput<
  TAccountAdmin extends string = string,
  TAccountPayer extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountCortex extends string = string,
  TAccountLmTokenMint extends string = string,
  TAccountLmTokenMintMetadata extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMplTokenMetadataProgram extends string = string,
  TAccountRent extends string = string,
> = {
  /** #1 */
  admin: TransactionSigner<TAccountAdmin>;
  /** #2 */
  payer: TransactionSigner<TAccountPayer>;
  /** #3 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #5 */
  cortex: Address<TAccountCortex>;
  /** #6 */
  lmTokenMint: Address<TAccountLmTokenMint>;
  /** #7 */
  lmTokenMintMetadata: Address<TAccountLmTokenMintMetadata>;
  /** #8 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #9 */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** #10 */
  mplTokenMetadataProgram?: Address<TAccountMplTokenMetadataProgram>;
  /** #11 */
  rent?: Address<TAccountRent>;
};

export function getInitTwoLmTokenMetadataInstruction<
  TAccountAdmin extends string,
  TAccountPayer extends string,
  TAccountTransferAuthority extends string,
  TAccountCortex extends string,
  TAccountLmTokenMint extends string,
  TAccountLmTokenMintMetadata extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountMplTokenMetadataProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: InitTwoLmTokenMetadataInput<
    TAccountAdmin,
    TAccountPayer,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountLmTokenMint,
    TAccountLmTokenMintMetadata,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountMplTokenMetadataProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): InitTwoLmTokenMetadataInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountPayer,
  TAccountTransferAuthority,
  TAccountCortex,
  TAccountLmTokenMint,
  TAccountLmTokenMintMetadata,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountMplTokenMetadataProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    cortex: { value: input.cortex ?? null, isWritable: true },
    lmTokenMint: { value: input.lmTokenMint ?? null, isWritable: true },
    lmTokenMintMetadata: {
      value: input.lmTokenMintMetadata ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    mplTokenMetadataProgram: {
      value: input.mplTokenMetadataProgram ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.mplTokenMetadataProgram.value) {
    accounts.mplTokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.lmTokenMint),
      getAccountMeta(accounts.lmTokenMintMetadata),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.mplTokenMetadataProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getInitTwoLmTokenMetadataInstructionDataEncoder().encode({}),
  } as InitTwoLmTokenMetadataInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountPayer,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountLmTokenMint,
    TAccountLmTokenMintMetadata,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountMplTokenMetadataProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedInitTwoLmTokenMetadataInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    admin: TAccountMetas[0];
    /** #2 */
    payer: TAccountMetas[1];
    /** #3 */
    transferAuthority: TAccountMetas[2];
    /** #5 */
    cortex: TAccountMetas[3];
    /** #6 */
    lmTokenMint: TAccountMetas[4];
    /** #7 */
    lmTokenMintMetadata: TAccountMetas[5];
    /** #8 */
    systemProgram: TAccountMetas[6];
    /** #9 */
    tokenProgram: TAccountMetas[7];
    /** #10 */
    mplTokenMetadataProgram: TAccountMetas[8];
    /** #11 */
    rent: TAccountMetas[9];
  };
  data: InitTwoLmTokenMetadataInstructionData;
};

export function parseInitTwoLmTokenMetadataInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitTwoLmTokenMetadataInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      payer: getNextAccount(),
      transferAuthority: getNextAccount(),
      cortex: getNextAccount(),
      lmTokenMint: getNextAccount(),
      lmTokenMintMetadata: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      mplTokenMetadataProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getInitTwoLmTokenMetadataInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
