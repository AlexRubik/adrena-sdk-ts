/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const GENESIS_STAKE_PATCH_DISCRIMINATOR = new Uint8Array([
  225, 99, 136, 6, 108, 202, 18, 97,
]);

export function getGenesisStakePatchDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GENESIS_STAKE_PATCH_DISCRIMINATOR
  );
}

export type GenesisStakePatchInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountCaller extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountRewardTokenAccount extends string | IAccountMeta<string> = string,
  TAccountLmTokenAccount extends string | IAccountMeta<string> = string,
  TAccountStakingRewardTokenVault extends
    | string
    | IAccountMeta<string> = string,
  TAccountStakingLmRewardTokenVault extends
    | string
    | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountUserStaking extends string | IAccountMeta<string> = string,
  TAccountStaking extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountGenesisLock extends string | IAccountMeta<string> = string,
  TAccountLmTokenMint extends string | IAccountMeta<string> = string,
  TAccountFeeRedistributionMint extends string | IAccountMeta<string> = string,
  TAccountAdrenaProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountCaller extends string
        ? ReadonlySignerAccount<TAccountCaller> &
            IAccountSignerMeta<TAccountCaller>
        : TAccountCaller,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountRewardTokenAccount extends string
        ? WritableAccount<TAccountRewardTokenAccount>
        : TAccountRewardTokenAccount,
      TAccountLmTokenAccount extends string
        ? WritableAccount<TAccountLmTokenAccount>
        : TAccountLmTokenAccount,
      TAccountStakingRewardTokenVault extends string
        ? WritableAccount<TAccountStakingRewardTokenVault>
        : TAccountStakingRewardTokenVault,
      TAccountStakingLmRewardTokenVault extends string
        ? WritableAccount<TAccountStakingLmRewardTokenVault>
        : TAccountStakingLmRewardTokenVault,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountUserStaking extends string
        ? WritableAccount<TAccountUserStaking>
        : TAccountUserStaking,
      TAccountStaking extends string
        ? WritableAccount<TAccountStaking>
        : TAccountStaking,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountGenesisLock extends string
        ? ReadonlyAccount<TAccountGenesisLock>
        : TAccountGenesisLock,
      TAccountLmTokenMint extends string
        ? WritableAccount<TAccountLmTokenMint>
        : TAccountLmTokenMint,
      TAccountFeeRedistributionMint extends string
        ? ReadonlyAccount<TAccountFeeRedistributionMint>
        : TAccountFeeRedistributionMint,
      TAccountAdrenaProgram extends string
        ? ReadonlyAccount<TAccountAdrenaProgram>
        : TAccountAdrenaProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type GenesisStakePatchInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type GenesisStakePatchInstructionDataArgs = {};

export function getGenesisStakePatchInstructionDataEncoder(): Encoder<GenesisStakePatchInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: GENESIS_STAKE_PATCH_DISCRIMINATOR })
  );
}

export function getGenesisStakePatchInstructionDataDecoder(): Decoder<GenesisStakePatchInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getGenesisStakePatchInstructionDataCodec(): Codec<
  GenesisStakePatchInstructionDataArgs,
  GenesisStakePatchInstructionData
> {
  return combineCodec(
    getGenesisStakePatchInstructionDataEncoder(),
    getGenesisStakePatchInstructionDataDecoder()
  );
}

export type GenesisStakePatchInput<
  TAccountCaller extends string = string,
  TAccountPayer extends string = string,
  TAccountOwner extends string = string,
  TAccountRewardTokenAccount extends string = string,
  TAccountLmTokenAccount extends string = string,
  TAccountStakingRewardTokenVault extends string = string,
  TAccountStakingLmRewardTokenVault extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountUserStaking extends string = string,
  TAccountStaking extends string = string,
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountGenesisLock extends string = string,
  TAccountLmTokenMint extends string = string,
  TAccountFeeRedistributionMint extends string = string,
  TAccountAdrenaProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** #1 */
  caller: TransactionSigner<TAccountCaller>;
  /** #2 */
  payer: TransactionSigner<TAccountPayer>;
  /** #3 */
  owner: Address<TAccountOwner>;
  /** #4 */
  rewardTokenAccount: Address<TAccountRewardTokenAccount>;
  /** #5 */
  lmTokenAccount: Address<TAccountLmTokenAccount>;
  /** #6 */
  stakingRewardTokenVault: Address<TAccountStakingRewardTokenVault>;
  /** #7 */
  stakingLmRewardTokenVault: Address<TAccountStakingLmRewardTokenVault>;
  /** #8 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #9 */
  userStaking: Address<TAccountUserStaking>;
  /** #10 */
  staking: Address<TAccountStaking>;
  /** #11 */
  cortex: Address<TAccountCortex>;
  /** #12 */
  pool: Address<TAccountPool>;
  /** #13 */
  genesisLock: Address<TAccountGenesisLock>;
  /** #14 */
  lmTokenMint: Address<TAccountLmTokenMint>;
  /** #15 */
  feeRedistributionMint: Address<TAccountFeeRedistributionMint>;
  /** #16 */
  adrenaProgram: Address<TAccountAdrenaProgram>;
  /** #17 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #18 */
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getGenesisStakePatchInstruction<
  TAccountCaller extends string,
  TAccountPayer extends string,
  TAccountOwner extends string,
  TAccountRewardTokenAccount extends string,
  TAccountLmTokenAccount extends string,
  TAccountStakingRewardTokenVault extends string,
  TAccountStakingLmRewardTokenVault extends string,
  TAccountTransferAuthority extends string,
  TAccountUserStaking extends string,
  TAccountStaking extends string,
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountGenesisLock extends string,
  TAccountLmTokenMint extends string,
  TAccountFeeRedistributionMint extends string,
  TAccountAdrenaProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: GenesisStakePatchInput<
    TAccountCaller,
    TAccountPayer,
    TAccountOwner,
    TAccountRewardTokenAccount,
    TAccountLmTokenAccount,
    TAccountStakingRewardTokenVault,
    TAccountStakingLmRewardTokenVault,
    TAccountTransferAuthority,
    TAccountUserStaking,
    TAccountStaking,
    TAccountCortex,
    TAccountPool,
    TAccountGenesisLock,
    TAccountLmTokenMint,
    TAccountFeeRedistributionMint,
    TAccountAdrenaProgram,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): GenesisStakePatchInstruction<
  TProgramAddress,
  TAccountCaller,
  TAccountPayer,
  TAccountOwner,
  TAccountRewardTokenAccount,
  TAccountLmTokenAccount,
  TAccountStakingRewardTokenVault,
  TAccountStakingLmRewardTokenVault,
  TAccountTransferAuthority,
  TAccountUserStaking,
  TAccountStaking,
  TAccountCortex,
  TAccountPool,
  TAccountGenesisLock,
  TAccountLmTokenMint,
  TAccountFeeRedistributionMint,
  TAccountAdrenaProgram,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    caller: { value: input.caller ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    rewardTokenAccount: {
      value: input.rewardTokenAccount ?? null,
      isWritable: true,
    },
    lmTokenAccount: { value: input.lmTokenAccount ?? null, isWritable: true },
    stakingRewardTokenVault: {
      value: input.stakingRewardTokenVault ?? null,
      isWritable: true,
    },
    stakingLmRewardTokenVault: {
      value: input.stakingLmRewardTokenVault ?? null,
      isWritable: true,
    },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    userStaking: { value: input.userStaking ?? null, isWritable: true },
    staking: { value: input.staking ?? null, isWritable: true },
    cortex: { value: input.cortex ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: false },
    genesisLock: { value: input.genesisLock ?? null, isWritable: false },
    lmTokenMint: { value: input.lmTokenMint ?? null, isWritable: true },
    feeRedistributionMint: {
      value: input.feeRedistributionMint ?? null,
      isWritable: false,
    },
    adrenaProgram: { value: input.adrenaProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.caller),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.rewardTokenAccount),
      getAccountMeta(accounts.lmTokenAccount),
      getAccountMeta(accounts.stakingRewardTokenVault),
      getAccountMeta(accounts.stakingLmRewardTokenVault),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.userStaking),
      getAccountMeta(accounts.staking),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.genesisLock),
      getAccountMeta(accounts.lmTokenMint),
      getAccountMeta(accounts.feeRedistributionMint),
      getAccountMeta(accounts.adrenaProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getGenesisStakePatchInstructionDataEncoder().encode({}),
  } as GenesisStakePatchInstruction<
    TProgramAddress,
    TAccountCaller,
    TAccountPayer,
    TAccountOwner,
    TAccountRewardTokenAccount,
    TAccountLmTokenAccount,
    TAccountStakingRewardTokenVault,
    TAccountStakingLmRewardTokenVault,
    TAccountTransferAuthority,
    TAccountUserStaking,
    TAccountStaking,
    TAccountCortex,
    TAccountPool,
    TAccountGenesisLock,
    TAccountLmTokenMint,
    TAccountFeeRedistributionMint,
    TAccountAdrenaProgram,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedGenesisStakePatchInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    caller: TAccountMetas[0];
    /** #2 */
    payer: TAccountMetas[1];
    /** #3 */
    owner: TAccountMetas[2];
    /** #4 */
    rewardTokenAccount: TAccountMetas[3];
    /** #5 */
    lmTokenAccount: TAccountMetas[4];
    /** #6 */
    stakingRewardTokenVault: TAccountMetas[5];
    /** #7 */
    stakingLmRewardTokenVault: TAccountMetas[6];
    /** #8 */
    transferAuthority: TAccountMetas[7];
    /** #9 */
    userStaking: TAccountMetas[8];
    /** #10 */
    staking: TAccountMetas[9];
    /** #11 */
    cortex: TAccountMetas[10];
    /** #12 */
    pool: TAccountMetas[11];
    /** #13 */
    genesisLock: TAccountMetas[12];
    /** #14 */
    lmTokenMint: TAccountMetas[13];
    /** #15 */
    feeRedistributionMint: TAccountMetas[14];
    /** #16 */
    adrenaProgram: TAccountMetas[15];
    /** #17 */
    systemProgram: TAccountMetas[16];
    /** #18 */
    tokenProgram: TAccountMetas[17];
  };
  data: GenesisStakePatchInstructionData;
};

export function parseGenesisStakePatchInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedGenesisStakePatchInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 18) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      caller: getNextAccount(),
      payer: getNextAccount(),
      owner: getNextAccount(),
      rewardTokenAccount: getNextAccount(),
      lmTokenAccount: getNextAccount(),
      stakingRewardTokenVault: getNextAccount(),
      stakingLmRewardTokenVault: getNextAccount(),
      transferAuthority: getNextAccount(),
      userStaking: getNextAccount(),
      staking: getNextAccount(),
      cortex: getNextAccount(),
      pool: getNextAccount(),
      genesisLock: getNextAccount(),
      lmTokenMint: getNextAccount(),
      feeRedistributionMint: getNextAccount(),
      adrenaProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getGenesisStakePatchInstructionDataDecoder().decode(instruction.data),
  };
}
