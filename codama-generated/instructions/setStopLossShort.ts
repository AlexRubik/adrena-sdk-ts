/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_STOP_LOSS_SHORT_DISCRIMINATOR = new Uint8Array([
  91, 5, 98, 54, 75, 233, 9, 236,
]);

export function getSetStopLossShortDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_STOP_LOSS_SHORT_DISCRIMINATOR
  );
}

export type SetStopLossShortInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountPosition extends string | IAccountMeta<string> = string,
  TAccountCustody extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountCortex extends string
        ? ReadonlyAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountCustody extends string
        ? ReadonlyAccount<TAccountCustody>
        : TAccountCustody,
      ...TRemainingAccounts,
    ]
  >;

export type SetStopLossShortInstructionData = {
  discriminator: ReadonlyUint8Array;
  stopLossLimitPrice: bigint;
  closePositionPrice: Option<bigint>;
};

export type SetStopLossShortInstructionDataArgs = {
  stopLossLimitPrice: number | bigint;
  closePositionPrice: OptionOrNullable<number | bigint>;
};

export function getSetStopLossShortInstructionDataEncoder(): Encoder<SetStopLossShortInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['stopLossLimitPrice', getU64Encoder()],
      ['closePositionPrice', getOptionEncoder(getU64Encoder())],
    ]),
    (value) => ({ ...value, discriminator: SET_STOP_LOSS_SHORT_DISCRIMINATOR })
  );
}

export function getSetStopLossShortInstructionDataDecoder(): Decoder<SetStopLossShortInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['stopLossLimitPrice', getU64Decoder()],
    ['closePositionPrice', getOptionDecoder(getU64Decoder())],
  ]);
}

export function getSetStopLossShortInstructionDataCodec(): Codec<
  SetStopLossShortInstructionDataArgs,
  SetStopLossShortInstructionData
> {
  return combineCodec(
    getSetStopLossShortInstructionDataEncoder(),
    getSetStopLossShortInstructionDataDecoder()
  );
}

export type SetStopLossShortInput<
  TAccountOwner extends string = string,
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountPosition extends string = string,
  TAccountCustody extends string = string,
> = {
  /** #1 */
  owner: TransactionSigner<TAccountOwner>;
  /** #2 */
  cortex: Address<TAccountCortex>;
  /** #3 */
  pool: Address<TAccountPool>;
  /** #4 */
  position: Address<TAccountPosition>;
  /** #5 */
  custody: Address<TAccountCustody>;
  stopLossLimitPrice: SetStopLossShortInstructionDataArgs['stopLossLimitPrice'];
  closePositionPrice: SetStopLossShortInstructionDataArgs['closePositionPrice'];
};

export function getSetStopLossShortInstruction<
  TAccountOwner extends string,
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountPosition extends string,
  TAccountCustody extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: SetStopLossShortInput<
    TAccountOwner,
    TAccountCortex,
    TAccountPool,
    TAccountPosition,
    TAccountCustody
  >,
  config?: { programAddress?: TProgramAddress }
): SetStopLossShortInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountCortex,
  TAccountPool,
  TAccountPosition,
  TAccountCustody
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    cortex: { value: input.cortex ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: false },
    position: { value: input.position ?? null, isWritable: true },
    custody: { value: input.custody ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.custody),
    ],
    programAddress,
    data: getSetStopLossShortInstructionDataEncoder().encode(
      args as SetStopLossShortInstructionDataArgs
    ),
  } as SetStopLossShortInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountCortex,
    TAccountPool,
    TAccountPosition,
    TAccountCustody
  >;

  return instruction;
}

export type ParsedSetStopLossShortInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    owner: TAccountMetas[0];
    /** #2 */
    cortex: TAccountMetas[1];
    /** #3 */
    pool: TAccountMetas[2];
    /** #4 */
    position: TAccountMetas[3];
    /** #5 */
    custody: TAccountMetas[4];
  };
  data: SetStopLossShortInstructionData;
};

export function parseSetStopLossShortInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetStopLossShortInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      cortex: getNextAccount(),
      pool: getNextAccount(),
      position: getNextAccount(),
      custody: getNextAccount(),
    },
    data: getSetStopLossShortInstructionDataDecoder().decode(instruction.data),
  };
}
