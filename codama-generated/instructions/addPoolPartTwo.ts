/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getReservedSpotsDecoder,
  getReservedSpotsEncoder,
  type ReservedSpots,
  type ReservedSpotsArgs,
} from '../types';

export const ADD_POOL_PART_TWO_DISCRIMINATOR = new Uint8Array([
  48, 241, 100, 82, 218, 78, 185, 173,
]);

export function getAddPoolPartTwoDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_POOL_PART_TWO_DISCRIMINATOR
  );
}

export type AddPoolPartTwoInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountLpTokenMint extends string | IAccountMeta<string> = string,
  TAccountGenesisLock extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountLpTokenMint extends string
        ? ReadonlyAccount<TAccountLpTokenMint>
        : TAccountLpTokenMint,
      TAccountGenesisLock extends string
        ? WritableAccount<TAccountGenesisLock>
        : TAccountGenesisLock,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type AddPoolPartTwoInstructionData = {
  discriminator: ReadonlyUint8Array;
  genesisLockCampaignDuration: bigint;
  genesisReservedGrantDuration: bigint;
  genesisLockCampaignStartDate: bigint;
  reservedSpots: ReservedSpots;
};

export type AddPoolPartTwoInstructionDataArgs = {
  genesisLockCampaignDuration: number | bigint;
  genesisReservedGrantDuration: number | bigint;
  genesisLockCampaignStartDate: number | bigint;
  reservedSpots: ReservedSpotsArgs;
};

export function getAddPoolPartTwoInstructionDataEncoder(): Encoder<AddPoolPartTwoInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['genesisLockCampaignDuration', getI64Encoder()],
      ['genesisReservedGrantDuration', getI64Encoder()],
      ['genesisLockCampaignStartDate', getI64Encoder()],
      ['reservedSpots', getReservedSpotsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: ADD_POOL_PART_TWO_DISCRIMINATOR })
  );
}

export function getAddPoolPartTwoInstructionDataDecoder(): Decoder<AddPoolPartTwoInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['genesisLockCampaignDuration', getI64Decoder()],
    ['genesisReservedGrantDuration', getI64Decoder()],
    ['genesisLockCampaignStartDate', getI64Decoder()],
    ['reservedSpots', getReservedSpotsDecoder()],
  ]);
}

export function getAddPoolPartTwoInstructionDataCodec(): Codec<
  AddPoolPartTwoInstructionDataArgs,
  AddPoolPartTwoInstructionData
> {
  return combineCodec(
    getAddPoolPartTwoInstructionDataEncoder(),
    getAddPoolPartTwoInstructionDataDecoder()
  );
}

export type AddPoolPartTwoInput<
  TAccountAdmin extends string = string,
  TAccountPayer extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountLpTokenMint extends string = string,
  TAccountGenesisLock extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  /** #1 */
  admin: TransactionSigner<TAccountAdmin>;
  /** #2 */
  payer: TransactionSigner<TAccountPayer>;
  /** #3 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #4 */
  cortex: Address<TAccountCortex>;
  /** #5 */
  pool: Address<TAccountPool>;
  /** #6 */
  lpTokenMint: Address<TAccountLpTokenMint>;
  /** #7 */
  genesisLock: Address<TAccountGenesisLock>;
  /** #8 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #9 */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** #10 */
  rent?: Address<TAccountRent>;
  genesisLockCampaignDuration: AddPoolPartTwoInstructionDataArgs['genesisLockCampaignDuration'];
  genesisReservedGrantDuration: AddPoolPartTwoInstructionDataArgs['genesisReservedGrantDuration'];
  genesisLockCampaignStartDate: AddPoolPartTwoInstructionDataArgs['genesisLockCampaignStartDate'];
  reservedSpots: AddPoolPartTwoInstructionDataArgs['reservedSpots'];
};

export function getAddPoolPartTwoInstruction<
  TAccountAdmin extends string,
  TAccountPayer extends string,
  TAccountTransferAuthority extends string,
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountLpTokenMint extends string,
  TAccountGenesisLock extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: AddPoolPartTwoInput<
    TAccountAdmin,
    TAccountPayer,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountPool,
    TAccountLpTokenMint,
    TAccountGenesisLock,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): AddPoolPartTwoInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountPayer,
  TAccountTransferAuthority,
  TAccountCortex,
  TAccountPool,
  TAccountLpTokenMint,
  TAccountGenesisLock,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    cortex: { value: input.cortex ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    lpTokenMint: { value: input.lpTokenMint ?? null, isWritable: false },
    genesisLock: { value: input.genesisLock ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.lpTokenMint),
      getAccountMeta(accounts.genesisLock),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getAddPoolPartTwoInstructionDataEncoder().encode(
      args as AddPoolPartTwoInstructionDataArgs
    ),
  } as AddPoolPartTwoInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountPayer,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountPool,
    TAccountLpTokenMint,
    TAccountGenesisLock,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedAddPoolPartTwoInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    admin: TAccountMetas[0];
    /** #2 */
    payer: TAccountMetas[1];
    /** #3 */
    transferAuthority: TAccountMetas[2];
    /** #4 */
    cortex: TAccountMetas[3];
    /** #5 */
    pool: TAccountMetas[4];
    /** #6 */
    lpTokenMint: TAccountMetas[5];
    /** #7 */
    genesisLock: TAccountMetas[6];
    /** #8 */
    systemProgram: TAccountMetas[7];
    /** #9 */
    tokenProgram: TAccountMetas[8];
    /** #10 */
    rent: TAccountMetas[9];
  };
  data: AddPoolPartTwoInstructionData;
};

export function parseAddPoolPartTwoInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAddPoolPartTwoInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      payer: getNextAccount(),
      transferAuthority: getNextAccount(),
      cortex: getNextAccount(),
      pool: getNextAccount(),
      lpTokenMint: getNextAccount(),
      genesisLock: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getAddPoolPartTwoInstructionDataDecoder().decode(instruction.data),
  };
}
