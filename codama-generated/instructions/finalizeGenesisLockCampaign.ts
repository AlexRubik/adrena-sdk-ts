/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const FINALIZE_GENESIS_LOCK_CAMPAIGN_DISCRIMINATOR = new Uint8Array([
  53, 212, 137, 237, 78, 217, 150, 203,
]);

export function getFinalizeGenesisLockCampaignDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    FINALIZE_GENESIS_LOCK_CAMPAIGN_DISCRIMINATOR
  );
}

export type FinalizeGenesisLockCampaignInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountCaller extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountGenesisLock extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAdrenaProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountCaller extends string
        ? WritableSignerAccount<TAccountCaller> &
            IAccountSignerMeta<TAccountCaller>
        : TAccountCaller,
      TAccountCortex extends string
        ? ReadonlyAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountGenesisLock extends string
        ? WritableAccount<TAccountGenesisLock>
        : TAccountGenesisLock,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAdrenaProgram extends string
        ? ReadonlyAccount<TAccountAdrenaProgram>
        : TAccountAdrenaProgram,
      ...TRemainingAccounts,
    ]
  >;

export type FinalizeGenesisLockCampaignInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type FinalizeGenesisLockCampaignInstructionDataArgs = {};

export function getFinalizeGenesisLockCampaignInstructionDataEncoder(): Encoder<FinalizeGenesisLockCampaignInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: FINALIZE_GENESIS_LOCK_CAMPAIGN_DISCRIMINATOR,
    })
  );
}

export function getFinalizeGenesisLockCampaignInstructionDataDecoder(): Decoder<FinalizeGenesisLockCampaignInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getFinalizeGenesisLockCampaignInstructionDataCodec(): Codec<
  FinalizeGenesisLockCampaignInstructionDataArgs,
  FinalizeGenesisLockCampaignInstructionData
> {
  return combineCodec(
    getFinalizeGenesisLockCampaignInstructionDataEncoder(),
    getFinalizeGenesisLockCampaignInstructionDataDecoder()
  );
}

export type FinalizeGenesisLockCampaignInput<
  TAccountCaller extends string = string,
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountGenesisLock extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAdrenaProgram extends string = string,
> = {
  /** #1 */
  caller: TransactionSigner<TAccountCaller>;
  /** #2 */
  cortex: Address<TAccountCortex>;
  /** #3 */
  pool: Address<TAccountPool>;
  /** #4 */
  genesisLock: Address<TAccountGenesisLock>;
  /** #5 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #6 */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** #7 */
  adrenaProgram: Address<TAccountAdrenaProgram>;
};

export function getFinalizeGenesisLockCampaignInstruction<
  TAccountCaller extends string,
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountGenesisLock extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAdrenaProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: FinalizeGenesisLockCampaignInput<
    TAccountCaller,
    TAccountCortex,
    TAccountPool,
    TAccountGenesisLock,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAdrenaProgram
  >,
  config?: { programAddress?: TProgramAddress }
): FinalizeGenesisLockCampaignInstruction<
  TProgramAddress,
  TAccountCaller,
  TAccountCortex,
  TAccountPool,
  TAccountGenesisLock,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAdrenaProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    caller: { value: input.caller ?? null, isWritable: true },
    cortex: { value: input.cortex ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    genesisLock: { value: input.genesisLock ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    adrenaProgram: { value: input.adrenaProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.caller),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.genesisLock),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.adrenaProgram),
    ],
    programAddress,
    data: getFinalizeGenesisLockCampaignInstructionDataEncoder().encode({}),
  } as FinalizeGenesisLockCampaignInstruction<
    TProgramAddress,
    TAccountCaller,
    TAccountCortex,
    TAccountPool,
    TAccountGenesisLock,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAdrenaProgram
  >;

  return instruction;
}

export type ParsedFinalizeGenesisLockCampaignInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    caller: TAccountMetas[0];
    /** #2 */
    cortex: TAccountMetas[1];
    /** #3 */
    pool: TAccountMetas[2];
    /** #4 */
    genesisLock: TAccountMetas[3];
    /** #5 */
    systemProgram: TAccountMetas[4];
    /** #6 */
    tokenProgram: TAccountMetas[5];
    /** #7 */
    adrenaProgram: TAccountMetas[6];
  };
  data: FinalizeGenesisLockCampaignInstructionData;
};

export function parseFinalizeGenesisLockCampaignInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedFinalizeGenesisLockCampaignInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      caller: getNextAccount(),
      cortex: getNextAccount(),
      pool: getNextAccount(),
      genesisLock: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      adrenaProgram: getNextAccount(),
    },
    data: getFinalizeGenesisLockCampaignInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
