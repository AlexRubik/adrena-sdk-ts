/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INIT_LIMIT_ORDER_BOOK_DISCRIMINATOR = new Uint8Array([
  179, 172, 45, 157, 192, 252, 116, 90,
]);

export function getInitLimitOrderBookDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_LIMIT_ORDER_BOOK_DISCRIMINATOR
  );
}

export type InitLimitOrderBookInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountLimitOrderBook extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountLimitOrderBook extends string
        ? WritableAccount<TAccountLimitOrderBook>
        : TAccountLimitOrderBook,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitLimitOrderBookInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitLimitOrderBookInstructionDataArgs = {};

export function getInitLimitOrderBookInstructionDataEncoder(): Encoder<InitLimitOrderBookInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: INIT_LIMIT_ORDER_BOOK_DISCRIMINATOR,
    })
  );
}

export function getInitLimitOrderBookInstructionDataDecoder(): Decoder<InitLimitOrderBookInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitLimitOrderBookInstructionDataCodec(): Codec<
  InitLimitOrderBookInstructionDataArgs,
  InitLimitOrderBookInstructionData
> {
  return combineCodec(
    getInitLimitOrderBookInstructionDataEncoder(),
    getInitLimitOrderBookInstructionDataDecoder()
  );
}

export type InitLimitOrderBookInput<
  TAccountOwner extends string = string,
  TAccountPool extends string = string,
  TAccountLimitOrderBook extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** #1 */
  owner: TransactionSigner<TAccountOwner>;
  /** #2 */
  pool: Address<TAccountPool>;
  /** #3 */
  limitOrderBook: Address<TAccountLimitOrderBook>;
  /** #4 */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitLimitOrderBookInstruction<
  TAccountOwner extends string,
  TAccountPool extends string,
  TAccountLimitOrderBook extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: InitLimitOrderBookInput<
    TAccountOwner,
    TAccountPool,
    TAccountLimitOrderBook,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitLimitOrderBookInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountPool,
  TAccountLimitOrderBook,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    limitOrderBook: { value: input.limitOrderBook ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.limitOrderBook),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitLimitOrderBookInstructionDataEncoder().encode({}),
  } as InitLimitOrderBookInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountPool,
    TAccountLimitOrderBook,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitLimitOrderBookInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    owner: TAccountMetas[0];
    /** #2 */
    pool: TAccountMetas[1];
    /** #3 */
    limitOrderBook: TAccountMetas[2];
    /** #4 */
    systemProgram: TAccountMetas[3];
  };
  data: InitLimitOrderBookInstructionData;
};

export function parseInitLimitOrderBookInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitLimitOrderBookInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      pool: getNextAccount(),
      limitOrderBook: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitLimitOrderBookInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
