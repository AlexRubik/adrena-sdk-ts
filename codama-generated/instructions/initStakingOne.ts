/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INIT_STAKING_ONE_DISCRIMINATOR = new Uint8Array([
  120, 240, 246, 179, 166, 109, 128, 211,
]);

export function getInitStakingOneDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_STAKING_ONE_DISCRIMINATOR
  );
}

export type InitStakingOneInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountStaking extends string | IAccountMeta<string> = string,
  TAccountLmTokenMint extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountStakingStakedTokenVault extends
    | string
    | IAccountMeta<string> = string,
  TAccountFeeRedistributionMint extends string | IAccountMeta<string> = string,
  TAccountStakingStakedTokenMint extends string | IAccountMeta<string> = string,
  TAccountAdrenaProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountStaking extends string
        ? WritableAccount<TAccountStaking>
        : TAccountStaking,
      TAccountLmTokenMint extends string
        ? WritableAccount<TAccountLmTokenMint>
        : TAccountLmTokenMint,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountStakingStakedTokenVault extends string
        ? WritableAccount<TAccountStakingStakedTokenVault>
        : TAccountStakingStakedTokenVault,
      TAccountFeeRedistributionMint extends string
        ? ReadonlyAccount<TAccountFeeRedistributionMint>
        : TAccountFeeRedistributionMint,
      TAccountStakingStakedTokenMint extends string
        ? ReadonlyAccount<TAccountStakingStakedTokenMint>
        : TAccountStakingStakedTokenMint,
      TAccountAdrenaProgram extends string
        ? ReadonlyAccount<TAccountAdrenaProgram>
        : TAccountAdrenaProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type InitStakingOneInstructionData = {
  discriminator: ReadonlyUint8Array;
  stakingType: number;
};

export type InitStakingOneInstructionDataArgs = { stakingType: number };

export function getInitStakingOneInstructionDataEncoder(): Encoder<InitStakingOneInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['stakingType', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INIT_STAKING_ONE_DISCRIMINATOR })
  );
}

export function getInitStakingOneInstructionDataDecoder(): Decoder<InitStakingOneInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['stakingType', getU8Decoder()],
  ]);
}

export function getInitStakingOneInstructionDataCodec(): Codec<
  InitStakingOneInstructionDataArgs,
  InitStakingOneInstructionData
> {
  return combineCodec(
    getInitStakingOneInstructionDataEncoder(),
    getInitStakingOneInstructionDataDecoder()
  );
}

export type InitStakingOneInput<
  TAccountAdmin extends string = string,
  TAccountPayer extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountStaking extends string = string,
  TAccountLmTokenMint extends string = string,
  TAccountCortex extends string = string,
  TAccountStakingStakedTokenVault extends string = string,
  TAccountFeeRedistributionMint extends string = string,
  TAccountStakingStakedTokenMint extends string = string,
  TAccountAdrenaProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  /** #1 */
  admin: TransactionSigner<TAccountAdmin>;
  /** #2 */
  payer: TransactionSigner<TAccountPayer>;
  /** #3 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #4 */
  staking: Address<TAccountStaking>;
  /** #5 */
  lmTokenMint: Address<TAccountLmTokenMint>;
  /** #6 */
  cortex: Address<TAccountCortex>;
  /** #7 */
  stakingStakedTokenVault: Address<TAccountStakingStakedTokenVault>;
  /** #8 */
  feeRedistributionMint: Address<TAccountFeeRedistributionMint>;
  /** #9 */
  stakingStakedTokenMint: Address<TAccountStakingStakedTokenMint>;
  /** #10 */
  adrenaProgram: Address<TAccountAdrenaProgram>;
  /** #11 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #12 */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** #13 */
  rent?: Address<TAccountRent>;
  stakingType: InitStakingOneInstructionDataArgs['stakingType'];
};

export function getInitStakingOneInstruction<
  TAccountAdmin extends string,
  TAccountPayer extends string,
  TAccountTransferAuthority extends string,
  TAccountStaking extends string,
  TAccountLmTokenMint extends string,
  TAccountCortex extends string,
  TAccountStakingStakedTokenVault extends string,
  TAccountFeeRedistributionMint extends string,
  TAccountStakingStakedTokenMint extends string,
  TAccountAdrenaProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: InitStakingOneInput<
    TAccountAdmin,
    TAccountPayer,
    TAccountTransferAuthority,
    TAccountStaking,
    TAccountLmTokenMint,
    TAccountCortex,
    TAccountStakingStakedTokenVault,
    TAccountFeeRedistributionMint,
    TAccountStakingStakedTokenMint,
    TAccountAdrenaProgram,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): InitStakingOneInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountPayer,
  TAccountTransferAuthority,
  TAccountStaking,
  TAccountLmTokenMint,
  TAccountCortex,
  TAccountStakingStakedTokenVault,
  TAccountFeeRedistributionMint,
  TAccountStakingStakedTokenMint,
  TAccountAdrenaProgram,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    staking: { value: input.staking ?? null, isWritable: true },
    lmTokenMint: { value: input.lmTokenMint ?? null, isWritable: true },
    cortex: { value: input.cortex ?? null, isWritable: true },
    stakingStakedTokenVault: {
      value: input.stakingStakedTokenVault ?? null,
      isWritable: true,
    },
    feeRedistributionMint: {
      value: input.feeRedistributionMint ?? null,
      isWritable: false,
    },
    stakingStakedTokenMint: {
      value: input.stakingStakedTokenMint ?? null,
      isWritable: false,
    },
    adrenaProgram: { value: input.adrenaProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.staking),
      getAccountMeta(accounts.lmTokenMint),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.stakingStakedTokenVault),
      getAccountMeta(accounts.feeRedistributionMint),
      getAccountMeta(accounts.stakingStakedTokenMint),
      getAccountMeta(accounts.adrenaProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getInitStakingOneInstructionDataEncoder().encode(
      args as InitStakingOneInstructionDataArgs
    ),
  } as InitStakingOneInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountPayer,
    TAccountTransferAuthority,
    TAccountStaking,
    TAccountLmTokenMint,
    TAccountCortex,
    TAccountStakingStakedTokenVault,
    TAccountFeeRedistributionMint,
    TAccountStakingStakedTokenMint,
    TAccountAdrenaProgram,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedInitStakingOneInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    admin: TAccountMetas[0];
    /** #2 */
    payer: TAccountMetas[1];
    /** #3 */
    transferAuthority: TAccountMetas[2];
    /** #4 */
    staking: TAccountMetas[3];
    /** #5 */
    lmTokenMint: TAccountMetas[4];
    /** #6 */
    cortex: TAccountMetas[5];
    /** #7 */
    stakingStakedTokenVault: TAccountMetas[6];
    /** #8 */
    feeRedistributionMint: TAccountMetas[7];
    /** #9 */
    stakingStakedTokenMint: TAccountMetas[8];
    /** #10 */
    adrenaProgram: TAccountMetas[9];
    /** #11 */
    systemProgram: TAccountMetas[10];
    /** #12 */
    tokenProgram: TAccountMetas[11];
    /** #13 */
    rent: TAccountMetas[12];
  };
  data: InitStakingOneInstructionData;
};

export function parseInitStakingOneInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitStakingOneInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      payer: getNextAccount(),
      transferAuthority: getNextAccount(),
      staking: getNextAccount(),
      lmTokenMint: getNextAccount(),
      cortex: getNextAccount(),
      stakingStakedTokenVault: getNextAccount(),
      feeRedistributionMint: getNextAccount(),
      stakingStakedTokenMint: getNextAccount(),
      adrenaProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getInitStakingOneInstructionDataDecoder().decode(instruction.data),
  };
}
