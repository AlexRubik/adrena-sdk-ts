/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_VEST_DELEGATE_DISCRIMINATOR = new Uint8Array([
  13, 252, 155, 199, 243, 105, 252, 251,
]);

export function getSetVestDelegateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_VEST_DELEGATE_DISCRIMINATOR
  );
}

export type SetVestDelegateInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountCaller extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountVest extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountCaller extends string
        ? ReadonlySignerAccount<TAccountCaller> &
            IAccountSignerMeta<TAccountCaller>
        : TAccountCaller,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountPayer extends string
        ? WritableAccount<TAccountPayer>
        : TAccountPayer,
      TAccountCortex extends string
        ? ReadonlyAccount<TAccountCortex>
        : TAccountCortex,
      TAccountVest extends string
        ? WritableAccount<TAccountVest>
        : TAccountVest,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SetVestDelegateInstructionData = {
  discriminator: ReadonlyUint8Array;
  delegate: Option<Address>;
};

export type SetVestDelegateInstructionDataArgs = {
  delegate: OptionOrNullable<Address>;
};

export function getSetVestDelegateInstructionDataEncoder(): Encoder<SetVestDelegateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['delegate', getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, discriminator: SET_VEST_DELEGATE_DISCRIMINATOR })
  );
}

export function getSetVestDelegateInstructionDataDecoder(): Decoder<SetVestDelegateInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['delegate', getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getSetVestDelegateInstructionDataCodec(): Codec<
  SetVestDelegateInstructionDataArgs,
  SetVestDelegateInstructionData
> {
  return combineCodec(
    getSetVestDelegateInstructionDataEncoder(),
    getSetVestDelegateInstructionDataDecoder()
  );
}

export type SetVestDelegateInput<
  TAccountCaller extends string = string,
  TAccountOwner extends string = string,
  TAccountPayer extends string = string,
  TAccountCortex extends string = string,
  TAccountVest extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** #1 */
  caller: TransactionSigner<TAccountCaller>;
  /** #2 */
  owner: Address<TAccountOwner>;
  /** #3 */
  payer: Address<TAccountPayer>;
  /** #4 */
  cortex: Address<TAccountCortex>;
  /** #5 */
  vest: Address<TAccountVest>;
  /** #6 */
  systemProgram?: Address<TAccountSystemProgram>;
  delegate: SetVestDelegateInstructionDataArgs['delegate'];
};

export function getSetVestDelegateInstruction<
  TAccountCaller extends string,
  TAccountOwner extends string,
  TAccountPayer extends string,
  TAccountCortex extends string,
  TAccountVest extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: SetVestDelegateInput<
    TAccountCaller,
    TAccountOwner,
    TAccountPayer,
    TAccountCortex,
    TAccountVest,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SetVestDelegateInstruction<
  TProgramAddress,
  TAccountCaller,
  TAccountOwner,
  TAccountPayer,
  TAccountCortex,
  TAccountVest,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    caller: { value: input.caller ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    cortex: { value: input.cortex ?? null, isWritable: false },
    vest: { value: input.vest ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.caller),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.vest),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSetVestDelegateInstructionDataEncoder().encode(
      args as SetVestDelegateInstructionDataArgs
    ),
  } as SetVestDelegateInstruction<
    TProgramAddress,
    TAccountCaller,
    TAccountOwner,
    TAccountPayer,
    TAccountCortex,
    TAccountVest,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedSetVestDelegateInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    caller: TAccountMetas[0];
    /** #2 */
    owner: TAccountMetas[1];
    /** #3 */
    payer: TAccountMetas[2];
    /** #4 */
    cortex: TAccountMetas[3];
    /** #5 */
    vest: TAccountMetas[4];
    /** #6 */
    systemProgram: TAccountMetas[5];
  };
  data: SetVestDelegateInstructionData;
};

export function parseSetVestDelegateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetVestDelegateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      caller: getNextAccount(),
      owner: getNextAccount(),
      payer: getNextAccount(),
      cortex: getNextAccount(),
      vest: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSetVestDelegateInstructionDataDecoder().decode(instruction.data),
  };
}
