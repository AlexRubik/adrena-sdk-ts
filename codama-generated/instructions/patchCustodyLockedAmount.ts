/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const PATCH_CUSTODY_LOCKED_AMOUNT_DISCRIMINATOR = new Uint8Array([
  56, 103, 252, 61, 180, 140, 203, 100,
]);

export function getPatchCustodyLockedAmountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PATCH_CUSTODY_LOCKED_AMOUNT_DISCRIMINATOR
  );
}

export type PatchCustodyLockedAmountInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountUsdcCustody extends string | IAccountMeta<string> = string,
  TAccountBonkCustody extends string | IAccountMeta<string> = string,
  TAccountWbtcCustody extends string | IAccountMeta<string> = string,
  TAccountJitoCustody extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountCortex extends string
        ? ReadonlyAccount<TAccountCortex>
        : TAccountCortex,
      TAccountUsdcCustody extends string
        ? WritableAccount<TAccountUsdcCustody>
        : TAccountUsdcCustody,
      TAccountBonkCustody extends string
        ? WritableAccount<TAccountBonkCustody>
        : TAccountBonkCustody,
      TAccountWbtcCustody extends string
        ? WritableAccount<TAccountWbtcCustody>
        : TAccountWbtcCustody,
      TAccountJitoCustody extends string
        ? WritableAccount<TAccountJitoCustody>
        : TAccountJitoCustody,
      ...TRemainingAccounts,
    ]
  >;

export type PatchCustodyLockedAmountInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type PatchCustodyLockedAmountInstructionDataArgs = {};

export function getPatchCustodyLockedAmountInstructionDataEncoder(): Encoder<PatchCustodyLockedAmountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: PATCH_CUSTODY_LOCKED_AMOUNT_DISCRIMINATOR,
    })
  );
}

export function getPatchCustodyLockedAmountInstructionDataDecoder(): Decoder<PatchCustodyLockedAmountInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getPatchCustodyLockedAmountInstructionDataCodec(): Codec<
  PatchCustodyLockedAmountInstructionDataArgs,
  PatchCustodyLockedAmountInstructionData
> {
  return combineCodec(
    getPatchCustodyLockedAmountInstructionDataEncoder(),
    getPatchCustodyLockedAmountInstructionDataDecoder()
  );
}

export type PatchCustodyLockedAmountInput<
  TAccountAdmin extends string = string,
  TAccountPool extends string = string,
  TAccountCortex extends string = string,
  TAccountUsdcCustody extends string = string,
  TAccountBonkCustody extends string = string,
  TAccountWbtcCustody extends string = string,
  TAccountJitoCustody extends string = string,
> = {
  /** #1 */
  admin: TransactionSigner<TAccountAdmin>;
  /** #2 */
  pool: Address<TAccountPool>;
  /** #3 */
  cortex: Address<TAccountCortex>;
  /** #4 */
  usdcCustody: Address<TAccountUsdcCustody>;
  /** #5 */
  bonkCustody: Address<TAccountBonkCustody>;
  /** #6 */
  wbtcCustody: Address<TAccountWbtcCustody>;
  /** #7 */
  jitoCustody: Address<TAccountJitoCustody>;
};

export function getPatchCustodyLockedAmountInstruction<
  TAccountAdmin extends string,
  TAccountPool extends string,
  TAccountCortex extends string,
  TAccountUsdcCustody extends string,
  TAccountBonkCustody extends string,
  TAccountWbtcCustody extends string,
  TAccountJitoCustody extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: PatchCustodyLockedAmountInput<
    TAccountAdmin,
    TAccountPool,
    TAccountCortex,
    TAccountUsdcCustody,
    TAccountBonkCustody,
    TAccountWbtcCustody,
    TAccountJitoCustody
  >,
  config?: { programAddress?: TProgramAddress }
): PatchCustodyLockedAmountInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountPool,
  TAccountCortex,
  TAccountUsdcCustody,
  TAccountBonkCustody,
  TAccountWbtcCustody,
  TAccountJitoCustody
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: false },
    cortex: { value: input.cortex ?? null, isWritable: false },
    usdcCustody: { value: input.usdcCustody ?? null, isWritable: true },
    bonkCustody: { value: input.bonkCustody ?? null, isWritable: true },
    wbtcCustody: { value: input.wbtcCustody ?? null, isWritable: true },
    jitoCustody: { value: input.jitoCustody ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.usdcCustody),
      getAccountMeta(accounts.bonkCustody),
      getAccountMeta(accounts.wbtcCustody),
      getAccountMeta(accounts.jitoCustody),
    ],
    programAddress,
    data: getPatchCustodyLockedAmountInstructionDataEncoder().encode({}),
  } as PatchCustodyLockedAmountInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountPool,
    TAccountCortex,
    TAccountUsdcCustody,
    TAccountBonkCustody,
    TAccountWbtcCustody,
    TAccountJitoCustody
  >;

  return instruction;
}

export type ParsedPatchCustodyLockedAmountInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    admin: TAccountMetas[0];
    /** #2 */
    pool: TAccountMetas[1];
    /** #3 */
    cortex: TAccountMetas[2];
    /** #4 */
    usdcCustody: TAccountMetas[3];
    /** #5 */
    bonkCustody: TAccountMetas[4];
    /** #6 */
    wbtcCustody: TAccountMetas[5];
    /** #7 */
    jitoCustody: TAccountMetas[6];
  };
  data: PatchCustodyLockedAmountInstructionData;
};

export function parsePatchCustodyLockedAmountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedPatchCustodyLockedAmountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      pool: getNextAccount(),
      cortex: getNextAccount(),
      usdcCustody: getNextAccount(),
      bonkCustody: getNextAccount(),
      wbtcCustody: getNextAccount(),
      jitoCustody: getNextAccount(),
    },
    data: getPatchCustodyLockedAmountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
