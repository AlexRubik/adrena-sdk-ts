/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADD_GENESIS_LIQUIDITY_DISCRIMINATOR = new Uint8Array([
  37, 173, 172, 33, 28, 127, 13, 69,
]);

export function getAddGenesisLiquidityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_GENESIS_LIQUIDITY_DISCRIMINATOR
  );
}

export type AddGenesisLiquidityInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountFundingAccount extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountLpUserStaking extends string | IAccountMeta<string> = string,
  TAccountLpStaking extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountLpStakingStakedTokenVault extends
    | string
    | IAccountMeta<string> = string,
  TAccountCustody extends string | IAccountMeta<string> = string,
  TAccountCustodyOracle extends string | IAccountMeta<string> = string,
  TAccountCustodyTokenAccount extends string | IAccountMeta<string> = string,
  TAccountLmTokenMint extends string | IAccountMeta<string> = string,
  TAccountLpTokenMint extends string | IAccountMeta<string> = string,
  TAccountGovernanceTokenMint extends string | IAccountMeta<string> = string,
  TAccountGovernanceRealm extends string | IAccountMeta<string> = string,
  TAccountGovernanceRealmConfig extends string | IAccountMeta<string> = string,
  TAccountGovernanceGoverningTokenHolding extends
    | string
    | IAccountMeta<string> = string,
  TAccountGovernanceGoverningTokenOwnerRecord extends
    | string
    | IAccountMeta<string> = string,
  TAccountGovernanceProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAdrenaProgram extends string | IAccountMeta<string> = string,
  TAccountGenesisLock extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountFundingAccount extends string
        ? WritableAccount<TAccountFundingAccount>
        : TAccountFundingAccount,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountLpUserStaking extends string
        ? WritableAccount<TAccountLpUserStaking>
        : TAccountLpUserStaking,
      TAccountLpStaking extends string
        ? WritableAccount<TAccountLpStaking>
        : TAccountLpStaking,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountLpStakingStakedTokenVault extends string
        ? WritableAccount<TAccountLpStakingStakedTokenVault>
        : TAccountLpStakingStakedTokenVault,
      TAccountCustody extends string
        ? WritableAccount<TAccountCustody>
        : TAccountCustody,
      TAccountCustodyOracle extends string
        ? ReadonlyAccount<TAccountCustodyOracle>
        : TAccountCustodyOracle,
      TAccountCustodyTokenAccount extends string
        ? WritableAccount<TAccountCustodyTokenAccount>
        : TAccountCustodyTokenAccount,
      TAccountLmTokenMint extends string
        ? WritableAccount<TAccountLmTokenMint>
        : TAccountLmTokenMint,
      TAccountLpTokenMint extends string
        ? WritableAccount<TAccountLpTokenMint>
        : TAccountLpTokenMint,
      TAccountGovernanceTokenMint extends string
        ? WritableAccount<TAccountGovernanceTokenMint>
        : TAccountGovernanceTokenMint,
      TAccountGovernanceRealm extends string
        ? ReadonlyAccount<TAccountGovernanceRealm>
        : TAccountGovernanceRealm,
      TAccountGovernanceRealmConfig extends string
        ? ReadonlyAccount<TAccountGovernanceRealmConfig>
        : TAccountGovernanceRealmConfig,
      TAccountGovernanceGoverningTokenHolding extends string
        ? WritableAccount<TAccountGovernanceGoverningTokenHolding>
        : TAccountGovernanceGoverningTokenHolding,
      TAccountGovernanceGoverningTokenOwnerRecord extends string
        ? WritableAccount<TAccountGovernanceGoverningTokenOwnerRecord>
        : TAccountGovernanceGoverningTokenOwnerRecord,
      TAccountGovernanceProgram extends string
        ? ReadonlyAccount<TAccountGovernanceProgram>
        : TAccountGovernanceProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAdrenaProgram extends string
        ? ReadonlyAccount<TAccountAdrenaProgram>
        : TAccountAdrenaProgram,
      TAccountGenesisLock extends string
        ? WritableAccount<TAccountGenesisLock>
        : TAccountGenesisLock,
      ...TRemainingAccounts,
    ]
  >;

export type AddGenesisLiquidityInstructionData = {
  discriminator: ReadonlyUint8Array;
  amountIn: bigint;
  minLpAmountOut: bigint;
};

export type AddGenesisLiquidityInstructionDataArgs = {
  amountIn: number | bigint;
  minLpAmountOut: number | bigint;
};

export function getAddGenesisLiquidityInstructionDataEncoder(): Encoder<AddGenesisLiquidityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amountIn', getU64Encoder()],
      ['minLpAmountOut', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: ADD_GENESIS_LIQUIDITY_DISCRIMINATOR,
    })
  );
}

export function getAddGenesisLiquidityInstructionDataDecoder(): Decoder<AddGenesisLiquidityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amountIn', getU64Decoder()],
    ['minLpAmountOut', getU64Decoder()],
  ]);
}

export function getAddGenesisLiquidityInstructionDataCodec(): Codec<
  AddGenesisLiquidityInstructionDataArgs,
  AddGenesisLiquidityInstructionData
> {
  return combineCodec(
    getAddGenesisLiquidityInstructionDataEncoder(),
    getAddGenesisLiquidityInstructionDataDecoder()
  );
}

export type AddGenesisLiquidityInput<
  TAccountOwner extends string = string,
  TAccountFundingAccount extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountLpUserStaking extends string = string,
  TAccountLpStaking extends string = string,
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountLpStakingStakedTokenVault extends string = string,
  TAccountCustody extends string = string,
  TAccountCustodyOracle extends string = string,
  TAccountCustodyTokenAccount extends string = string,
  TAccountLmTokenMint extends string = string,
  TAccountLpTokenMint extends string = string,
  TAccountGovernanceTokenMint extends string = string,
  TAccountGovernanceRealm extends string = string,
  TAccountGovernanceRealmConfig extends string = string,
  TAccountGovernanceGoverningTokenHolding extends string = string,
  TAccountGovernanceGoverningTokenOwnerRecord extends string = string,
  TAccountGovernanceProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAdrenaProgram extends string = string,
  TAccountGenesisLock extends string = string,
> = {
  /** #1 */
  owner: TransactionSigner<TAccountOwner>;
  /** #2 */
  fundingAccount: Address<TAccountFundingAccount>;
  /** #3 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #4 */
  lpUserStaking: Address<TAccountLpUserStaking>;
  /** #5 */
  lpStaking: Address<TAccountLpStaking>;
  /** #6 */
  cortex: Address<TAccountCortex>;
  /** #7 */
  pool: Address<TAccountPool>;
  /** #8 */
  lpStakingStakedTokenVault: Address<TAccountLpStakingStakedTokenVault>;
  /** #9 */
  custody: Address<TAccountCustody>;
  /** #10 */
  custodyOracle: Address<TAccountCustodyOracle>;
  /** #11 */
  custodyTokenAccount: Address<TAccountCustodyTokenAccount>;
  /** #12 */
  lmTokenMint: Address<TAccountLmTokenMint>;
  /** #13 */
  lpTokenMint: Address<TAccountLpTokenMint>;
  /** #14 */
  governanceTokenMint: Address<TAccountGovernanceTokenMint>;
  /**
   * #15
   * A realm represent one project within the governance program
   */
  governanceRealm: Address<TAccountGovernanceRealm>;
  /** #16 */
  governanceRealmConfig: Address<TAccountGovernanceRealmConfig>;
  /**
   * #17
   * Token account owned by governance program holding user's locked tokens
   */
  governanceGoverningTokenHolding: Address<TAccountGovernanceGoverningTokenHolding>;
  /**
   * #18
   * Account owned by governance storing user information
   */
  governanceGoverningTokenOwnerRecord: Address<TAccountGovernanceGoverningTokenOwnerRecord>;
  /** #19 */
  governanceProgram: Address<TAccountGovernanceProgram>;
  /** #20 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #21 */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** #22 */
  adrenaProgram: Address<TAccountAdrenaProgram>;
  /** #23 */
  genesisLock: Address<TAccountGenesisLock>;
  amountIn: AddGenesisLiquidityInstructionDataArgs['amountIn'];
  minLpAmountOut: AddGenesisLiquidityInstructionDataArgs['minLpAmountOut'];
};

export function getAddGenesisLiquidityInstruction<
  TAccountOwner extends string,
  TAccountFundingAccount extends string,
  TAccountTransferAuthority extends string,
  TAccountLpUserStaking extends string,
  TAccountLpStaking extends string,
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountLpStakingStakedTokenVault extends string,
  TAccountCustody extends string,
  TAccountCustodyOracle extends string,
  TAccountCustodyTokenAccount extends string,
  TAccountLmTokenMint extends string,
  TAccountLpTokenMint extends string,
  TAccountGovernanceTokenMint extends string,
  TAccountGovernanceRealm extends string,
  TAccountGovernanceRealmConfig extends string,
  TAccountGovernanceGoverningTokenHolding extends string,
  TAccountGovernanceGoverningTokenOwnerRecord extends string,
  TAccountGovernanceProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAdrenaProgram extends string,
  TAccountGenesisLock extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: AddGenesisLiquidityInput<
    TAccountOwner,
    TAccountFundingAccount,
    TAccountTransferAuthority,
    TAccountLpUserStaking,
    TAccountLpStaking,
    TAccountCortex,
    TAccountPool,
    TAccountLpStakingStakedTokenVault,
    TAccountCustody,
    TAccountCustodyOracle,
    TAccountCustodyTokenAccount,
    TAccountLmTokenMint,
    TAccountLpTokenMint,
    TAccountGovernanceTokenMint,
    TAccountGovernanceRealm,
    TAccountGovernanceRealmConfig,
    TAccountGovernanceGoverningTokenHolding,
    TAccountGovernanceGoverningTokenOwnerRecord,
    TAccountGovernanceProgram,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAdrenaProgram,
    TAccountGenesisLock
  >,
  config?: { programAddress?: TProgramAddress }
): AddGenesisLiquidityInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountFundingAccount,
  TAccountTransferAuthority,
  TAccountLpUserStaking,
  TAccountLpStaking,
  TAccountCortex,
  TAccountPool,
  TAccountLpStakingStakedTokenVault,
  TAccountCustody,
  TAccountCustodyOracle,
  TAccountCustodyTokenAccount,
  TAccountLmTokenMint,
  TAccountLpTokenMint,
  TAccountGovernanceTokenMint,
  TAccountGovernanceRealm,
  TAccountGovernanceRealmConfig,
  TAccountGovernanceGoverningTokenHolding,
  TAccountGovernanceGoverningTokenOwnerRecord,
  TAccountGovernanceProgram,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAdrenaProgram,
  TAccountGenesisLock
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    fundingAccount: { value: input.fundingAccount ?? null, isWritable: true },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    lpUserStaking: { value: input.lpUserStaking ?? null, isWritable: true },
    lpStaking: { value: input.lpStaking ?? null, isWritable: true },
    cortex: { value: input.cortex ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    lpStakingStakedTokenVault: {
      value: input.lpStakingStakedTokenVault ?? null,
      isWritable: true,
    },
    custody: { value: input.custody ?? null, isWritable: true },
    custodyOracle: { value: input.custodyOracle ?? null, isWritable: false },
    custodyTokenAccount: {
      value: input.custodyTokenAccount ?? null,
      isWritable: true,
    },
    lmTokenMint: { value: input.lmTokenMint ?? null, isWritable: true },
    lpTokenMint: { value: input.lpTokenMint ?? null, isWritable: true },
    governanceTokenMint: {
      value: input.governanceTokenMint ?? null,
      isWritable: true,
    },
    governanceRealm: {
      value: input.governanceRealm ?? null,
      isWritable: false,
    },
    governanceRealmConfig: {
      value: input.governanceRealmConfig ?? null,
      isWritable: false,
    },
    governanceGoverningTokenHolding: {
      value: input.governanceGoverningTokenHolding ?? null,
      isWritable: true,
    },
    governanceGoverningTokenOwnerRecord: {
      value: input.governanceGoverningTokenOwnerRecord ?? null,
      isWritable: true,
    },
    governanceProgram: {
      value: input.governanceProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    adrenaProgram: { value: input.adrenaProgram ?? null, isWritable: false },
    genesisLock: { value: input.genesisLock ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.fundingAccount),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.lpUserStaking),
      getAccountMeta(accounts.lpStaking),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.lpStakingStakedTokenVault),
      getAccountMeta(accounts.custody),
      getAccountMeta(accounts.custodyOracle),
      getAccountMeta(accounts.custodyTokenAccount),
      getAccountMeta(accounts.lmTokenMint),
      getAccountMeta(accounts.lpTokenMint),
      getAccountMeta(accounts.governanceTokenMint),
      getAccountMeta(accounts.governanceRealm),
      getAccountMeta(accounts.governanceRealmConfig),
      getAccountMeta(accounts.governanceGoverningTokenHolding),
      getAccountMeta(accounts.governanceGoverningTokenOwnerRecord),
      getAccountMeta(accounts.governanceProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.adrenaProgram),
      getAccountMeta(accounts.genesisLock),
    ],
    programAddress,
    data: getAddGenesisLiquidityInstructionDataEncoder().encode(
      args as AddGenesisLiquidityInstructionDataArgs
    ),
  } as AddGenesisLiquidityInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountFundingAccount,
    TAccountTransferAuthority,
    TAccountLpUserStaking,
    TAccountLpStaking,
    TAccountCortex,
    TAccountPool,
    TAccountLpStakingStakedTokenVault,
    TAccountCustody,
    TAccountCustodyOracle,
    TAccountCustodyTokenAccount,
    TAccountLmTokenMint,
    TAccountLpTokenMint,
    TAccountGovernanceTokenMint,
    TAccountGovernanceRealm,
    TAccountGovernanceRealmConfig,
    TAccountGovernanceGoverningTokenHolding,
    TAccountGovernanceGoverningTokenOwnerRecord,
    TAccountGovernanceProgram,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAdrenaProgram,
    TAccountGenesisLock
  >;

  return instruction;
}

export type ParsedAddGenesisLiquidityInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    owner: TAccountMetas[0];
    /** #2 */
    fundingAccount: TAccountMetas[1];
    /** #3 */
    transferAuthority: TAccountMetas[2];
    /** #4 */
    lpUserStaking: TAccountMetas[3];
    /** #5 */
    lpStaking: TAccountMetas[4];
    /** #6 */
    cortex: TAccountMetas[5];
    /** #7 */
    pool: TAccountMetas[6];
    /** #8 */
    lpStakingStakedTokenVault: TAccountMetas[7];
    /** #9 */
    custody: TAccountMetas[8];
    /** #10 */
    custodyOracle: TAccountMetas[9];
    /** #11 */
    custodyTokenAccount: TAccountMetas[10];
    /** #12 */
    lmTokenMint: TAccountMetas[11];
    /** #13 */
    lpTokenMint: TAccountMetas[12];
    /** #14 */
    governanceTokenMint: TAccountMetas[13];
    /**
     * #15
     * A realm represent one project within the governance program
     */

    governanceRealm: TAccountMetas[14];
    /** #16 */
    governanceRealmConfig: TAccountMetas[15];
    /**
     * #17
     * Token account owned by governance program holding user's locked tokens
     */

    governanceGoverningTokenHolding: TAccountMetas[16];
    /**
     * #18
     * Account owned by governance storing user information
     */

    governanceGoverningTokenOwnerRecord: TAccountMetas[17];
    /** #19 */
    governanceProgram: TAccountMetas[18];
    /** #20 */
    systemProgram: TAccountMetas[19];
    /** #21 */
    tokenProgram: TAccountMetas[20];
    /** #22 */
    adrenaProgram: TAccountMetas[21];
    /** #23 */
    genesisLock: TAccountMetas[22];
  };
  data: AddGenesisLiquidityInstructionData;
};

export function parseAddGenesisLiquidityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAddGenesisLiquidityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 23) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      fundingAccount: getNextAccount(),
      transferAuthority: getNextAccount(),
      lpUserStaking: getNextAccount(),
      lpStaking: getNextAccount(),
      cortex: getNextAccount(),
      pool: getNextAccount(),
      lpStakingStakedTokenVault: getNextAccount(),
      custody: getNextAccount(),
      custodyOracle: getNextAccount(),
      custodyTokenAccount: getNextAccount(),
      lmTokenMint: getNextAccount(),
      lpTokenMint: getNextAccount(),
      governanceTokenMint: getNextAccount(),
      governanceRealm: getNextAccount(),
      governanceRealmConfig: getNextAccount(),
      governanceGoverningTokenHolding: getNextAccount(),
      governanceGoverningTokenOwnerRecord: getNextAccount(),
      governanceProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      adrenaProgram: getNextAccount(),
      genesisLock: getNextAccount(),
    },
    data: getAddGenesisLiquidityInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
