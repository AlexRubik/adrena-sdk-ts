/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getChaosLabsBatchPricesDecoder,
  getChaosLabsBatchPricesEncoder,
  type ChaosLabsBatchPrices,
  type ChaosLabsBatchPricesArgs,
} from '../types';

export const GET_OPEN_POSITION_WITH_SWAP_AMOUNT_AND_FEES_DISCRIMINATOR =
  new Uint8Array([105, 20, 255, 69, 225, 245, 10, 189]);

export function getGetOpenPositionWithSwapAmountAndFeesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GET_OPEN_POSITION_WITH_SWAP_AMOUNT_AND_FEES_DISCRIMINATOR
  );
}

export type GetOpenPositionWithSwapAmountAndFeesInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountReceivingCustody extends string | IAccountMeta<string> = string,
  TAccountOracle extends string | IAccountMeta<string> = string,
  TAccountCollateralCustody extends string | IAccountMeta<string> = string,
  TAccountPrincipalCustody extends string | IAccountMeta<string> = string,
  TAccountAdrenaProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountCortex extends string
        ? ReadonlyAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountReceivingCustody extends string
        ? ReadonlyAccount<TAccountReceivingCustody>
        : TAccountReceivingCustody,
      TAccountOracle extends string
        ? WritableAccount<TAccountOracle>
        : TAccountOracle,
      TAccountCollateralCustody extends string
        ? ReadonlyAccount<TAccountCollateralCustody>
        : TAccountCollateralCustody,
      TAccountPrincipalCustody extends string
        ? ReadonlyAccount<TAccountPrincipalCustody>
        : TAccountPrincipalCustody,
      TAccountAdrenaProgram extends string
        ? ReadonlyAccount<TAccountAdrenaProgram>
        : TAccountAdrenaProgram,
      ...TRemainingAccounts,
    ]
  >;

export type GetOpenPositionWithSwapAmountAndFeesInstructionData = {
  discriminator: ReadonlyUint8Array;
  collateralAmount: bigint;
  leverage: number;
  side: number;
  oraclePrices: Option<ChaosLabsBatchPrices>;
};

export type GetOpenPositionWithSwapAmountAndFeesInstructionDataArgs = {
  collateralAmount: number | bigint;
  leverage: number;
  side: number;
  oraclePrices: OptionOrNullable<ChaosLabsBatchPricesArgs>;
};

export function getGetOpenPositionWithSwapAmountAndFeesInstructionDataEncoder(): Encoder<GetOpenPositionWithSwapAmountAndFeesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['collateralAmount', getU64Encoder()],
      ['leverage', getU32Encoder()],
      ['side', getU8Encoder()],
      ['oraclePrices', getOptionEncoder(getChaosLabsBatchPricesEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: GET_OPEN_POSITION_WITH_SWAP_AMOUNT_AND_FEES_DISCRIMINATOR,
    })
  );
}

export function getGetOpenPositionWithSwapAmountAndFeesInstructionDataDecoder(): Decoder<GetOpenPositionWithSwapAmountAndFeesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['collateralAmount', getU64Decoder()],
    ['leverage', getU32Decoder()],
    ['side', getU8Decoder()],
    ['oraclePrices', getOptionDecoder(getChaosLabsBatchPricesDecoder())],
  ]);
}

export function getGetOpenPositionWithSwapAmountAndFeesInstructionDataCodec(): Codec<
  GetOpenPositionWithSwapAmountAndFeesInstructionDataArgs,
  GetOpenPositionWithSwapAmountAndFeesInstructionData
> {
  return combineCodec(
    getGetOpenPositionWithSwapAmountAndFeesInstructionDataEncoder(),
    getGetOpenPositionWithSwapAmountAndFeesInstructionDataDecoder()
  );
}

export type GetOpenPositionWithSwapAmountAndFeesInput<
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountReceivingCustody extends string = string,
  TAccountOracle extends string = string,
  TAccountCollateralCustody extends string = string,
  TAccountPrincipalCustody extends string = string,
  TAccountAdrenaProgram extends string = string,
> = {
  /** #1 */
  cortex: Address<TAccountCortex>;
  /** #2 */
  pool: Address<TAccountPool>;
  /** #3 */
  receivingCustody: Address<TAccountReceivingCustody>;
  /** #4 */
  oracle: Address<TAccountOracle>;
  /** #5 */
  collateralCustody: Address<TAccountCollateralCustody>;
  /** #6 */
  principalCustody: Address<TAccountPrincipalCustody>;
  /** #7 */
  adrenaProgram: Address<TAccountAdrenaProgram>;
  collateralAmount: GetOpenPositionWithSwapAmountAndFeesInstructionDataArgs['collateralAmount'];
  leverage: GetOpenPositionWithSwapAmountAndFeesInstructionDataArgs['leverage'];
  side: GetOpenPositionWithSwapAmountAndFeesInstructionDataArgs['side'];
  oraclePrices: GetOpenPositionWithSwapAmountAndFeesInstructionDataArgs['oraclePrices'];
};

export function getGetOpenPositionWithSwapAmountAndFeesInstruction<
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountReceivingCustody extends string,
  TAccountOracle extends string,
  TAccountCollateralCustody extends string,
  TAccountPrincipalCustody extends string,
  TAccountAdrenaProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: GetOpenPositionWithSwapAmountAndFeesInput<
    TAccountCortex,
    TAccountPool,
    TAccountReceivingCustody,
    TAccountOracle,
    TAccountCollateralCustody,
    TAccountPrincipalCustody,
    TAccountAdrenaProgram
  >,
  config?: { programAddress?: TProgramAddress }
): GetOpenPositionWithSwapAmountAndFeesInstruction<
  TProgramAddress,
  TAccountCortex,
  TAccountPool,
  TAccountReceivingCustody,
  TAccountOracle,
  TAccountCollateralCustody,
  TAccountPrincipalCustody,
  TAccountAdrenaProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    cortex: { value: input.cortex ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: false },
    receivingCustody: {
      value: input.receivingCustody ?? null,
      isWritable: false,
    },
    oracle: { value: input.oracle ?? null, isWritable: true },
    collateralCustody: {
      value: input.collateralCustody ?? null,
      isWritable: false,
    },
    principalCustody: {
      value: input.principalCustody ?? null,
      isWritable: false,
    },
    adrenaProgram: { value: input.adrenaProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.receivingCustody),
      getAccountMeta(accounts.oracle),
      getAccountMeta(accounts.collateralCustody),
      getAccountMeta(accounts.principalCustody),
      getAccountMeta(accounts.adrenaProgram),
    ],
    programAddress,
    data: getGetOpenPositionWithSwapAmountAndFeesInstructionDataEncoder().encode(
      args as GetOpenPositionWithSwapAmountAndFeesInstructionDataArgs
    ),
  } as GetOpenPositionWithSwapAmountAndFeesInstruction<
    TProgramAddress,
    TAccountCortex,
    TAccountPool,
    TAccountReceivingCustody,
    TAccountOracle,
    TAccountCollateralCustody,
    TAccountPrincipalCustody,
    TAccountAdrenaProgram
  >;

  return instruction;
}

export type ParsedGetOpenPositionWithSwapAmountAndFeesInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    cortex: TAccountMetas[0];
    /** #2 */
    pool: TAccountMetas[1];
    /** #3 */
    receivingCustody: TAccountMetas[2];
    /** #4 */
    oracle: TAccountMetas[3];
    /** #5 */
    collateralCustody: TAccountMetas[4];
    /** #6 */
    principalCustody: TAccountMetas[5];
    /** #7 */
    adrenaProgram: TAccountMetas[6];
  };
  data: GetOpenPositionWithSwapAmountAndFeesInstructionData;
};

export function parseGetOpenPositionWithSwapAmountAndFeesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedGetOpenPositionWithSwapAmountAndFeesInstruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      cortex: getNextAccount(),
      pool: getNextAccount(),
      receivingCustody: getNextAccount(),
      oracle: getNextAccount(),
      collateralCustody: getNextAccount(),
      principalCustody: getNextAccount(),
      adrenaProgram: getNextAccount(),
    },
    data: getGetOpenPositionWithSwapAmountAndFeesInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
