/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INIT_USER_STAKING_DISCRIMINATOR = new Uint8Array([
  49, 77, 246, 16, 254, 90, 29, 206,
]);

export function getInitUserStakingDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_USER_STAKING_DISCRIMINATOR
  );
}

export type InitUserStakingInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountRewardTokenAccount extends string | IAccountMeta<string> = string,
  TAccountLmTokenAccount extends string | IAccountMeta<string> = string,
  TAccountStakingRewardTokenVault extends
    | string
    | IAccountMeta<string> = string,
  TAccountStakingLmRewardTokenVault extends
    | string
    | IAccountMeta<string> = string,
  TAccountUserStaking extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountStaking extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountGenesisLock extends string | IAccountMeta<string> = string,
  TAccountLmTokenMint extends string | IAccountMeta<string> = string,
  TAccountFeeRedistributionMint extends string | IAccountMeta<string> = string,
  TAccountAdrenaProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountRewardTokenAccount extends string
        ? WritableAccount<TAccountRewardTokenAccount>
        : TAccountRewardTokenAccount,
      TAccountLmTokenAccount extends string
        ? WritableAccount<TAccountLmTokenAccount>
        : TAccountLmTokenAccount,
      TAccountStakingRewardTokenVault extends string
        ? WritableAccount<TAccountStakingRewardTokenVault>
        : TAccountStakingRewardTokenVault,
      TAccountStakingLmRewardTokenVault extends string
        ? WritableAccount<TAccountStakingLmRewardTokenVault>
        : TAccountStakingLmRewardTokenVault,
      TAccountUserStaking extends string
        ? WritableAccount<TAccountUserStaking>
        : TAccountUserStaking,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountStaking extends string
        ? ReadonlyAccount<TAccountStaking>
        : TAccountStaking,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountGenesisLock extends string
        ? WritableAccount<TAccountGenesisLock>
        : TAccountGenesisLock,
      TAccountLmTokenMint extends string
        ? ReadonlyAccount<TAccountLmTokenMint>
        : TAccountLmTokenMint,
      TAccountFeeRedistributionMint extends string
        ? ReadonlyAccount<TAccountFeeRedistributionMint>
        : TAccountFeeRedistributionMint,
      TAccountAdrenaProgram extends string
        ? ReadonlyAccount<TAccountAdrenaProgram>
        : TAccountAdrenaProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitUserStakingInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitUserStakingInstructionDataArgs = {};

export function getInitUserStakingInstructionDataEncoder(): Encoder<InitUserStakingInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: INIT_USER_STAKING_DISCRIMINATOR })
  );
}

export function getInitUserStakingInstructionDataDecoder(): Decoder<InitUserStakingInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitUserStakingInstructionDataCodec(): Codec<
  InitUserStakingInstructionDataArgs,
  InitUserStakingInstructionData
> {
  return combineCodec(
    getInitUserStakingInstructionDataEncoder(),
    getInitUserStakingInstructionDataDecoder()
  );
}

export type InitUserStakingInput<
  TAccountOwner extends string = string,
  TAccountRewardTokenAccount extends string = string,
  TAccountLmTokenAccount extends string = string,
  TAccountStakingRewardTokenVault extends string = string,
  TAccountStakingLmRewardTokenVault extends string = string,
  TAccountUserStaking extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountStaking extends string = string,
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountGenesisLock extends string = string,
  TAccountLmTokenMint extends string = string,
  TAccountFeeRedistributionMint extends string = string,
  TAccountAdrenaProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** #1 */
  owner: TransactionSigner<TAccountOwner>;
  /** #2 */
  rewardTokenAccount: Address<TAccountRewardTokenAccount>;
  /** #3 */
  lmTokenAccount: Address<TAccountLmTokenAccount>;
  /** #4 */
  stakingRewardTokenVault: Address<TAccountStakingRewardTokenVault>;
  /** #5 */
  stakingLmRewardTokenVault: Address<TAccountStakingLmRewardTokenVault>;
  /** #6 */
  userStaking: Address<TAccountUserStaking>;
  /** #7 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #8 */
  staking: Address<TAccountStaking>;
  /** #9 */
  cortex: Address<TAccountCortex>;
  /** #10 */
  pool: Address<TAccountPool>;
  /** #11 */
  genesisLock: Address<TAccountGenesisLock>;
  /** #12 */
  lmTokenMint: Address<TAccountLmTokenMint>;
  /** #13 */
  feeRedistributionMint: Address<TAccountFeeRedistributionMint>;
  /** #14 */
  adrenaProgram: Address<TAccountAdrenaProgram>;
  /** #15 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #16 */
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getInitUserStakingInstruction<
  TAccountOwner extends string,
  TAccountRewardTokenAccount extends string,
  TAccountLmTokenAccount extends string,
  TAccountStakingRewardTokenVault extends string,
  TAccountStakingLmRewardTokenVault extends string,
  TAccountUserStaking extends string,
  TAccountTransferAuthority extends string,
  TAccountStaking extends string,
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountGenesisLock extends string,
  TAccountLmTokenMint extends string,
  TAccountFeeRedistributionMint extends string,
  TAccountAdrenaProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: InitUserStakingInput<
    TAccountOwner,
    TAccountRewardTokenAccount,
    TAccountLmTokenAccount,
    TAccountStakingRewardTokenVault,
    TAccountStakingLmRewardTokenVault,
    TAccountUserStaking,
    TAccountTransferAuthority,
    TAccountStaking,
    TAccountCortex,
    TAccountPool,
    TAccountGenesisLock,
    TAccountLmTokenMint,
    TAccountFeeRedistributionMint,
    TAccountAdrenaProgram,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitUserStakingInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountRewardTokenAccount,
  TAccountLmTokenAccount,
  TAccountStakingRewardTokenVault,
  TAccountStakingLmRewardTokenVault,
  TAccountUserStaking,
  TAccountTransferAuthority,
  TAccountStaking,
  TAccountCortex,
  TAccountPool,
  TAccountGenesisLock,
  TAccountLmTokenMint,
  TAccountFeeRedistributionMint,
  TAccountAdrenaProgram,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    rewardTokenAccount: {
      value: input.rewardTokenAccount ?? null,
      isWritable: true,
    },
    lmTokenAccount: { value: input.lmTokenAccount ?? null, isWritable: true },
    stakingRewardTokenVault: {
      value: input.stakingRewardTokenVault ?? null,
      isWritable: true,
    },
    stakingLmRewardTokenVault: {
      value: input.stakingLmRewardTokenVault ?? null,
      isWritable: true,
    },
    userStaking: { value: input.userStaking ?? null, isWritable: true },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    staking: { value: input.staking ?? null, isWritable: false },
    cortex: { value: input.cortex ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    genesisLock: { value: input.genesisLock ?? null, isWritable: true },
    lmTokenMint: { value: input.lmTokenMint ?? null, isWritable: false },
    feeRedistributionMint: {
      value: input.feeRedistributionMint ?? null,
      isWritable: false,
    },
    adrenaProgram: { value: input.adrenaProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.rewardTokenAccount),
      getAccountMeta(accounts.lmTokenAccount),
      getAccountMeta(accounts.stakingRewardTokenVault),
      getAccountMeta(accounts.stakingLmRewardTokenVault),
      getAccountMeta(accounts.userStaking),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.staking),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.genesisLock),
      getAccountMeta(accounts.lmTokenMint),
      getAccountMeta(accounts.feeRedistributionMint),
      getAccountMeta(accounts.adrenaProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getInitUserStakingInstructionDataEncoder().encode({}),
  } as InitUserStakingInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountRewardTokenAccount,
    TAccountLmTokenAccount,
    TAccountStakingRewardTokenVault,
    TAccountStakingLmRewardTokenVault,
    TAccountUserStaking,
    TAccountTransferAuthority,
    TAccountStaking,
    TAccountCortex,
    TAccountPool,
    TAccountGenesisLock,
    TAccountLmTokenMint,
    TAccountFeeRedistributionMint,
    TAccountAdrenaProgram,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedInitUserStakingInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    owner: TAccountMetas[0];
    /** #2 */
    rewardTokenAccount: TAccountMetas[1];
    /** #3 */
    lmTokenAccount: TAccountMetas[2];
    /** #4 */
    stakingRewardTokenVault: TAccountMetas[3];
    /** #5 */
    stakingLmRewardTokenVault: TAccountMetas[4];
    /** #6 */
    userStaking: TAccountMetas[5];
    /** #7 */
    transferAuthority: TAccountMetas[6];
    /** #8 */
    staking: TAccountMetas[7];
    /** #9 */
    cortex: TAccountMetas[8];
    /** #10 */
    pool: TAccountMetas[9];
    /** #11 */
    genesisLock: TAccountMetas[10];
    /** #12 */
    lmTokenMint: TAccountMetas[11];
    /** #13 */
    feeRedistributionMint: TAccountMetas[12];
    /** #14 */
    adrenaProgram: TAccountMetas[13];
    /** #15 */
    systemProgram: TAccountMetas[14];
    /** #16 */
    tokenProgram: TAccountMetas[15];
  };
  data: InitUserStakingInstructionData;
};

export function parseInitUserStakingInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitUserStakingInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      rewardTokenAccount: getNextAccount(),
      lmTokenAccount: getNextAccount(),
      stakingRewardTokenVault: getNextAccount(),
      stakingLmRewardTokenVault: getNextAccount(),
      userStaking: getNextAccount(),
      transferAuthority: getNextAccount(),
      staking: getNextAccount(),
      cortex: getNextAccount(),
      pool: getNextAccount(),
      genesisLock: getNextAccount(),
      lmTokenMint: getNextAccount(),
      feeRedistributionMint: getNextAccount(),
      adrenaProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getInitUserStakingInstructionDataDecoder().decode(instruction.data),
  };
}
