/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_POOL_ALLOW_TRADE_DISCRIMINATOR = new Uint8Array([
  135, 138, 235, 91, 224, 8, 112, 3,
]);

export function getSetPoolAllowTradeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_POOL_ALLOW_TRADE_DISCRIMINATOR
  );
}

export type SetPoolAllowTradeInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      ...TRemainingAccounts,
    ]
  >;

export type SetPoolAllowTradeInstructionData = {
  discriminator: ReadonlyUint8Array;
  allowTrade: boolean;
};

export type SetPoolAllowTradeInstructionDataArgs = { allowTrade: boolean };

export function getSetPoolAllowTradeInstructionDataEncoder(): Encoder<SetPoolAllowTradeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['allowTrade', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_POOL_ALLOW_TRADE_DISCRIMINATOR })
  );
}

export function getSetPoolAllowTradeInstructionDataDecoder(): Decoder<SetPoolAllowTradeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['allowTrade', getBooleanDecoder()],
  ]);
}

export function getSetPoolAllowTradeInstructionDataCodec(): Codec<
  SetPoolAllowTradeInstructionDataArgs,
  SetPoolAllowTradeInstructionData
> {
  return combineCodec(
    getSetPoolAllowTradeInstructionDataEncoder(),
    getSetPoolAllowTradeInstructionDataDecoder()
  );
}

export type SetPoolAllowTradeInput<
  TAccountAdmin extends string = string,
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
> = {
  /** #1 */
  admin: TransactionSigner<TAccountAdmin>;
  /** #2 */
  cortex: Address<TAccountCortex>;
  /** #3 */
  pool: Address<TAccountPool>;
  allowTrade: SetPoolAllowTradeInstructionDataArgs['allowTrade'];
};

export function getSetPoolAllowTradeInstruction<
  TAccountAdmin extends string,
  TAccountCortex extends string,
  TAccountPool extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: SetPoolAllowTradeInput<TAccountAdmin, TAccountCortex, TAccountPool>,
  config?: { programAddress?: TProgramAddress }
): SetPoolAllowTradeInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountCortex,
  TAccountPool
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    cortex: { value: input.cortex ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
    ],
    programAddress,
    data: getSetPoolAllowTradeInstructionDataEncoder().encode(
      args as SetPoolAllowTradeInstructionDataArgs
    ),
  } as SetPoolAllowTradeInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountCortex,
    TAccountPool
  >;

  return instruction;
}

export type ParsedSetPoolAllowTradeInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    admin: TAccountMetas[0];
    /** #2 */
    cortex: TAccountMetas[1];
    /** #3 */
    pool: TAccountMetas[2];
  };
  data: SetPoolAllowTradeInstructionData;
};

export function parseSetPoolAllowTradeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetPoolAllowTradeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      cortex: getNextAccount(),
      pool: getNextAccount(),
    },
    data: getSetPoolAllowTradeInstructionDataDecoder().decode(instruction.data),
  };
}
