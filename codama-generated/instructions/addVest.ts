/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADD_VEST_DISCRIMINATOR = new Uint8Array([
  213, 88, 26, 9, 37, 186, 193, 59,
]);

export function getAddVestDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ADD_VEST_DISCRIMINATOR);
}

export type AddVestInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountVestRegistry extends string | IAccountMeta<string> = string,
  TAccountVest extends string | IAccountMeta<string> = string,
  TAccountLmTokenMint extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountVestRegistry extends string
        ? WritableAccount<TAccountVestRegistry>
        : TAccountVestRegistry,
      TAccountVest extends string
        ? WritableAccount<TAccountVest>
        : TAccountVest,
      TAccountLmTokenMint extends string
        ? WritableAccount<TAccountLmTokenMint>
        : TAccountLmTokenMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type AddVestInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
  originBucket: number;
  unlockStartTimestamp: bigint;
  unlockEndTimestamp: bigint;
  voteMultiplier: number;
};

export type AddVestInstructionDataArgs = {
  amount: number | bigint;
  originBucket: number;
  unlockStartTimestamp: number | bigint;
  unlockEndTimestamp: number | bigint;
  voteMultiplier: number;
};

export function getAddVestInstructionDataEncoder(): Encoder<AddVestInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
      ['originBucket', getU8Encoder()],
      ['unlockStartTimestamp', getI64Encoder()],
      ['unlockEndTimestamp', getI64Encoder()],
      ['voteMultiplier', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ADD_VEST_DISCRIMINATOR })
  );
}

export function getAddVestInstructionDataDecoder(): Decoder<AddVestInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
    ['originBucket', getU8Decoder()],
    ['unlockStartTimestamp', getI64Decoder()],
    ['unlockEndTimestamp', getI64Decoder()],
    ['voteMultiplier', getU32Decoder()],
  ]);
}

export function getAddVestInstructionDataCodec(): Codec<
  AddVestInstructionDataArgs,
  AddVestInstructionData
> {
  return combineCodec(
    getAddVestInstructionDataEncoder(),
    getAddVestInstructionDataDecoder()
  );
}

export type AddVestInput<
  TAccountAdmin extends string = string,
  TAccountOwner extends string = string,
  TAccountPayer extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountCortex extends string = string,
  TAccountVestRegistry extends string = string,
  TAccountVest extends string = string,
  TAccountLmTokenMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  /** #1 */
  admin: TransactionSigner<TAccountAdmin>;
  /** #2 */
  owner: Address<TAccountOwner>;
  /** #3 */
  payer: TransactionSigner<TAccountPayer>;
  /** #4 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #5 */
  cortex: Address<TAccountCortex>;
  /** #6 */
  vestRegistry: Address<TAccountVestRegistry>;
  /** #7 */
  vest: Address<TAccountVest>;
  /** #8 */
  lmTokenMint: Address<TAccountLmTokenMint>;
  /** #15 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #16 */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** #17 */
  rent?: Address<TAccountRent>;
  amount: AddVestInstructionDataArgs['amount'];
  originBucket: AddVestInstructionDataArgs['originBucket'];
  unlockStartTimestamp: AddVestInstructionDataArgs['unlockStartTimestamp'];
  unlockEndTimestamp: AddVestInstructionDataArgs['unlockEndTimestamp'];
  voteMultiplier: AddVestInstructionDataArgs['voteMultiplier'];
};

export function getAddVestInstruction<
  TAccountAdmin extends string,
  TAccountOwner extends string,
  TAccountPayer extends string,
  TAccountTransferAuthority extends string,
  TAccountCortex extends string,
  TAccountVestRegistry extends string,
  TAccountVest extends string,
  TAccountLmTokenMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: AddVestInput<
    TAccountAdmin,
    TAccountOwner,
    TAccountPayer,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountVestRegistry,
    TAccountVest,
    TAccountLmTokenMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): AddVestInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountOwner,
  TAccountPayer,
  TAccountTransferAuthority,
  TAccountCortex,
  TAccountVestRegistry,
  TAccountVest,
  TAccountLmTokenMint,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    cortex: { value: input.cortex ?? null, isWritable: true },
    vestRegistry: { value: input.vestRegistry ?? null, isWritable: true },
    vest: { value: input.vest ?? null, isWritable: true },
    lmTokenMint: { value: input.lmTokenMint ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.vestRegistry),
      getAccountMeta(accounts.vest),
      getAccountMeta(accounts.lmTokenMint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getAddVestInstructionDataEncoder().encode(
      args as AddVestInstructionDataArgs
    ),
  } as AddVestInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountOwner,
    TAccountPayer,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountVestRegistry,
    TAccountVest,
    TAccountLmTokenMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedAddVestInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    admin: TAccountMetas[0];
    /** #2 */
    owner: TAccountMetas[1];
    /** #3 */
    payer: TAccountMetas[2];
    /** #4 */
    transferAuthority: TAccountMetas[3];
    /** #5 */
    cortex: TAccountMetas[4];
    /** #6 */
    vestRegistry: TAccountMetas[5];
    /** #7 */
    vest: TAccountMetas[6];
    /** #8 */
    lmTokenMint: TAccountMetas[7];
    /** #15 */
    systemProgram: TAccountMetas[8];
    /** #16 */
    tokenProgram: TAccountMetas[9];
    /** #17 */
    rent: TAccountMetas[10];
  };
  data: AddVestInstructionData;
};

export function parseAddVestInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAddVestInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      owner: getNextAccount(),
      payer: getNextAccount(),
      transferAuthority: getNextAccount(),
      cortex: getNextAccount(),
      vestRegistry: getNextAccount(),
      vest: getNextAccount(),
      lmTokenMint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getAddVestInstructionDataDecoder().decode(instruction.data),
  };
}
