/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const MINT_STAKED_LM_TOKENS_FROM_BUCKET_DISCRIMINATOR = new Uint8Array([
  37, 153, 105, 98, 59, 127, 123, 240,
]);

export function getMintStakedLmTokensFromBucketDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MINT_STAKED_LM_TOKENS_FROM_BUCKET_DISCRIMINATOR
  );
}

export type MintStakedLmTokensFromBucketInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountStakingStakedTokenVault extends
    | string
    | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountUserStaking extends string | IAccountMeta<string> = string,
  TAccountStaking extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountLmTokenTreasury extends string | IAccountMeta<string> = string,
  TAccountAdrenaProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountStakingStakedTokenVault extends string
        ? WritableAccount<TAccountStakingStakedTokenVault>
        : TAccountStakingStakedTokenVault,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountUserStaking extends string
        ? WritableAccount<TAccountUserStaking>
        : TAccountUserStaking,
      TAccountStaking extends string
        ? WritableAccount<TAccountStaking>
        : TAccountStaking,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountLmTokenTreasury extends string
        ? WritableAccount<TAccountLmTokenTreasury>
        : TAccountLmTokenTreasury,
      TAccountAdrenaProgram extends string
        ? ReadonlyAccount<TAccountAdrenaProgram>
        : TAccountAdrenaProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MintStakedLmTokensFromBucketInstructionData = {
  discriminator: ReadonlyUint8Array;
  bucketName: number;
  amount: bigint;
  reason: string;
  lockedDays: number;
};

export type MintStakedLmTokensFromBucketInstructionDataArgs = {
  bucketName: number;
  amount: number | bigint;
  reason: string;
  lockedDays: number;
};

export function getMintStakedLmTokensFromBucketInstructionDataEncoder(): Encoder<MintStakedLmTokensFromBucketInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bucketName', getU8Encoder()],
      ['amount', getU64Encoder()],
      ['reason', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['lockedDays', getU32Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: MINT_STAKED_LM_TOKENS_FROM_BUCKET_DISCRIMINATOR,
    })
  );
}

export function getMintStakedLmTokensFromBucketInstructionDataDecoder(): Decoder<MintStakedLmTokensFromBucketInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bucketName', getU8Decoder()],
    ['amount', getU64Decoder()],
    ['reason', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['lockedDays', getU32Decoder()],
  ]);
}

export function getMintStakedLmTokensFromBucketInstructionDataCodec(): Codec<
  MintStakedLmTokensFromBucketInstructionDataArgs,
  MintStakedLmTokensFromBucketInstructionData
> {
  return combineCodec(
    getMintStakedLmTokensFromBucketInstructionDataEncoder(),
    getMintStakedLmTokensFromBucketInstructionDataDecoder()
  );
}

export type MintStakedLmTokensFromBucketInput<
  TAccountAdmin extends string = string,
  TAccountPayer extends string = string,
  TAccountOwner extends string = string,
  TAccountStakingStakedTokenVault extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountUserStaking extends string = string,
  TAccountStaking extends string = string,
  TAccountCortex extends string = string,
  TAccountLmTokenTreasury extends string = string,
  TAccountAdrenaProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** #1 */
  admin: TransactionSigner<TAccountAdmin>;
  /** #2 */
  payer: TransactionSigner<TAccountPayer>;
  /** #3 */
  owner: Address<TAccountOwner>;
  /** #4 */
  stakingStakedTokenVault: Address<TAccountStakingStakedTokenVault>;
  /** #5 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #6 */
  userStaking: Address<TAccountUserStaking>;
  /** #7 */
  staking: Address<TAccountStaking>;
  /** #8 */
  cortex: Address<TAccountCortex>;
  /** #9 */
  lmTokenTreasury: Address<TAccountLmTokenTreasury>;
  /** #10 */
  adrenaProgram: Address<TAccountAdrenaProgram>;
  /** #11 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #12 */
  tokenProgram?: Address<TAccountTokenProgram>;
  bucketName: MintStakedLmTokensFromBucketInstructionDataArgs['bucketName'];
  amount: MintStakedLmTokensFromBucketInstructionDataArgs['amount'];
  reason: MintStakedLmTokensFromBucketInstructionDataArgs['reason'];
  lockedDays: MintStakedLmTokensFromBucketInstructionDataArgs['lockedDays'];
};

export function getMintStakedLmTokensFromBucketInstruction<
  TAccountAdmin extends string,
  TAccountPayer extends string,
  TAccountOwner extends string,
  TAccountStakingStakedTokenVault extends string,
  TAccountTransferAuthority extends string,
  TAccountUserStaking extends string,
  TAccountStaking extends string,
  TAccountCortex extends string,
  TAccountLmTokenTreasury extends string,
  TAccountAdrenaProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: MintStakedLmTokensFromBucketInput<
    TAccountAdmin,
    TAccountPayer,
    TAccountOwner,
    TAccountStakingStakedTokenVault,
    TAccountTransferAuthority,
    TAccountUserStaking,
    TAccountStaking,
    TAccountCortex,
    TAccountLmTokenTreasury,
    TAccountAdrenaProgram,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MintStakedLmTokensFromBucketInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountPayer,
  TAccountOwner,
  TAccountStakingStakedTokenVault,
  TAccountTransferAuthority,
  TAccountUserStaking,
  TAccountStaking,
  TAccountCortex,
  TAccountLmTokenTreasury,
  TAccountAdrenaProgram,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    stakingStakedTokenVault: {
      value: input.stakingStakedTokenVault ?? null,
      isWritable: true,
    },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    userStaking: { value: input.userStaking ?? null, isWritable: true },
    staking: { value: input.staking ?? null, isWritable: true },
    cortex: { value: input.cortex ?? null, isWritable: true },
    lmTokenTreasury: { value: input.lmTokenTreasury ?? null, isWritable: true },
    adrenaProgram: { value: input.adrenaProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.stakingStakedTokenVault),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.userStaking),
      getAccountMeta(accounts.staking),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.lmTokenTreasury),
      getAccountMeta(accounts.adrenaProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getMintStakedLmTokensFromBucketInstructionDataEncoder().encode(
      args as MintStakedLmTokensFromBucketInstructionDataArgs
    ),
  } as MintStakedLmTokensFromBucketInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountPayer,
    TAccountOwner,
    TAccountStakingStakedTokenVault,
    TAccountTransferAuthority,
    TAccountUserStaking,
    TAccountStaking,
    TAccountCortex,
    TAccountLmTokenTreasury,
    TAccountAdrenaProgram,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedMintStakedLmTokensFromBucketInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    admin: TAccountMetas[0];
    /** #2 */
    payer: TAccountMetas[1];
    /** #3 */
    owner: TAccountMetas[2];
    /** #4 */
    stakingStakedTokenVault: TAccountMetas[3];
    /** #5 */
    transferAuthority: TAccountMetas[4];
    /** #6 */
    userStaking: TAccountMetas[5];
    /** #7 */
    staking: TAccountMetas[6];
    /** #8 */
    cortex: TAccountMetas[7];
    /** #9 */
    lmTokenTreasury: TAccountMetas[8];
    /** #10 */
    adrenaProgram: TAccountMetas[9];
    /** #11 */
    systemProgram: TAccountMetas[10];
    /** #12 */
    tokenProgram: TAccountMetas[11];
  };
  data: MintStakedLmTokensFromBucketInstructionData;
};

export function parseMintStakedLmTokensFromBucketInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedMintStakedLmTokensFromBucketInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      payer: getNextAccount(),
      owner: getNextAccount(),
      stakingStakedTokenVault: getNextAccount(),
      transferAuthority: getNextAccount(),
      userStaking: getNextAccount(),
      staking: getNextAccount(),
      cortex: getNextAccount(),
      lmTokenTreasury: getNextAccount(),
      adrenaProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getMintStakedLmTokensFromBucketInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
