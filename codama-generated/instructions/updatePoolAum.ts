/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_POOL_AUM_DISCRIMINATOR = new Uint8Array([
  10, 125, 230, 234, 157, 184, 236, 241,
]);

export function getUpdatePoolAumDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_POOL_AUM_DISCRIMINATOR
  );
}

export type UpdatePoolAumInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountCortex extends string
        ? ReadonlyAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      ...TRemainingAccounts,
    ]
  >;

export type UpdatePoolAumInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type UpdatePoolAumInstructionDataArgs = {};

export function getUpdatePoolAumInstructionDataEncoder(): Encoder<UpdatePoolAumInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: UPDATE_POOL_AUM_DISCRIMINATOR })
  );
}

export function getUpdatePoolAumInstructionDataDecoder(): Decoder<UpdatePoolAumInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getUpdatePoolAumInstructionDataCodec(): Codec<
  UpdatePoolAumInstructionDataArgs,
  UpdatePoolAumInstructionData
> {
  return combineCodec(
    getUpdatePoolAumInstructionDataEncoder(),
    getUpdatePoolAumInstructionDataDecoder()
  );
}

export type UpdatePoolAumInput<
  TAccountPayer extends string = string,
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
> = {
  /** #1 */
  payer: TransactionSigner<TAccountPayer>;
  /** #2 */
  cortex: Address<TAccountCortex>;
  /** #3 */
  pool: Address<TAccountPool>;
};

export function getUpdatePoolAumInstruction<
  TAccountPayer extends string,
  TAccountCortex extends string,
  TAccountPool extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: UpdatePoolAumInput<TAccountPayer, TAccountCortex, TAccountPool>,
  config?: { programAddress?: TProgramAddress }
): UpdatePoolAumInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountCortex,
  TAccountPool
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    cortex: { value: input.cortex ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
    ],
    programAddress,
    data: getUpdatePoolAumInstructionDataEncoder().encode({}),
  } as UpdatePoolAumInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountCortex,
    TAccountPool
  >;

  return instruction;
}

export type ParsedUpdatePoolAumInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    payer: TAccountMetas[0];
    /** #2 */
    cortex: TAccountMetas[1];
    /** #3 */
    pool: TAccountMetas[2];
  };
  data: UpdatePoolAumInstructionData;
};

export function parseUpdatePoolAumInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdatePoolAumInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      cortex: getNextAccount(),
      pool: getNextAccount(),
    },
    data: getUpdatePoolAumInstructionDataDecoder().decode(instruction.data),
  };
}
