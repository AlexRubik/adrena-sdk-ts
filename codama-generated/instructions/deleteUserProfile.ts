/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DELETE_USER_PROFILE_DISCRIMINATOR = new Uint8Array([
  24, 82, 133, 212, 73, 243, 46, 137,
]);

export function getDeleteUserProfileDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DELETE_USER_PROFILE_DISCRIMINATOR
  );
}

export type DeleteUserProfileInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountUserProfile extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountUser extends string
        ? ReadonlyAccount<TAccountUser>
        : TAccountUser,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountUserProfile extends string
        ? WritableAccount<TAccountUserProfile>
        : TAccountUserProfile,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DeleteUserProfileInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type DeleteUserProfileInstructionDataArgs = {};

export function getDeleteUserProfileInstructionDataEncoder(): Encoder<DeleteUserProfileInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: DELETE_USER_PROFILE_DISCRIMINATOR })
  );
}

export function getDeleteUserProfileInstructionDataDecoder(): Decoder<DeleteUserProfileInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getDeleteUserProfileInstructionDataCodec(): Codec<
  DeleteUserProfileInstructionDataArgs,
  DeleteUserProfileInstructionData
> {
  return combineCodec(
    getDeleteUserProfileInstructionDataEncoder(),
    getDeleteUserProfileInstructionDataDecoder()
  );
}

export type DeleteUserProfileInput<
  TAccountAdmin extends string = string,
  TAccountUser extends string = string,
  TAccountPayer extends string = string,
  TAccountUserProfile extends string = string,
  TAccountCortex extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** #1 */
  admin: TransactionSigner<TAccountAdmin>;
  /** #2 */
  user: Address<TAccountUser>;
  /** #3 */
  payer: TransactionSigner<TAccountPayer>;
  /** #4 */
  userProfile: Address<TAccountUserProfile>;
  /** #5 */
  cortex: Address<TAccountCortex>;
  /** #6 */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getDeleteUserProfileInstruction<
  TAccountAdmin extends string,
  TAccountUser extends string,
  TAccountPayer extends string,
  TAccountUserProfile extends string,
  TAccountCortex extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: DeleteUserProfileInput<
    TAccountAdmin,
    TAccountUser,
    TAccountPayer,
    TAccountUserProfile,
    TAccountCortex,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DeleteUserProfileInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountUser,
  TAccountPayer,
  TAccountUserProfile,
  TAccountCortex,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    user: { value: input.user ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    userProfile: { value: input.userProfile ?? null, isWritable: true },
    cortex: { value: input.cortex ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.userProfile),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDeleteUserProfileInstructionDataEncoder().encode({}),
  } as DeleteUserProfileInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountUser,
    TAccountPayer,
    TAccountUserProfile,
    TAccountCortex,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedDeleteUserProfileInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    admin: TAccountMetas[0];
    /** #2 */
    user: TAccountMetas[1];
    /** #3 */
    payer: TAccountMetas[2];
    /** #4 */
    userProfile: TAccountMetas[3];
    /** #5 */
    cortex: TAccountMetas[4];
    /** #6 */
    systemProgram: TAccountMetas[5];
  };
  data: DeleteUserProfileInstructionData;
};

export function parseDeleteUserProfileInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDeleteUserProfileInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      user: getNextAccount(),
      payer: getNextAccount(),
      userProfile: getNextAccount(),
      cortex: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getDeleteUserProfileInstructionDataDecoder().decode(instruction.data),
  };
}
