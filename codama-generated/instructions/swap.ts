/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getChaosLabsBatchPricesDecoder,
  getChaosLabsBatchPricesEncoder,
  type ChaosLabsBatchPrices,
  type ChaosLabsBatchPricesArgs,
} from '../types';

export const SWAP_DISCRIMINATOR = new Uint8Array([
  248, 198, 158, 145, 225, 117, 135, 200,
]);

export function getSwapDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SWAP_DISCRIMINATOR);
}

export type SwapInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountCaller extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountFundingAccount extends string | IAccountMeta<string> = string,
  TAccountReceivingAccount extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountReceivingCustody extends string | IAccountMeta<string> = string,
  TAccountOracle extends string | IAccountMeta<string> = string,
  TAccountReceivingCustodyTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountDispensingCustody extends string | IAccountMeta<string> = string,
  TAccountDispensingCustodyTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAdrenaProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountCaller extends string
        ? ReadonlySignerAccount<TAccountCaller> &
            IAccountSignerMeta<TAccountCaller>
        : TAccountCaller,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountFundingAccount extends string
        ? WritableAccount<TAccountFundingAccount>
        : TAccountFundingAccount,
      TAccountReceivingAccount extends string
        ? WritableAccount<TAccountReceivingAccount>
        : TAccountReceivingAccount,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountReceivingCustody extends string
        ? WritableAccount<TAccountReceivingCustody>
        : TAccountReceivingCustody,
      TAccountOracle extends string
        ? WritableAccount<TAccountOracle>
        : TAccountOracle,
      TAccountReceivingCustodyTokenAccount extends string
        ? WritableAccount<TAccountReceivingCustodyTokenAccount>
        : TAccountReceivingCustodyTokenAccount,
      TAccountDispensingCustody extends string
        ? WritableAccount<TAccountDispensingCustody>
        : TAccountDispensingCustody,
      TAccountDispensingCustodyTokenAccount extends string
        ? WritableAccount<TAccountDispensingCustodyTokenAccount>
        : TAccountDispensingCustodyTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAdrenaProgram extends string
        ? ReadonlyAccount<TAccountAdrenaProgram>
        : TAccountAdrenaProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SwapInstructionData = {
  discriminator: ReadonlyUint8Array;
  amountIn: bigint;
  minAmountOut: bigint;
  oraclePrices: Option<ChaosLabsBatchPrices>;
};

export type SwapInstructionDataArgs = {
  amountIn: number | bigint;
  minAmountOut: number | bigint;
  oraclePrices: OptionOrNullable<ChaosLabsBatchPricesArgs>;
};

export function getSwapInstructionDataEncoder(): Encoder<SwapInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amountIn', getU64Encoder()],
      ['minAmountOut', getU64Encoder()],
      ['oraclePrices', getOptionEncoder(getChaosLabsBatchPricesEncoder())],
    ]),
    (value) => ({ ...value, discriminator: SWAP_DISCRIMINATOR })
  );
}

export function getSwapInstructionDataDecoder(): Decoder<SwapInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amountIn', getU64Decoder()],
    ['minAmountOut', getU64Decoder()],
    ['oraclePrices', getOptionDecoder(getChaosLabsBatchPricesDecoder())],
  ]);
}

export function getSwapInstructionDataCodec(): Codec<
  SwapInstructionDataArgs,
  SwapInstructionData
> {
  return combineCodec(
    getSwapInstructionDataEncoder(),
    getSwapInstructionDataDecoder()
  );
}

export type SwapInput<
  TAccountCaller extends string = string,
  TAccountOwner extends string = string,
  TAccountFundingAccount extends string = string,
  TAccountReceivingAccount extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountReceivingCustody extends string = string,
  TAccountOracle extends string = string,
  TAccountReceivingCustodyTokenAccount extends string = string,
  TAccountDispensingCustody extends string = string,
  TAccountDispensingCustodyTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAdrenaProgram extends string = string,
> = {
  /** #1 */
  caller: TransactionSigner<TAccountCaller>;
  /** #2 */
  owner: TransactionSigner<TAccountOwner>;
  /** #3 */
  fundingAccount: Address<TAccountFundingAccount>;
  /** #4 */
  receivingAccount: Address<TAccountReceivingAccount>;
  /** #5 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #6 */
  cortex: Address<TAccountCortex>;
  /** #7 */
  pool: Address<TAccountPool>;
  /** #8 */
  receivingCustody: Address<TAccountReceivingCustody>;
  /** #9 */
  oracle: Address<TAccountOracle>;
  /** #10 */
  receivingCustodyTokenAccount: Address<TAccountReceivingCustodyTokenAccount>;
  /** #11 */
  dispensingCustody: Address<TAccountDispensingCustody>;
  /** #12 */
  dispensingCustodyTokenAccount: Address<TAccountDispensingCustodyTokenAccount>;
  /** #13 */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** #14 */
  adrenaProgram: Address<TAccountAdrenaProgram>;
  amountIn: SwapInstructionDataArgs['amountIn'];
  minAmountOut: SwapInstructionDataArgs['minAmountOut'];
  oraclePrices: SwapInstructionDataArgs['oraclePrices'];
};

export function getSwapInstruction<
  TAccountCaller extends string,
  TAccountOwner extends string,
  TAccountFundingAccount extends string,
  TAccountReceivingAccount extends string,
  TAccountTransferAuthority extends string,
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountReceivingCustody extends string,
  TAccountOracle extends string,
  TAccountReceivingCustodyTokenAccount extends string,
  TAccountDispensingCustody extends string,
  TAccountDispensingCustodyTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountAdrenaProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: SwapInput<
    TAccountCaller,
    TAccountOwner,
    TAccountFundingAccount,
    TAccountReceivingAccount,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountPool,
    TAccountReceivingCustody,
    TAccountOracle,
    TAccountReceivingCustodyTokenAccount,
    TAccountDispensingCustody,
    TAccountDispensingCustodyTokenAccount,
    TAccountTokenProgram,
    TAccountAdrenaProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SwapInstruction<
  TProgramAddress,
  TAccountCaller,
  TAccountOwner,
  TAccountFundingAccount,
  TAccountReceivingAccount,
  TAccountTransferAuthority,
  TAccountCortex,
  TAccountPool,
  TAccountReceivingCustody,
  TAccountOracle,
  TAccountReceivingCustodyTokenAccount,
  TAccountDispensingCustody,
  TAccountDispensingCustodyTokenAccount,
  TAccountTokenProgram,
  TAccountAdrenaProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    caller: { value: input.caller ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false },
    fundingAccount: { value: input.fundingAccount ?? null, isWritable: true },
    receivingAccount: {
      value: input.receivingAccount ?? null,
      isWritable: true,
    },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    cortex: { value: input.cortex ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    receivingCustody: {
      value: input.receivingCustody ?? null,
      isWritable: true,
    },
    oracle: { value: input.oracle ?? null, isWritable: true },
    receivingCustodyTokenAccount: {
      value: input.receivingCustodyTokenAccount ?? null,
      isWritable: true,
    },
    dispensingCustody: {
      value: input.dispensingCustody ?? null,
      isWritable: true,
    },
    dispensingCustodyTokenAccount: {
      value: input.dispensingCustodyTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    adrenaProgram: { value: input.adrenaProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.caller),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.fundingAccount),
      getAccountMeta(accounts.receivingAccount),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.receivingCustody),
      getAccountMeta(accounts.oracle),
      getAccountMeta(accounts.receivingCustodyTokenAccount),
      getAccountMeta(accounts.dispensingCustody),
      getAccountMeta(accounts.dispensingCustodyTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.adrenaProgram),
    ],
    programAddress,
    data: getSwapInstructionDataEncoder().encode(
      args as SwapInstructionDataArgs
    ),
  } as SwapInstruction<
    TProgramAddress,
    TAccountCaller,
    TAccountOwner,
    TAccountFundingAccount,
    TAccountReceivingAccount,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountPool,
    TAccountReceivingCustody,
    TAccountOracle,
    TAccountReceivingCustodyTokenAccount,
    TAccountDispensingCustody,
    TAccountDispensingCustodyTokenAccount,
    TAccountTokenProgram,
    TAccountAdrenaProgram
  >;

  return instruction;
}

export type ParsedSwapInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    caller: TAccountMetas[0];
    /** #2 */
    owner: TAccountMetas[1];
    /** #3 */
    fundingAccount: TAccountMetas[2];
    /** #4 */
    receivingAccount: TAccountMetas[3];
    /** #5 */
    transferAuthority: TAccountMetas[4];
    /** #6 */
    cortex: TAccountMetas[5];
    /** #7 */
    pool: TAccountMetas[6];
    /** #8 */
    receivingCustody: TAccountMetas[7];
    /** #9 */
    oracle: TAccountMetas[8];
    /** #10 */
    receivingCustodyTokenAccount: TAccountMetas[9];
    /** #11 */
    dispensingCustody: TAccountMetas[10];
    /** #12 */
    dispensingCustodyTokenAccount: TAccountMetas[11];
    /** #13 */
    tokenProgram: TAccountMetas[12];
    /** #14 */
    adrenaProgram: TAccountMetas[13];
  };
  data: SwapInstructionData;
};

export function parseSwapInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSwapInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      caller: getNextAccount(),
      owner: getNextAccount(),
      fundingAccount: getNextAccount(),
      receivingAccount: getNextAccount(),
      transferAuthority: getNextAccount(),
      cortex: getNextAccount(),
      pool: getNextAccount(),
      receivingCustody: getNextAccount(),
      oracle: getNextAccount(),
      receivingCustodyTokenAccount: getNextAccount(),
      dispensingCustody: getNextAccount(),
      dispensingCustodyTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      adrenaProgram: getNextAccount(),
    },
    data: getSwapInstructionDataDecoder().decode(instruction.data),
  };
}
