/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const MINT_ALL_LM_TOKENS_DISCRIMINATOR = new Uint8Array([
  219, 78, 135, 10, 185, 169, 57, 247,
]);

export function getMintAllLmTokensDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MINT_ALL_LM_TOKENS_DISCRIMINATOR
  );
}

export type MintAllLmTokensInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountLmTokenTreasury extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountLmTokenMint extends string | IAccountMeta<string> = string,
  TAccountLmTokenMintMetadata extends string | IAccountMeta<string> = string,
  TAccountVestRegistry extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountMplTokenMetadataProgram extends
    | string
    | IAccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string,
  TAccountSysvarInstructions extends
    | string
    | IAccountMeta<string> = 'Sysvar1nstructions1111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountLmTokenTreasury extends string
        ? WritableAccount<TAccountLmTokenTreasury>
        : TAccountLmTokenTreasury,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountLmTokenMint extends string
        ? WritableAccount<TAccountLmTokenMint>
        : TAccountLmTokenMint,
      TAccountLmTokenMintMetadata extends string
        ? WritableAccount<TAccountLmTokenMintMetadata>
        : TAccountLmTokenMintMetadata,
      TAccountVestRegistry extends string
        ? ReadonlyAccount<TAccountVestRegistry>
        : TAccountVestRegistry,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountMplTokenMetadataProgram extends string
        ? ReadonlyAccount<TAccountMplTokenMetadataProgram>
        : TAccountMplTokenMetadataProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSysvarInstructions extends string
        ? ReadonlyAccount<TAccountSysvarInstructions>
        : TAccountSysvarInstructions,
      ...TRemainingAccounts,
    ]
  >;

export type MintAllLmTokensInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type MintAllLmTokensInstructionDataArgs = {};

export function getMintAllLmTokensInstructionDataEncoder(): Encoder<MintAllLmTokensInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: MINT_ALL_LM_TOKENS_DISCRIMINATOR })
  );
}

export function getMintAllLmTokensInstructionDataDecoder(): Decoder<MintAllLmTokensInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getMintAllLmTokensInstructionDataCodec(): Codec<
  MintAllLmTokensInstructionDataArgs,
  MintAllLmTokensInstructionData
> {
  return combineCodec(
    getMintAllLmTokensInstructionDataEncoder(),
    getMintAllLmTokensInstructionDataDecoder()
  );
}

export type MintAllLmTokensInput<
  TAccountAdmin extends string = string,
  TAccountPayer extends string = string,
  TAccountLmTokenTreasury extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountCortex extends string = string,
  TAccountLmTokenMint extends string = string,
  TAccountLmTokenMintMetadata extends string = string,
  TAccountVestRegistry extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMplTokenMetadataProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSysvarInstructions extends string = string,
> = {
  /** #1 */
  admin: TransactionSigner<TAccountAdmin>;
  /** #2 */
  payer: TransactionSigner<TAccountPayer>;
  /** #3 */
  lmTokenTreasury: Address<TAccountLmTokenTreasury>;
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #4 */
  cortex: Address<TAccountCortex>;
  /** #5 */
  lmTokenMint: Address<TAccountLmTokenMint>;
  /** #6 */
  lmTokenMintMetadata: Address<TAccountLmTokenMintMetadata>;
  /** #7 */
  vestRegistry: Address<TAccountVestRegistry>;
  /** #8 */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** #9 */
  mplTokenMetadataProgram?: Address<TAccountMplTokenMetadataProgram>;
  /** #10 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #11 */
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  /** #12 */
  sysvarInstructions?: Address<TAccountSysvarInstructions>;
};

export function getMintAllLmTokensInstruction<
  TAccountAdmin extends string,
  TAccountPayer extends string,
  TAccountLmTokenTreasury extends string,
  TAccountTransferAuthority extends string,
  TAccountCortex extends string,
  TAccountLmTokenMint extends string,
  TAccountLmTokenMintMetadata extends string,
  TAccountVestRegistry extends string,
  TAccountTokenProgram extends string,
  TAccountMplTokenMetadataProgram extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSysvarInstructions extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: MintAllLmTokensInput<
    TAccountAdmin,
    TAccountPayer,
    TAccountLmTokenTreasury,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountLmTokenMint,
    TAccountLmTokenMintMetadata,
    TAccountVestRegistry,
    TAccountTokenProgram,
    TAccountMplTokenMetadataProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountSysvarInstructions
  >,
  config?: { programAddress?: TProgramAddress }
): MintAllLmTokensInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountPayer,
  TAccountLmTokenTreasury,
  TAccountTransferAuthority,
  TAccountCortex,
  TAccountLmTokenMint,
  TAccountLmTokenMintMetadata,
  TAccountVestRegistry,
  TAccountTokenProgram,
  TAccountMplTokenMetadataProgram,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram,
  TAccountSysvarInstructions
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    lmTokenTreasury: { value: input.lmTokenTreasury ?? null, isWritable: true },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    cortex: { value: input.cortex ?? null, isWritable: true },
    lmTokenMint: { value: input.lmTokenMint ?? null, isWritable: true },
    lmTokenMintMetadata: {
      value: input.lmTokenMintMetadata ?? null,
      isWritable: true,
    },
    vestRegistry: { value: input.vestRegistry ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    mplTokenMetadataProgram: {
      value: input.mplTokenMetadataProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    sysvarInstructions: {
      value: input.sysvarInstructions ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.mplTokenMetadataProgram.value) {
    accounts.mplTokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.sysvarInstructions.value) {
    accounts.sysvarInstructions.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.lmTokenTreasury),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.lmTokenMint),
      getAccountMeta(accounts.lmTokenMintMetadata),
      getAccountMeta(accounts.vestRegistry),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.mplTokenMetadataProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.sysvarInstructions),
    ],
    programAddress,
    data: getMintAllLmTokensInstructionDataEncoder().encode({}),
  } as MintAllLmTokensInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountPayer,
    TAccountLmTokenTreasury,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountLmTokenMint,
    TAccountLmTokenMintMetadata,
    TAccountVestRegistry,
    TAccountTokenProgram,
    TAccountMplTokenMetadataProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountSysvarInstructions
  >;

  return instruction;
}

export type ParsedMintAllLmTokensInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    admin: TAccountMetas[0];
    /** #2 */
    payer: TAccountMetas[1];
    /** #3 */
    lmTokenTreasury: TAccountMetas[2];
    transferAuthority: TAccountMetas[3];
    /** #4 */
    cortex: TAccountMetas[4];
    /** #5 */
    lmTokenMint: TAccountMetas[5];
    /** #6 */
    lmTokenMintMetadata: TAccountMetas[6];
    /** #7 */
    vestRegistry: TAccountMetas[7];
    /** #8 */
    tokenProgram: TAccountMetas[8];
    /** #9 */
    mplTokenMetadataProgram: TAccountMetas[9];
    /** #10 */
    systemProgram: TAccountMetas[10];
    /** #11 */
    associatedTokenProgram: TAccountMetas[11];
    /** #12 */
    sysvarInstructions: TAccountMetas[12];
  };
  data: MintAllLmTokensInstructionData;
};

export function parseMintAllLmTokensInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedMintAllLmTokensInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      payer: getNextAccount(),
      lmTokenTreasury: getNextAccount(),
      transferAuthority: getNextAccount(),
      cortex: getNextAccount(),
      lmTokenMint: getNextAccount(),
      lmTokenMintMetadata: getNextAccount(),
      vestRegistry: getNextAccount(),
      tokenProgram: getNextAccount(),
      mplTokenMetadataProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      sysvarInstructions: getNextAccount(),
    },
    data: getMintAllLmTokensInstructionDataDecoder().decode(instruction.data),
  };
}
