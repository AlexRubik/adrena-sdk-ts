/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getChaosLabsBatchPricesDecoder,
  getChaosLabsBatchPricesEncoder,
  type ChaosLabsBatchPrices,
  type ChaosLabsBatchPricesArgs,
} from '../types';

export const GET_POOL_INFO_SNAPSHOT_DISCRIMINATOR = new Uint8Array([
  115, 34, 247, 123, 65, 121, 105, 116,
]);

export function getGetPoolInfoSnapshotDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GET_POOL_INFO_SNAPSHOT_DISCRIMINATOR
  );
}

export type GetPoolInfoSnapshotInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountLpTokenMint extends string | IAccountMeta<string> = string,
  TAccountOracle extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountCortex extends string
        ? ReadonlyAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountLpTokenMint extends string
        ? ReadonlyAccount<TAccountLpTokenMint>
        : TAccountLpTokenMint,
      TAccountOracle extends string
        ? WritableAccount<TAccountOracle>
        : TAccountOracle,
      ...TRemainingAccounts,
    ]
  >;

export type GetPoolInfoSnapshotInstructionData = {
  discriminator: ReadonlyUint8Array;
  oraclePrices: Option<ChaosLabsBatchPrices>;
};

export type GetPoolInfoSnapshotInstructionDataArgs = {
  oraclePrices: OptionOrNullable<ChaosLabsBatchPricesArgs>;
};

export function getGetPoolInfoSnapshotInstructionDataEncoder(): Encoder<GetPoolInfoSnapshotInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['oraclePrices', getOptionEncoder(getChaosLabsBatchPricesEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: GET_POOL_INFO_SNAPSHOT_DISCRIMINATOR,
    })
  );
}

export function getGetPoolInfoSnapshotInstructionDataDecoder(): Decoder<GetPoolInfoSnapshotInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['oraclePrices', getOptionDecoder(getChaosLabsBatchPricesDecoder())],
  ]);
}

export function getGetPoolInfoSnapshotInstructionDataCodec(): Codec<
  GetPoolInfoSnapshotInstructionDataArgs,
  GetPoolInfoSnapshotInstructionData
> {
  return combineCodec(
    getGetPoolInfoSnapshotInstructionDataEncoder(),
    getGetPoolInfoSnapshotInstructionDataDecoder()
  );
}

export type GetPoolInfoSnapshotInput<
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountLpTokenMint extends string = string,
  TAccountOracle extends string = string,
> = {
  /** #1 */
  cortex: Address<TAccountCortex>;
  /** #2 */
  pool: Address<TAccountPool>;
  /** #3 */
  lpTokenMint: Address<TAccountLpTokenMint>;
  /** #4 */
  oracle: Address<TAccountOracle>;
  oraclePrices: GetPoolInfoSnapshotInstructionDataArgs['oraclePrices'];
};

export function getGetPoolInfoSnapshotInstruction<
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountLpTokenMint extends string,
  TAccountOracle extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: GetPoolInfoSnapshotInput<
    TAccountCortex,
    TAccountPool,
    TAccountLpTokenMint,
    TAccountOracle
  >,
  config?: { programAddress?: TProgramAddress }
): GetPoolInfoSnapshotInstruction<
  TProgramAddress,
  TAccountCortex,
  TAccountPool,
  TAccountLpTokenMint,
  TAccountOracle
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    cortex: { value: input.cortex ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    lpTokenMint: { value: input.lpTokenMint ?? null, isWritable: false },
    oracle: { value: input.oracle ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.lpTokenMint),
      getAccountMeta(accounts.oracle),
    ],
    programAddress,
    data: getGetPoolInfoSnapshotInstructionDataEncoder().encode(
      args as GetPoolInfoSnapshotInstructionDataArgs
    ),
  } as GetPoolInfoSnapshotInstruction<
    TProgramAddress,
    TAccountCortex,
    TAccountPool,
    TAccountLpTokenMint,
    TAccountOracle
  >;

  return instruction;
}

export type ParsedGetPoolInfoSnapshotInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    cortex: TAccountMetas[0];
    /** #2 */
    pool: TAccountMetas[1];
    /** #3 */
    lpTokenMint: TAccountMetas[2];
    /** #4 */
    oracle: TAccountMetas[3];
  };
  data: GetPoolInfoSnapshotInstructionData;
};

export function parseGetPoolInfoSnapshotInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedGetPoolInfoSnapshotInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      cortex: getNextAccount(),
      pool: getNextAccount(),
      lpTokenMint: getNextAccount(),
      oracle: getNextAccount(),
    },
    data: getGetPoolInfoSnapshotInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
