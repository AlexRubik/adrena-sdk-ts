/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getChaosLabsBatchPricesDecoder,
  getChaosLabsBatchPricesEncoder,
  type ChaosLabsBatchPrices,
  type ChaosLabsBatchPricesArgs,
} from '../types';

export const REMOVE_LIQUIDITY_DISCRIMINATOR = new Uint8Array([
  80, 85, 209, 72, 24, 206, 177, 108,
]);

export function getRemoveLiquidityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REMOVE_LIQUIDITY_DISCRIMINATOR
  );
}

export type RemoveLiquidityInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountReceivingAccount extends string | IAccountMeta<string> = string,
  TAccountLpTokenAccount extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountCustody extends string | IAccountMeta<string> = string,
  TAccountOracle extends string | IAccountMeta<string> = string,
  TAccountCustodyTokenAccount extends string | IAccountMeta<string> = string,
  TAccountLpTokenMint extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAdrenaProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountReceivingAccount extends string
        ? WritableAccount<TAccountReceivingAccount>
        : TAccountReceivingAccount,
      TAccountLpTokenAccount extends string
        ? WritableAccount<TAccountLpTokenAccount>
        : TAccountLpTokenAccount,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountCustody extends string
        ? WritableAccount<TAccountCustody>
        : TAccountCustody,
      TAccountOracle extends string
        ? WritableAccount<TAccountOracle>
        : TAccountOracle,
      TAccountCustodyTokenAccount extends string
        ? WritableAccount<TAccountCustodyTokenAccount>
        : TAccountCustodyTokenAccount,
      TAccountLpTokenMint extends string
        ? WritableAccount<TAccountLpTokenMint>
        : TAccountLpTokenMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAdrenaProgram extends string
        ? ReadonlyAccount<TAccountAdrenaProgram>
        : TAccountAdrenaProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RemoveLiquidityInstructionData = {
  discriminator: ReadonlyUint8Array;
  lpAmountIn: bigint;
  minAmountOut: bigint;
  oraclePrices: Option<ChaosLabsBatchPrices>;
};

export type RemoveLiquidityInstructionDataArgs = {
  lpAmountIn: number | bigint;
  minAmountOut: number | bigint;
  oraclePrices: OptionOrNullable<ChaosLabsBatchPricesArgs>;
};

export function getRemoveLiquidityInstructionDataEncoder(): Encoder<RemoveLiquidityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['lpAmountIn', getU64Encoder()],
      ['minAmountOut', getU64Encoder()],
      ['oraclePrices', getOptionEncoder(getChaosLabsBatchPricesEncoder())],
    ]),
    (value) => ({ ...value, discriminator: REMOVE_LIQUIDITY_DISCRIMINATOR })
  );
}

export function getRemoveLiquidityInstructionDataDecoder(): Decoder<RemoveLiquidityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['lpAmountIn', getU64Decoder()],
    ['minAmountOut', getU64Decoder()],
    ['oraclePrices', getOptionDecoder(getChaosLabsBatchPricesDecoder())],
  ]);
}

export function getRemoveLiquidityInstructionDataCodec(): Codec<
  RemoveLiquidityInstructionDataArgs,
  RemoveLiquidityInstructionData
> {
  return combineCodec(
    getRemoveLiquidityInstructionDataEncoder(),
    getRemoveLiquidityInstructionDataDecoder()
  );
}

export type RemoveLiquidityInput<
  TAccountOwner extends string = string,
  TAccountReceivingAccount extends string = string,
  TAccountLpTokenAccount extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountCustody extends string = string,
  TAccountOracle extends string = string,
  TAccountCustodyTokenAccount extends string = string,
  TAccountLpTokenMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAdrenaProgram extends string = string,
> = {
  /** #1 */
  owner: TransactionSigner<TAccountOwner>;
  /** #2 Front end will target the owner account, but not limited to */
  receivingAccount: Address<TAccountReceivingAccount>;
  /** #3 */
  lpTokenAccount: Address<TAccountLpTokenAccount>;
  /** #4 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #5 */
  cortex: Address<TAccountCortex>;
  /** #6 */
  pool: Address<TAccountPool>;
  /** #7 */
  custody: Address<TAccountCustody>;
  /** #8 */
  oracle: Address<TAccountOracle>;
  /** #9 */
  custodyTokenAccount: Address<TAccountCustodyTokenAccount>;
  /** #10 */
  lpTokenMint: Address<TAccountLpTokenMint>;
  /** #11 */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** #12 */
  adrenaProgram: Address<TAccountAdrenaProgram>;
  lpAmountIn: RemoveLiquidityInstructionDataArgs['lpAmountIn'];
  minAmountOut: RemoveLiquidityInstructionDataArgs['minAmountOut'];
  oraclePrices: RemoveLiquidityInstructionDataArgs['oraclePrices'];
};

export function getRemoveLiquidityInstruction<
  TAccountOwner extends string,
  TAccountReceivingAccount extends string,
  TAccountLpTokenAccount extends string,
  TAccountTransferAuthority extends string,
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountCustody extends string,
  TAccountOracle extends string,
  TAccountCustodyTokenAccount extends string,
  TAccountLpTokenMint extends string,
  TAccountTokenProgram extends string,
  TAccountAdrenaProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: RemoveLiquidityInput<
    TAccountOwner,
    TAccountReceivingAccount,
    TAccountLpTokenAccount,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountPool,
    TAccountCustody,
    TAccountOracle,
    TAccountCustodyTokenAccount,
    TAccountLpTokenMint,
    TAccountTokenProgram,
    TAccountAdrenaProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RemoveLiquidityInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountReceivingAccount,
  TAccountLpTokenAccount,
  TAccountTransferAuthority,
  TAccountCortex,
  TAccountPool,
  TAccountCustody,
  TAccountOracle,
  TAccountCustodyTokenAccount,
  TAccountLpTokenMint,
  TAccountTokenProgram,
  TAccountAdrenaProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    receivingAccount: {
      value: input.receivingAccount ?? null,
      isWritable: true,
    },
    lpTokenAccount: { value: input.lpTokenAccount ?? null, isWritable: true },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    cortex: { value: input.cortex ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    custody: { value: input.custody ?? null, isWritable: true },
    oracle: { value: input.oracle ?? null, isWritable: true },
    custodyTokenAccount: {
      value: input.custodyTokenAccount ?? null,
      isWritable: true,
    },
    lpTokenMint: { value: input.lpTokenMint ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    adrenaProgram: { value: input.adrenaProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.receivingAccount),
      getAccountMeta(accounts.lpTokenAccount),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.custody),
      getAccountMeta(accounts.oracle),
      getAccountMeta(accounts.custodyTokenAccount),
      getAccountMeta(accounts.lpTokenMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.adrenaProgram),
    ],
    programAddress,
    data: getRemoveLiquidityInstructionDataEncoder().encode(
      args as RemoveLiquidityInstructionDataArgs
    ),
  } as RemoveLiquidityInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountReceivingAccount,
    TAccountLpTokenAccount,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountPool,
    TAccountCustody,
    TAccountOracle,
    TAccountCustodyTokenAccount,
    TAccountLpTokenMint,
    TAccountTokenProgram,
    TAccountAdrenaProgram
  >;

  return instruction;
}

export type ParsedRemoveLiquidityInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    owner: TAccountMetas[0];
    /** #2 Front end will target the owner account, but not limited to */
    receivingAccount: TAccountMetas[1];
    /** #3 */
    lpTokenAccount: TAccountMetas[2];
    /** #4 */
    transferAuthority: TAccountMetas[3];
    /** #5 */
    cortex: TAccountMetas[4];
    /** #6 */
    pool: TAccountMetas[5];
    /** #7 */
    custody: TAccountMetas[6];
    /** #8 */
    oracle: TAccountMetas[7];
    /** #9 */
    custodyTokenAccount: TAccountMetas[8];
    /** #10 */
    lpTokenMint: TAccountMetas[9];
    /** #11 */
    tokenProgram: TAccountMetas[10];
    /** #12 */
    adrenaProgram: TAccountMetas[11];
  };
  data: RemoveLiquidityInstructionData;
};

export function parseRemoveLiquidityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRemoveLiquidityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      receivingAccount: getNextAccount(),
      lpTokenAccount: getNextAccount(),
      transferAuthority: getNextAccount(),
      cortex: getNextAccount(),
      pool: getNextAccount(),
      custody: getNextAccount(),
      oracle: getNextAccount(),
      custodyTokenAccount: getNextAccount(),
      lpTokenMint: getNextAccount(),
      tokenProgram: getNextAccount(),
      adrenaProgram: getNextAccount(),
    },
    data: getRemoveLiquidityInstructionDataDecoder().decode(instruction.data),
  };
}
