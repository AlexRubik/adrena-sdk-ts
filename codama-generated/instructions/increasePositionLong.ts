/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getChaosLabsBatchPricesDecoder,
  getChaosLabsBatchPricesEncoder,
  type ChaosLabsBatchPrices,
  type ChaosLabsBatchPricesArgs,
} from '../types';

export const INCREASE_POSITION_LONG_DISCRIMINATOR = new Uint8Array([
  253, 45, 99, 159, 1, 124, 132, 43,
]);

export function getIncreasePositionLongDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INCREASE_POSITION_LONG_DISCRIMINATOR
  );
}

export type IncreasePositionLongInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountCaller extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountFundingAccount extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountPosition extends string | IAccountMeta<string> = string,
  TAccountCustody extends string | IAccountMeta<string> = string,
  TAccountCustodyTokenAccount extends string | IAccountMeta<string> = string,
  TAccountOracle extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAdrenaProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountCaller extends string
        ? ReadonlySignerAccount<TAccountCaller> &
            IAccountSignerMeta<TAccountCaller>
        : TAccountCaller,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountFundingAccount extends string
        ? WritableAccount<TAccountFundingAccount>
        : TAccountFundingAccount,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountCustody extends string
        ? WritableAccount<TAccountCustody>
        : TAccountCustody,
      TAccountCustodyTokenAccount extends string
        ? WritableAccount<TAccountCustodyTokenAccount>
        : TAccountCustodyTokenAccount,
      TAccountOracle extends string
        ? WritableAccount<TAccountOracle>
        : TAccountOracle,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAdrenaProgram extends string
        ? ReadonlyAccount<TAccountAdrenaProgram>
        : TAccountAdrenaProgram,
      ...TRemainingAccounts,
    ]
  >;

export type IncreasePositionLongInstructionData = {
  discriminator: ReadonlyUint8Array;
  price: bigint;
  collateral: bigint;
  leverage: number;
  oraclePrices: Option<ChaosLabsBatchPrices>;
};

export type IncreasePositionLongInstructionDataArgs = {
  price: number | bigint;
  collateral: number | bigint;
  leverage: number;
  oraclePrices: OptionOrNullable<ChaosLabsBatchPricesArgs>;
};

export function getIncreasePositionLongInstructionDataEncoder(): Encoder<IncreasePositionLongInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['price', getU64Encoder()],
      ['collateral', getU64Encoder()],
      ['leverage', getU32Encoder()],
      ['oraclePrices', getOptionEncoder(getChaosLabsBatchPricesEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: INCREASE_POSITION_LONG_DISCRIMINATOR,
    })
  );
}

export function getIncreasePositionLongInstructionDataDecoder(): Decoder<IncreasePositionLongInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['price', getU64Decoder()],
    ['collateral', getU64Decoder()],
    ['leverage', getU32Decoder()],
    ['oraclePrices', getOptionDecoder(getChaosLabsBatchPricesDecoder())],
  ]);
}

export function getIncreasePositionLongInstructionDataCodec(): Codec<
  IncreasePositionLongInstructionDataArgs,
  IncreasePositionLongInstructionData
> {
  return combineCodec(
    getIncreasePositionLongInstructionDataEncoder(),
    getIncreasePositionLongInstructionDataDecoder()
  );
}

export type IncreasePositionLongInput<
  TAccountOwner extends string = string,
  TAccountCaller extends string = string,
  TAccountPayer extends string = string,
  TAccountFundingAccount extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountPosition extends string = string,
  TAccountCustody extends string = string,
  TAccountCustodyTokenAccount extends string = string,
  TAccountOracle extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAdrenaProgram extends string = string,
> = {
  /**
   * #1 Must be signer or not depending
   * if the caller is the transfer_authority (internal call for limit order) or the owner
   *
   */
  owner: Address<TAccountOwner>;
  /** #2 */
  caller: TransactionSigner<TAccountCaller>;
  /** #3 */
  payer: TransactionSigner<TAccountPayer>;
  /** #4 */
  fundingAccount: Address<TAccountFundingAccount>;
  /** #5 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #6 */
  cortex: Address<TAccountCortex>;
  /** #7 */
  pool: Address<TAccountPool>;
  /** #8 */
  position: Address<TAccountPosition>;
  /** #9 */
  custody: Address<TAccountCustody>;
  /** #10 */
  custodyTokenAccount: Address<TAccountCustodyTokenAccount>;
  /** #11 */
  oracle: Address<TAccountOracle>;
  /** #12 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #13 */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** #14 */
  adrenaProgram: Address<TAccountAdrenaProgram>;
  price: IncreasePositionLongInstructionDataArgs['price'];
  collateral: IncreasePositionLongInstructionDataArgs['collateral'];
  leverage: IncreasePositionLongInstructionDataArgs['leverage'];
  oraclePrices: IncreasePositionLongInstructionDataArgs['oraclePrices'];
};

export function getIncreasePositionLongInstruction<
  TAccountOwner extends string,
  TAccountCaller extends string,
  TAccountPayer extends string,
  TAccountFundingAccount extends string,
  TAccountTransferAuthority extends string,
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountPosition extends string,
  TAccountCustody extends string,
  TAccountCustodyTokenAccount extends string,
  TAccountOracle extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAdrenaProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: IncreasePositionLongInput<
    TAccountOwner,
    TAccountCaller,
    TAccountPayer,
    TAccountFundingAccount,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountPool,
    TAccountPosition,
    TAccountCustody,
    TAccountCustodyTokenAccount,
    TAccountOracle,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAdrenaProgram
  >,
  config?: { programAddress?: TProgramAddress }
): IncreasePositionLongInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountCaller,
  TAccountPayer,
  TAccountFundingAccount,
  TAccountTransferAuthority,
  TAccountCortex,
  TAccountPool,
  TAccountPosition,
  TAccountCustody,
  TAccountCustodyTokenAccount,
  TAccountOracle,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAdrenaProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    caller: { value: input.caller ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    fundingAccount: { value: input.fundingAccount ?? null, isWritable: true },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    cortex: { value: input.cortex ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: true },
    custody: { value: input.custody ?? null, isWritable: true },
    custodyTokenAccount: {
      value: input.custodyTokenAccount ?? null,
      isWritable: true,
    },
    oracle: { value: input.oracle ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    adrenaProgram: { value: input.adrenaProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.caller),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.fundingAccount),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.custody),
      getAccountMeta(accounts.custodyTokenAccount),
      getAccountMeta(accounts.oracle),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.adrenaProgram),
    ],
    programAddress,
    data: getIncreasePositionLongInstructionDataEncoder().encode(
      args as IncreasePositionLongInstructionDataArgs
    ),
  } as IncreasePositionLongInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountCaller,
    TAccountPayer,
    TAccountFundingAccount,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountPool,
    TAccountPosition,
    TAccountCustody,
    TAccountCustodyTokenAccount,
    TAccountOracle,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAdrenaProgram
  >;

  return instruction;
}

export type ParsedIncreasePositionLongInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * #1 Must be signer or not depending
     * if the caller is the transfer_authority (internal call for limit order) or the owner
     *
     */

    owner: TAccountMetas[0];
    /** #2 */
    caller: TAccountMetas[1];
    /** #3 */
    payer: TAccountMetas[2];
    /** #4 */
    fundingAccount: TAccountMetas[3];
    /** #5 */
    transferAuthority: TAccountMetas[4];
    /** #6 */
    cortex: TAccountMetas[5];
    /** #7 */
    pool: TAccountMetas[6];
    /** #8 */
    position: TAccountMetas[7];
    /** #9 */
    custody: TAccountMetas[8];
    /** #10 */
    custodyTokenAccount: TAccountMetas[9];
    /** #11 */
    oracle: TAccountMetas[10];
    /** #12 */
    systemProgram: TAccountMetas[11];
    /** #13 */
    tokenProgram: TAccountMetas[12];
    /** #14 */
    adrenaProgram: TAccountMetas[13];
  };
  data: IncreasePositionLongInstructionData;
};

export function parseIncreasePositionLongInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedIncreasePositionLongInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      caller: getNextAccount(),
      payer: getNextAccount(),
      fundingAccount: getNextAccount(),
      transferAuthority: getNextAccount(),
      cortex: getNextAccount(),
      pool: getNextAccount(),
      position: getNextAccount(),
      custody: getNextAccount(),
      custodyTokenAccount: getNextAccount(),
      oracle: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      adrenaProgram: getNextAccount(),
    },
    data: getIncreasePositionLongInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
