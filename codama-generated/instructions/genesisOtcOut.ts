/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const GENESIS_OTC_OUT_DISCRIMINATOR = new Uint8Array([
  144, 79, 164, 22, 19, 189, 28, 99,
]);

export function getGenesisOtcOutDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GENESIS_OTC_OUT_DISCRIMINATOR
  );
}

export type GenesisOtcOutInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountDaoReceivingAccount extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountCustodyUsdc extends string | IAccountMeta<string> = string,
  TAccountCustodyUsdcTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountGenesisLock extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountDaoReceivingAccount extends string
        ? WritableAccount<TAccountDaoReceivingAccount>
        : TAccountDaoReceivingAccount,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountCortex extends string
        ? ReadonlyAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountCustodyUsdc extends string
        ? WritableAccount<TAccountCustodyUsdc>
        : TAccountCustodyUsdc,
      TAccountCustodyUsdcTokenAccount extends string
        ? WritableAccount<TAccountCustodyUsdcTokenAccount>
        : TAccountCustodyUsdcTokenAccount,
      TAccountGenesisLock extends string
        ? WritableAccount<TAccountGenesisLock>
        : TAccountGenesisLock,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type GenesisOtcOutInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type GenesisOtcOutInstructionDataArgs = {};

export function getGenesisOtcOutInstructionDataEncoder(): Encoder<GenesisOtcOutInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: GENESIS_OTC_OUT_DISCRIMINATOR })
  );
}

export function getGenesisOtcOutInstructionDataDecoder(): Decoder<GenesisOtcOutInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getGenesisOtcOutInstructionDataCodec(): Codec<
  GenesisOtcOutInstructionDataArgs,
  GenesisOtcOutInstructionData
> {
  return combineCodec(
    getGenesisOtcOutInstructionDataEncoder(),
    getGenesisOtcOutInstructionDataDecoder()
  );
}

export type GenesisOtcOutInput<
  TAccountAdmin extends string = string,
  TAccountPayer extends string = string,
  TAccountDaoReceivingAccount extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountCustodyUsdc extends string = string,
  TAccountCustodyUsdcTokenAccount extends string = string,
  TAccountGenesisLock extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** #1 */
  admin: TransactionSigner<TAccountAdmin>;
  /** #2 */
  payer: TransactionSigner<TAccountPayer>;
  /** #3 */
  daoReceivingAccount: Address<TAccountDaoReceivingAccount>;
  /** #4 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #5 */
  cortex: Address<TAccountCortex>;
  /** #6 */
  pool: Address<TAccountPool>;
  /** #7 */
  custodyUsdc: Address<TAccountCustodyUsdc>;
  /** #8 */
  custodyUsdcTokenAccount: Address<TAccountCustodyUsdcTokenAccount>;
  /** #9 */
  genesisLock: Address<TAccountGenesisLock>;
  /** #10 */
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getGenesisOtcOutInstruction<
  TAccountAdmin extends string,
  TAccountPayer extends string,
  TAccountDaoReceivingAccount extends string,
  TAccountTransferAuthority extends string,
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountCustodyUsdc extends string,
  TAccountCustodyUsdcTokenAccount extends string,
  TAccountGenesisLock extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: GenesisOtcOutInput<
    TAccountAdmin,
    TAccountPayer,
    TAccountDaoReceivingAccount,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountPool,
    TAccountCustodyUsdc,
    TAccountCustodyUsdcTokenAccount,
    TAccountGenesisLock,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): GenesisOtcOutInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountPayer,
  TAccountDaoReceivingAccount,
  TAccountTransferAuthority,
  TAccountCortex,
  TAccountPool,
  TAccountCustodyUsdc,
  TAccountCustodyUsdcTokenAccount,
  TAccountGenesisLock,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    daoReceivingAccount: {
      value: input.daoReceivingAccount ?? null,
      isWritable: true,
    },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    cortex: { value: input.cortex ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: false },
    custodyUsdc: { value: input.custodyUsdc ?? null, isWritable: true },
    custodyUsdcTokenAccount: {
      value: input.custodyUsdcTokenAccount ?? null,
      isWritable: true,
    },
    genesisLock: { value: input.genesisLock ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.daoReceivingAccount),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.custodyUsdc),
      getAccountMeta(accounts.custodyUsdcTokenAccount),
      getAccountMeta(accounts.genesisLock),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getGenesisOtcOutInstructionDataEncoder().encode({}),
  } as GenesisOtcOutInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountPayer,
    TAccountDaoReceivingAccount,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountPool,
    TAccountCustodyUsdc,
    TAccountCustodyUsdcTokenAccount,
    TAccountGenesisLock,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedGenesisOtcOutInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    admin: TAccountMetas[0];
    /** #2 */
    payer: TAccountMetas[1];
    /** #3 */
    daoReceivingAccount: TAccountMetas[2];
    /** #4 */
    transferAuthority: TAccountMetas[3];
    /** #5 */
    cortex: TAccountMetas[4];
    /** #6 */
    pool: TAccountMetas[5];
    /** #7 */
    custodyUsdc: TAccountMetas[6];
    /** #8 */
    custodyUsdcTokenAccount: TAccountMetas[7];
    /** #9 */
    genesisLock: TAccountMetas[8];
    /** #10 */
    tokenProgram: TAccountMetas[9];
  };
  data: GenesisOtcOutInstructionData;
};

export function parseGenesisOtcOutInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedGenesisOtcOutInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      payer: getNextAccount(),
      daoReceivingAccount: getNextAccount(),
      transferAuthority: getNextAccount(),
      cortex: getNextAccount(),
      pool: getNextAccount(),
      custodyUsdc: getNextAccount(),
      custodyUsdcTokenAccount: getNextAccount(),
      genesisLock: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getGenesisOtcOutInstructionDataDecoder().decode(instruction.data),
  };
}
