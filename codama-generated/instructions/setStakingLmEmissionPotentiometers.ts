/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_STAKING_LM_EMISSION_POTENTIOMETERS_DISCRIMINATOR =
  new Uint8Array([254, 56, 180, 137, 121, 53, 128, 13]);

export function getSetStakingLmEmissionPotentiometersDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_STAKING_LM_EMISSION_POTENTIOMETERS_DISCRIMINATOR
  );
}

export type SetStakingLmEmissionPotentiometersInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountStaking extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountCortex extends string
        ? ReadonlyAccount<TAccountCortex>
        : TAccountCortex,
      TAccountStaking extends string
        ? WritableAccount<TAccountStaking>
        : TAccountStaking,
      ...TRemainingAccounts,
    ]
  >;

export type SetStakingLmEmissionPotentiometersInstructionData = {
  discriminator: ReadonlyUint8Array;
  lmEmissionPotentiometerBps: number;
};

export type SetStakingLmEmissionPotentiometersInstructionDataArgs = {
  lmEmissionPotentiometerBps: number;
};

export function getSetStakingLmEmissionPotentiometersInstructionDataEncoder(): Encoder<SetStakingLmEmissionPotentiometersInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['lmEmissionPotentiometerBps', getU16Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_STAKING_LM_EMISSION_POTENTIOMETERS_DISCRIMINATOR,
    })
  );
}

export function getSetStakingLmEmissionPotentiometersInstructionDataDecoder(): Decoder<SetStakingLmEmissionPotentiometersInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['lmEmissionPotentiometerBps', getU16Decoder()],
  ]);
}

export function getSetStakingLmEmissionPotentiometersInstructionDataCodec(): Codec<
  SetStakingLmEmissionPotentiometersInstructionDataArgs,
  SetStakingLmEmissionPotentiometersInstructionData
> {
  return combineCodec(
    getSetStakingLmEmissionPotentiometersInstructionDataEncoder(),
    getSetStakingLmEmissionPotentiometersInstructionDataDecoder()
  );
}

export type SetStakingLmEmissionPotentiometersInput<
  TAccountAdmin extends string = string,
  TAccountCortex extends string = string,
  TAccountStaking extends string = string,
> = {
  /** #1 */
  admin: TransactionSigner<TAccountAdmin>;
  /** #2 */
  cortex: Address<TAccountCortex>;
  /** #3 */
  staking: Address<TAccountStaking>;
  lmEmissionPotentiometerBps: SetStakingLmEmissionPotentiometersInstructionDataArgs['lmEmissionPotentiometerBps'];
};

export function getSetStakingLmEmissionPotentiometersInstruction<
  TAccountAdmin extends string,
  TAccountCortex extends string,
  TAccountStaking extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: SetStakingLmEmissionPotentiometersInput<
    TAccountAdmin,
    TAccountCortex,
    TAccountStaking
  >,
  config?: { programAddress?: TProgramAddress }
): SetStakingLmEmissionPotentiometersInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountCortex,
  TAccountStaking
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    cortex: { value: input.cortex ?? null, isWritable: false },
    staking: { value: input.staking ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.staking),
    ],
    programAddress,
    data: getSetStakingLmEmissionPotentiometersInstructionDataEncoder().encode(
      args as SetStakingLmEmissionPotentiometersInstructionDataArgs
    ),
  } as SetStakingLmEmissionPotentiometersInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountCortex,
    TAccountStaking
  >;

  return instruction;
}

export type ParsedSetStakingLmEmissionPotentiometersInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    admin: TAccountMetas[0];
    /** #2 */
    cortex: TAccountMetas[1];
    /** #3 */
    staking: TAccountMetas[2];
  };
  data: SetStakingLmEmissionPotentiometersInstructionData;
};

export function parseSetStakingLmEmissionPotentiometersInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetStakingLmEmissionPotentiometersInstruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      cortex: getNextAccount(),
      staking: getNextAccount(),
    },
    data: getSetStakingLmEmissionPotentiometersInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
