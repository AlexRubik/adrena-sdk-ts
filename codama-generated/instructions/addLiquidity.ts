/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getChaosLabsBatchPricesDecoder,
  getChaosLabsBatchPricesEncoder,
  type ChaosLabsBatchPrices,
  type ChaosLabsBatchPricesArgs,
} from '../types';

export const ADD_LIQUIDITY_DISCRIMINATOR = new Uint8Array([
  181, 157, 89, 67, 143, 182, 52, 72,
]);

export function getAddLiquidityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_LIQUIDITY_DISCRIMINATOR
  );
}

export type AddLiquidityInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountFundingAccount extends string | IAccountMeta<string> = string,
  TAccountLpTokenAccount extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountLpStaking extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountCustody extends string | IAccountMeta<string> = string,
  TAccountOracle extends string | IAccountMeta<string> = string,
  TAccountCustodyTokenAccount extends string | IAccountMeta<string> = string,
  TAccountLpTokenMint extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAdrenaProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountFundingAccount extends string
        ? WritableAccount<TAccountFundingAccount>
        : TAccountFundingAccount,
      TAccountLpTokenAccount extends string
        ? WritableAccount<TAccountLpTokenAccount>
        : TAccountLpTokenAccount,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountLpStaking extends string
        ? WritableAccount<TAccountLpStaking>
        : TAccountLpStaking,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountCustody extends string
        ? WritableAccount<TAccountCustody>
        : TAccountCustody,
      TAccountOracle extends string
        ? WritableAccount<TAccountOracle>
        : TAccountOracle,
      TAccountCustodyTokenAccount extends string
        ? WritableAccount<TAccountCustodyTokenAccount>
        : TAccountCustodyTokenAccount,
      TAccountLpTokenMint extends string
        ? WritableAccount<TAccountLpTokenMint>
        : TAccountLpTokenMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAdrenaProgram extends string
        ? ReadonlyAccount<TAccountAdrenaProgram>
        : TAccountAdrenaProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AddLiquidityInstructionData = {
  discriminator: ReadonlyUint8Array;
  amountIn: bigint;
  minLpAmountOut: bigint;
  oraclePrices: Option<ChaosLabsBatchPrices>;
};

export type AddLiquidityInstructionDataArgs = {
  amountIn: number | bigint;
  minLpAmountOut: number | bigint;
  oraclePrices: OptionOrNullable<ChaosLabsBatchPricesArgs>;
};

export function getAddLiquidityInstructionDataEncoder(): Encoder<AddLiquidityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amountIn', getU64Encoder()],
      ['minLpAmountOut', getU64Encoder()],
      ['oraclePrices', getOptionEncoder(getChaosLabsBatchPricesEncoder())],
    ]),
    (value) => ({ ...value, discriminator: ADD_LIQUIDITY_DISCRIMINATOR })
  );
}

export function getAddLiquidityInstructionDataDecoder(): Decoder<AddLiquidityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amountIn', getU64Decoder()],
    ['minLpAmountOut', getU64Decoder()],
    ['oraclePrices', getOptionDecoder(getChaosLabsBatchPricesDecoder())],
  ]);
}

export function getAddLiquidityInstructionDataCodec(): Codec<
  AddLiquidityInstructionDataArgs,
  AddLiquidityInstructionData
> {
  return combineCodec(
    getAddLiquidityInstructionDataEncoder(),
    getAddLiquidityInstructionDataDecoder()
  );
}

export type AddLiquidityInput<
  TAccountOwner extends string = string,
  TAccountFundingAccount extends string = string,
  TAccountLpTokenAccount extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountLpStaking extends string = string,
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountCustody extends string = string,
  TAccountOracle extends string = string,
  TAccountCustodyTokenAccount extends string = string,
  TAccountLpTokenMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAdrenaProgram extends string = string,
> = {
  /** #1 */
  owner: TransactionSigner<TAccountOwner>;
  /** #2 */
  fundingAccount: Address<TAccountFundingAccount>;
  /** #3 Front end will target the owner account, but not limited to */
  lpTokenAccount: Address<TAccountLpTokenAccount>;
  /** #4 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #5 */
  lpStaking: Address<TAccountLpStaking>;
  /** #6 */
  cortex: Address<TAccountCortex>;
  /** #7 */
  pool: Address<TAccountPool>;
  /** #8 */
  custody: Address<TAccountCustody>;
  /** #9 */
  oracle: Address<TAccountOracle>;
  /** #10 */
  custodyTokenAccount: Address<TAccountCustodyTokenAccount>;
  /** #11 */
  lpTokenMint: Address<TAccountLpTokenMint>;
  /** #12 */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** #13 */
  adrenaProgram: Address<TAccountAdrenaProgram>;
  amountIn: AddLiquidityInstructionDataArgs['amountIn'];
  minLpAmountOut: AddLiquidityInstructionDataArgs['minLpAmountOut'];
  oraclePrices: AddLiquidityInstructionDataArgs['oraclePrices'];
};

export function getAddLiquidityInstruction<
  TAccountOwner extends string,
  TAccountFundingAccount extends string,
  TAccountLpTokenAccount extends string,
  TAccountTransferAuthority extends string,
  TAccountLpStaking extends string,
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountCustody extends string,
  TAccountOracle extends string,
  TAccountCustodyTokenAccount extends string,
  TAccountLpTokenMint extends string,
  TAccountTokenProgram extends string,
  TAccountAdrenaProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: AddLiquidityInput<
    TAccountOwner,
    TAccountFundingAccount,
    TAccountLpTokenAccount,
    TAccountTransferAuthority,
    TAccountLpStaking,
    TAccountCortex,
    TAccountPool,
    TAccountCustody,
    TAccountOracle,
    TAccountCustodyTokenAccount,
    TAccountLpTokenMint,
    TAccountTokenProgram,
    TAccountAdrenaProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AddLiquidityInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountFundingAccount,
  TAccountLpTokenAccount,
  TAccountTransferAuthority,
  TAccountLpStaking,
  TAccountCortex,
  TAccountPool,
  TAccountCustody,
  TAccountOracle,
  TAccountCustodyTokenAccount,
  TAccountLpTokenMint,
  TAccountTokenProgram,
  TAccountAdrenaProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    fundingAccount: { value: input.fundingAccount ?? null, isWritable: true },
    lpTokenAccount: { value: input.lpTokenAccount ?? null, isWritable: true },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    lpStaking: { value: input.lpStaking ?? null, isWritable: true },
    cortex: { value: input.cortex ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    custody: { value: input.custody ?? null, isWritable: true },
    oracle: { value: input.oracle ?? null, isWritable: true },
    custodyTokenAccount: {
      value: input.custodyTokenAccount ?? null,
      isWritable: true,
    },
    lpTokenMint: { value: input.lpTokenMint ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    adrenaProgram: { value: input.adrenaProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.fundingAccount),
      getAccountMeta(accounts.lpTokenAccount),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.lpStaking),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.custody),
      getAccountMeta(accounts.oracle),
      getAccountMeta(accounts.custodyTokenAccount),
      getAccountMeta(accounts.lpTokenMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.adrenaProgram),
    ],
    programAddress,
    data: getAddLiquidityInstructionDataEncoder().encode(
      args as AddLiquidityInstructionDataArgs
    ),
  } as AddLiquidityInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountFundingAccount,
    TAccountLpTokenAccount,
    TAccountTransferAuthority,
    TAccountLpStaking,
    TAccountCortex,
    TAccountPool,
    TAccountCustody,
    TAccountOracle,
    TAccountCustodyTokenAccount,
    TAccountLpTokenMint,
    TAccountTokenProgram,
    TAccountAdrenaProgram
  >;

  return instruction;
}

export type ParsedAddLiquidityInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    owner: TAccountMetas[0];
    /** #2 */
    fundingAccount: TAccountMetas[1];
    /** #3 Front end will target the owner account, but not limited to */
    lpTokenAccount: TAccountMetas[2];
    /** #4 */
    transferAuthority: TAccountMetas[3];
    /** #5 */
    lpStaking: TAccountMetas[4];
    /** #6 */
    cortex: TAccountMetas[5];
    /** #7 */
    pool: TAccountMetas[6];
    /** #8 */
    custody: TAccountMetas[7];
    /** #9 */
    oracle: TAccountMetas[8];
    /** #10 */
    custodyTokenAccount: TAccountMetas[9];
    /** #11 */
    lpTokenMint: TAccountMetas[10];
    /** #12 */
    tokenProgram: TAccountMetas[11];
    /** #13 */
    adrenaProgram: TAccountMetas[12];
  };
  data: AddLiquidityInstructionData;
};

export function parseAddLiquidityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAddLiquidityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      fundingAccount: getNextAccount(),
      lpTokenAccount: getNextAccount(),
      transferAuthority: getNextAccount(),
      lpStaking: getNextAccount(),
      cortex: getNextAccount(),
      pool: getNextAccount(),
      custody: getNextAccount(),
      oracle: getNextAccount(),
      custodyTokenAccount: getNextAccount(),
      lpTokenMint: getNextAccount(),
      tokenProgram: getNextAccount(),
      adrenaProgram: getNextAccount(),
    },
    data: getAddLiquidityInstructionDataDecoder().decode(instruction.data),
  };
}
