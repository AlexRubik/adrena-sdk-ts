/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const GET_ORACLE_PRICE_DISCRIMINATOR = new Uint8Array([
  200, 20, 0, 106, 56, 210, 230, 140,
]);

export function getGetOraclePriceDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GET_ORACLE_PRICE_DISCRIMINATOR
  );
}

export type GetOraclePriceInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountCustody extends string | IAccountMeta<string> = string,
  TAccountCustodyOracle extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountCortex extends string
        ? ReadonlyAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountCustody extends string
        ? ReadonlyAccount<TAccountCustody>
        : TAccountCustody,
      TAccountCustodyOracle extends string
        ? ReadonlyAccount<TAccountCustodyOracle>
        : TAccountCustodyOracle,
      ...TRemainingAccounts,
    ]
  >;

export type GetOraclePriceInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type GetOraclePriceInstructionDataArgs = {};

export function getGetOraclePriceInstructionDataEncoder(): Encoder<GetOraclePriceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: GET_ORACLE_PRICE_DISCRIMINATOR })
  );
}

export function getGetOraclePriceInstructionDataDecoder(): Decoder<GetOraclePriceInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getGetOraclePriceInstructionDataCodec(): Codec<
  GetOraclePriceInstructionDataArgs,
  GetOraclePriceInstructionData
> {
  return combineCodec(
    getGetOraclePriceInstructionDataEncoder(),
    getGetOraclePriceInstructionDataDecoder()
  );
}

export type GetOraclePriceInput<
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountCustody extends string = string,
  TAccountCustodyOracle extends string = string,
> = {
  /** #1 */
  cortex: Address<TAccountCortex>;
  /** #2 */
  pool: Address<TAccountPool>;
  /** #3 */
  custody: Address<TAccountCustody>;
  /** #4 */
  custodyOracle: Address<TAccountCustodyOracle>;
};

export function getGetOraclePriceInstruction<
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountCustody extends string,
  TAccountCustodyOracle extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: GetOraclePriceInput<
    TAccountCortex,
    TAccountPool,
    TAccountCustody,
    TAccountCustodyOracle
  >,
  config?: { programAddress?: TProgramAddress }
): GetOraclePriceInstruction<
  TProgramAddress,
  TAccountCortex,
  TAccountPool,
  TAccountCustody,
  TAccountCustodyOracle
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    cortex: { value: input.cortex ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: false },
    custody: { value: input.custody ?? null, isWritable: false },
    custodyOracle: { value: input.custodyOracle ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.custody),
      getAccountMeta(accounts.custodyOracle),
    ],
    programAddress,
    data: getGetOraclePriceInstructionDataEncoder().encode({}),
  } as GetOraclePriceInstruction<
    TProgramAddress,
    TAccountCortex,
    TAccountPool,
    TAccountCustody,
    TAccountCustodyOracle
  >;

  return instruction;
}

export type ParsedGetOraclePriceInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    cortex: TAccountMetas[0];
    /** #2 */
    pool: TAccountMetas[1];
    /** #3 */
    custody: TAccountMetas[2];
    /** #4 */
    custodyOracle: TAccountMetas[3];
  };
  data: GetOraclePriceInstructionData;
};

export function parseGetOraclePriceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedGetOraclePriceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      cortex: getNextAccount(),
      pool: getNextAccount(),
      custody: getNextAccount(),
      custodyOracle: getNextAccount(),
    },
    data: getGetOraclePriceInstructionDataDecoder().decode(instruction.data),
  };
}
