/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getChaosLabsBatchPricesDecoder,
  getChaosLabsBatchPricesEncoder,
  type ChaosLabsBatchPrices,
  type ChaosLabsBatchPricesArgs,
} from '../types';

export const RESOLVE_POSITION_BORROW_FEES_DISCRIMINATOR = new Uint8Array([
  220, 145, 23, 255, 234, 9, 41, 145,
]);

export function getResolvePositionBorrowFeesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RESOLVE_POSITION_BORROW_FEES_DISCRIMINATOR
  );
}

export type ResolvePositionBorrowFeesInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountPosition extends string | IAccountMeta<string> = string,
  TAccountOracle extends string | IAccountMeta<string> = string,
  TAccountCustody extends string | IAccountMeta<string> = string,
  TAccountCollateralCustody extends string | IAccountMeta<string> = string,
  TAccountUserProfile extends string | IAccountMeta<string> = string,
  TAccountReferrerProfile extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAdrenaProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountCortex extends string
        ? ReadonlyAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountOracle extends string
        ? WritableAccount<TAccountOracle>
        : TAccountOracle,
      TAccountCustody extends string
        ? WritableAccount<TAccountCustody>
        : TAccountCustody,
      TAccountCollateralCustody extends string
        ? WritableAccount<TAccountCollateralCustody>
        : TAccountCollateralCustody,
      TAccountUserProfile extends string
        ? ReadonlyAccount<TAccountUserProfile>
        : TAccountUserProfile,
      TAccountReferrerProfile extends string
        ? WritableAccount<TAccountReferrerProfile>
        : TAccountReferrerProfile,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAdrenaProgram extends string
        ? ReadonlyAccount<TAccountAdrenaProgram>
        : TAccountAdrenaProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ResolvePositionBorrowFeesInstructionData = {
  discriminator: ReadonlyUint8Array;
  oraclePrices: Option<ChaosLabsBatchPrices>;
};

export type ResolvePositionBorrowFeesInstructionDataArgs = {
  oraclePrices: OptionOrNullable<ChaosLabsBatchPricesArgs>;
};

export function getResolvePositionBorrowFeesInstructionDataEncoder(): Encoder<ResolvePositionBorrowFeesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['oraclePrices', getOptionEncoder(getChaosLabsBatchPricesEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: RESOLVE_POSITION_BORROW_FEES_DISCRIMINATOR,
    })
  );
}

export function getResolvePositionBorrowFeesInstructionDataDecoder(): Decoder<ResolvePositionBorrowFeesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['oraclePrices', getOptionDecoder(getChaosLabsBatchPricesDecoder())],
  ]);
}

export function getResolvePositionBorrowFeesInstructionDataCodec(): Codec<
  ResolvePositionBorrowFeesInstructionDataArgs,
  ResolvePositionBorrowFeesInstructionData
> {
  return combineCodec(
    getResolvePositionBorrowFeesInstructionDataEncoder(),
    getResolvePositionBorrowFeesInstructionDataDecoder()
  );
}

export type ResolvePositionBorrowFeesInput<
  TAccountSigner extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountPosition extends string = string,
  TAccountOracle extends string = string,
  TAccountCustody extends string = string,
  TAccountCollateralCustody extends string = string,
  TAccountUserProfile extends string = string,
  TAccountReferrerProfile extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAdrenaProgram extends string = string,
> = {
  /** #1 */
  signer: TransactionSigner<TAccountSigner>;
  /** #2 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #3 */
  cortex: Address<TAccountCortex>;
  /** #4 */
  pool: Address<TAccountPool>;
  /** #5 */
  position: Address<TAccountPosition>;
  /** #6 */
  oracle: Address<TAccountOracle>;
  /** #7 */
  custody: Address<TAccountCustody>;
  /** #8 */
  collateralCustody: Address<TAccountCollateralCustody>;
  /** #9 */
  userProfile?: Address<TAccountUserProfile>;
  /** #10 */
  referrerProfile?: Address<TAccountReferrerProfile>;
  /** #11 */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** #12 */
  adrenaProgram: Address<TAccountAdrenaProgram>;
  oraclePrices: ResolvePositionBorrowFeesInstructionDataArgs['oraclePrices'];
};

export function getResolvePositionBorrowFeesInstruction<
  TAccountSigner extends string,
  TAccountTransferAuthority extends string,
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountPosition extends string,
  TAccountOracle extends string,
  TAccountCustody extends string,
  TAccountCollateralCustody extends string,
  TAccountUserProfile extends string,
  TAccountReferrerProfile extends string,
  TAccountTokenProgram extends string,
  TAccountAdrenaProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: ResolvePositionBorrowFeesInput<
    TAccountSigner,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountPool,
    TAccountPosition,
    TAccountOracle,
    TAccountCustody,
    TAccountCollateralCustody,
    TAccountUserProfile,
    TAccountReferrerProfile,
    TAccountTokenProgram,
    TAccountAdrenaProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ResolvePositionBorrowFeesInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountTransferAuthority,
  TAccountCortex,
  TAccountPool,
  TAccountPosition,
  TAccountOracle,
  TAccountCustody,
  TAccountCollateralCustody,
  TAccountUserProfile,
  TAccountReferrerProfile,
  TAccountTokenProgram,
  TAccountAdrenaProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    cortex: { value: input.cortex ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: true },
    oracle: { value: input.oracle ?? null, isWritable: true },
    custody: { value: input.custody ?? null, isWritable: true },
    collateralCustody: {
      value: input.collateralCustody ?? null,
      isWritable: true,
    },
    userProfile: { value: input.userProfile ?? null, isWritable: false },
    referrerProfile: { value: input.referrerProfile ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    adrenaProgram: { value: input.adrenaProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.oracle),
      getAccountMeta(accounts.custody),
      getAccountMeta(accounts.collateralCustody),
      getAccountMeta(accounts.userProfile),
      getAccountMeta(accounts.referrerProfile),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.adrenaProgram),
    ],
    programAddress,
    data: getResolvePositionBorrowFeesInstructionDataEncoder().encode(
      args as ResolvePositionBorrowFeesInstructionDataArgs
    ),
  } as ResolvePositionBorrowFeesInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountPool,
    TAccountPosition,
    TAccountOracle,
    TAccountCustody,
    TAccountCollateralCustody,
    TAccountUserProfile,
    TAccountReferrerProfile,
    TAccountTokenProgram,
    TAccountAdrenaProgram
  >;

  return instruction;
}

export type ParsedResolvePositionBorrowFeesInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    signer: TAccountMetas[0];
    /** #2 */
    transferAuthority: TAccountMetas[1];
    /** #3 */
    cortex: TAccountMetas[2];
    /** #4 */
    pool: TAccountMetas[3];
    /** #5 */
    position: TAccountMetas[4];
    /** #6 */
    oracle: TAccountMetas[5];
    /** #7 */
    custody: TAccountMetas[6];
    /** #8 */
    collateralCustody: TAccountMetas[7];
    /** #9 */
    userProfile?: TAccountMetas[8] | undefined;
    /** #10 */
    referrerProfile?: TAccountMetas[9] | undefined;
    /** #11 */
    tokenProgram: TAccountMetas[10];
    /** #12 */
    adrenaProgram: TAccountMetas[11];
  };
  data: ResolvePositionBorrowFeesInstructionData;
};

export function parseResolvePositionBorrowFeesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedResolvePositionBorrowFeesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === ADRENA_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      transferAuthority: getNextAccount(),
      cortex: getNextAccount(),
      pool: getNextAccount(),
      position: getNextAccount(),
      oracle: getNextAccount(),
      custody: getNextAccount(),
      collateralCustody: getNextAccount(),
      userProfile: getNextOptionalAccount(),
      referrerProfile: getNextOptionalAccount(),
      tokenProgram: getNextAccount(),
      adrenaProgram: getNextAccount(),
    },
    data: getResolvePositionBorrowFeesInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
