/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const EDIT_USER_PROFILE_NICKNAME_DISCRIMINATOR = new Uint8Array([
  132, 19, 244, 18, 78, 181, 31, 50,
]);

export function getEditUserProfileNicknameDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    EDIT_USER_PROFILE_NICKNAME_DISCRIMINATOR
  );
}

export type EditUserProfileNicknameInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountUserProfile extends string | IAccountMeta<string> = string,
  TAccountFundingAccount extends string | IAccountMeta<string> = string,
  TAccountLmTokenMint extends string | IAccountMeta<string> = string,
  TAccountOldUserNickname extends string | IAccountMeta<string> = string,
  TAccountUserNickname extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountUserProfile extends string
        ? WritableAccount<TAccountUserProfile>
        : TAccountUserProfile,
      TAccountFundingAccount extends string
        ? WritableAccount<TAccountFundingAccount>
        : TAccountFundingAccount,
      TAccountLmTokenMint extends string
        ? WritableAccount<TAccountLmTokenMint>
        : TAccountLmTokenMint,
      TAccountOldUserNickname extends string
        ? WritableAccount<TAccountOldUserNickname>
        : TAccountOldUserNickname,
      TAccountUserNickname extends string
        ? WritableAccount<TAccountUserNickname>
        : TAccountUserNickname,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type EditUserProfileNicknameInstructionData = {
  discriminator: ReadonlyUint8Array;
  nickname: string;
};

export type EditUserProfileNicknameInstructionDataArgs = { nickname: string };

export function getEditUserProfileNicknameInstructionDataEncoder(): Encoder<EditUserProfileNicknameInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['nickname', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: EDIT_USER_PROFILE_NICKNAME_DISCRIMINATOR,
    })
  );
}

export function getEditUserProfileNicknameInstructionDataDecoder(): Decoder<EditUserProfileNicknameInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['nickname', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getEditUserProfileNicknameInstructionDataCodec(): Codec<
  EditUserProfileNicknameInstructionDataArgs,
  EditUserProfileNicknameInstructionData
> {
  return combineCodec(
    getEditUserProfileNicknameInstructionDataEncoder(),
    getEditUserProfileNicknameInstructionDataDecoder()
  );
}

export type EditUserProfileNicknameInput<
  TAccountOwner extends string = string,
  TAccountCortex extends string = string,
  TAccountUserProfile extends string = string,
  TAccountFundingAccount extends string = string,
  TAccountLmTokenMint extends string = string,
  TAccountOldUserNickname extends string = string,
  TAccountUserNickname extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** #1 */
  owner: TransactionSigner<TAccountOwner>;
  /** #2 */
  cortex: Address<TAccountCortex>;
  /** #3 */
  userProfile: Address<TAccountUserProfile>;
  /** #4 */
  fundingAccount: Address<TAccountFundingAccount>;
  /** #5 */
  lmTokenMint: Address<TAccountLmTokenMint>;
  /** #6 */
  oldUserNickname?: Address<TAccountOldUserNickname>;
  /**
   * #7
   * Use PDA to make nicknames unique
   */
  userNickname: Address<TAccountUserNickname>;
  /** #8 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #9 */
  tokenProgram?: Address<TAccountTokenProgram>;
  nickname: EditUserProfileNicknameInstructionDataArgs['nickname'];
};

export function getEditUserProfileNicknameInstruction<
  TAccountOwner extends string,
  TAccountCortex extends string,
  TAccountUserProfile extends string,
  TAccountFundingAccount extends string,
  TAccountLmTokenMint extends string,
  TAccountOldUserNickname extends string,
  TAccountUserNickname extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: EditUserProfileNicknameInput<
    TAccountOwner,
    TAccountCortex,
    TAccountUserProfile,
    TAccountFundingAccount,
    TAccountLmTokenMint,
    TAccountOldUserNickname,
    TAccountUserNickname,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): EditUserProfileNicknameInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountCortex,
  TAccountUserProfile,
  TAccountFundingAccount,
  TAccountLmTokenMint,
  TAccountOldUserNickname,
  TAccountUserNickname,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    cortex: { value: input.cortex ?? null, isWritable: true },
    userProfile: { value: input.userProfile ?? null, isWritable: true },
    fundingAccount: { value: input.fundingAccount ?? null, isWritable: true },
    lmTokenMint: { value: input.lmTokenMint ?? null, isWritable: true },
    oldUserNickname: { value: input.oldUserNickname ?? null, isWritable: true },
    userNickname: { value: input.userNickname ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.userProfile),
      getAccountMeta(accounts.fundingAccount),
      getAccountMeta(accounts.lmTokenMint),
      getAccountMeta(accounts.oldUserNickname),
      getAccountMeta(accounts.userNickname),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getEditUserProfileNicknameInstructionDataEncoder().encode(
      args as EditUserProfileNicknameInstructionDataArgs
    ),
  } as EditUserProfileNicknameInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountCortex,
    TAccountUserProfile,
    TAccountFundingAccount,
    TAccountLmTokenMint,
    TAccountOldUserNickname,
    TAccountUserNickname,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedEditUserProfileNicknameInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    owner: TAccountMetas[0];
    /** #2 */
    cortex: TAccountMetas[1];
    /** #3 */
    userProfile: TAccountMetas[2];
    /** #4 */
    fundingAccount: TAccountMetas[3];
    /** #5 */
    lmTokenMint: TAccountMetas[4];
    /** #6 */
    oldUserNickname?: TAccountMetas[5] | undefined;
    /**
     * #7
     * Use PDA to make nicknames unique
     */

    userNickname: TAccountMetas[6];
    /** #8 */
    systemProgram: TAccountMetas[7];
    /** #9 */
    tokenProgram: TAccountMetas[8];
  };
  data: EditUserProfileNicknameInstructionData;
};

export function parseEditUserProfileNicknameInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedEditUserProfileNicknameInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === ADRENA_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      cortex: getNextAccount(),
      userProfile: getNextAccount(),
      fundingAccount: getNextAccount(),
      lmTokenMint: getNextAccount(),
      oldUserNickname: getNextOptionalAccount(),
      userNickname: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getEditUserProfileNicknameInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
