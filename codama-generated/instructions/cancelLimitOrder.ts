/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CANCEL_LIMIT_ORDER_DISCRIMINATOR = new Uint8Array([
  132, 156, 132, 31, 67, 40, 232, 97,
]);

export function getCancelLimitOrderDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CANCEL_LIMIT_ORDER_DISCRIMINATOR
  );
}

export type CancelLimitOrderInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountReceivingAccount extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountLimitOrderBook extends string | IAccountMeta<string> = string,
  TAccountCollateralEscrow extends string | IAccountMeta<string> = string,
  TAccountCollateralCustodyMint extends string | IAccountMeta<string> = string,
  TAccountCollateralCustody extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountReceivingAccount extends string
        ? WritableAccount<TAccountReceivingAccount>
        : TAccountReceivingAccount,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountCortex extends string
        ? ReadonlyAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountLimitOrderBook extends string
        ? WritableAccount<TAccountLimitOrderBook>
        : TAccountLimitOrderBook,
      TAccountCollateralEscrow extends string
        ? WritableAccount<TAccountCollateralEscrow>
        : TAccountCollateralEscrow,
      TAccountCollateralCustodyMint extends string
        ? ReadonlyAccount<TAccountCollateralCustodyMint>
        : TAccountCollateralCustodyMint,
      TAccountCollateralCustody extends string
        ? ReadonlyAccount<TAccountCollateralCustody>
        : TAccountCollateralCustody,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CancelLimitOrderInstructionData = {
  discriminator: ReadonlyUint8Array;
  id: bigint;
};

export type CancelLimitOrderInstructionDataArgs = { id: number | bigint };

export function getCancelLimitOrderInstructionDataEncoder(): Encoder<CancelLimitOrderInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['id', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CANCEL_LIMIT_ORDER_DISCRIMINATOR })
  );
}

export function getCancelLimitOrderInstructionDataDecoder(): Decoder<CancelLimitOrderInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['id', getU64Decoder()],
  ]);
}

export function getCancelLimitOrderInstructionDataCodec(): Codec<
  CancelLimitOrderInstructionDataArgs,
  CancelLimitOrderInstructionData
> {
  return combineCodec(
    getCancelLimitOrderInstructionDataEncoder(),
    getCancelLimitOrderInstructionDataDecoder()
  );
}

export type CancelLimitOrderInput<
  TAccountOwner extends string = string,
  TAccountReceivingAccount extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountLimitOrderBook extends string = string,
  TAccountCollateralEscrow extends string = string,
  TAccountCollateralCustodyMint extends string = string,
  TAccountCollateralCustody extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  /** #1 */
  owner: TransactionSigner<TAccountOwner>;
  /** #2 */
  receivingAccount: Address<TAccountReceivingAccount>;
  /** #3 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #4 */
  cortex: Address<TAccountCortex>;
  /** #5 */
  pool: Address<TAccountPool>;
  /** #6 */
  limitOrderBook: Address<TAccountLimitOrderBook>;
  /** #7 */
  collateralEscrow: Address<TAccountCollateralEscrow>;
  /** #8 */
  collateralCustodyMint: Address<TAccountCollateralCustodyMint>;
  /** #9 */
  collateralCustody: Address<TAccountCollateralCustody>;
  /** #10 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #11 */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** #12 */
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  id: CancelLimitOrderInstructionDataArgs['id'];
};

export function getCancelLimitOrderInstruction<
  TAccountOwner extends string,
  TAccountReceivingAccount extends string,
  TAccountTransferAuthority extends string,
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountLimitOrderBook extends string,
  TAccountCollateralEscrow extends string,
  TAccountCollateralCustodyMint extends string,
  TAccountCollateralCustody extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: CancelLimitOrderInput<
    TAccountOwner,
    TAccountReceivingAccount,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountPool,
    TAccountLimitOrderBook,
    TAccountCollateralEscrow,
    TAccountCollateralCustodyMint,
    TAccountCollateralCustody,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CancelLimitOrderInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountReceivingAccount,
  TAccountTransferAuthority,
  TAccountCortex,
  TAccountPool,
  TAccountLimitOrderBook,
  TAccountCollateralEscrow,
  TAccountCollateralCustodyMint,
  TAccountCollateralCustody,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    receivingAccount: {
      value: input.receivingAccount ?? null,
      isWritable: true,
    },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    cortex: { value: input.cortex ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: false },
    limitOrderBook: { value: input.limitOrderBook ?? null, isWritable: true },
    collateralEscrow: {
      value: input.collateralEscrow ?? null,
      isWritable: true,
    },
    collateralCustodyMint: {
      value: input.collateralCustodyMint ?? null,
      isWritable: false,
    },
    collateralCustody: {
      value: input.collateralCustody ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.receivingAccount),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.limitOrderBook),
      getAccountMeta(accounts.collateralEscrow),
      getAccountMeta(accounts.collateralCustodyMint),
      getAccountMeta(accounts.collateralCustody),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getCancelLimitOrderInstructionDataEncoder().encode(
      args as CancelLimitOrderInstructionDataArgs
    ),
  } as CancelLimitOrderInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountReceivingAccount,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountPool,
    TAccountLimitOrderBook,
    TAccountCollateralEscrow,
    TAccountCollateralCustodyMint,
    TAccountCollateralCustody,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ParsedCancelLimitOrderInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    owner: TAccountMetas[0];
    /** #2 */
    receivingAccount: TAccountMetas[1];
    /** #3 */
    transferAuthority: TAccountMetas[2];
    /** #4 */
    cortex: TAccountMetas[3];
    /** #5 */
    pool: TAccountMetas[4];
    /** #6 */
    limitOrderBook: TAccountMetas[5];
    /** #7 */
    collateralEscrow: TAccountMetas[6];
    /** #8 */
    collateralCustodyMint: TAccountMetas[7];
    /** #9 */
    collateralCustody: TAccountMetas[8];
    /** #10 */
    systemProgram: TAccountMetas[9];
    /** #11 */
    tokenProgram: TAccountMetas[10];
    /** #12 */
    associatedTokenProgram: TAccountMetas[11];
  };
  data: CancelLimitOrderInstructionData;
};

export function parseCancelLimitOrderInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCancelLimitOrderInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      receivingAccount: getNextAccount(),
      transferAuthority: getNextAccount(),
      cortex: getNextAccount(),
      pool: getNextAccount(),
      limitOrderBook: getNextAccount(),
      collateralEscrow: getNextAccount(),
      collateralCustodyMint: getNextAccount(),
      collateralCustody: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getCancelLimitOrderInstructionDataDecoder().decode(instruction.data),
  };
}
