/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INIT_ONE_CORE_DISCRIMINATOR = new Uint8Array([
  244, 243, 65, 251, 99, 235, 237, 78,
]);

export function getInitOneCoreDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_ONE_CORE_DISCRIMINATOR
  );
}

export type InitOneCoreInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountProtocolFeeRecipient extends string | IAccountMeta<string> = string,
  TAccountFeeRedistributionMint extends string | IAccountMeta<string> = string,
  TAccountLmTokenMint extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTransferAuthority extends string
        ? WritableAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountProtocolFeeRecipient extends string
        ? ReadonlyAccount<TAccountProtocolFeeRecipient>
        : TAccountProtocolFeeRecipient,
      TAccountFeeRedistributionMint extends string
        ? ReadonlyAccount<TAccountFeeRedistributionMint>
        : TAccountFeeRedistributionMint,
      TAccountLmTokenMint extends string
        ? WritableAccount<TAccountLmTokenMint>
        : TAccountLmTokenMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type InitOneCoreInstructionData = {
  discriminator: ReadonlyUint8Array;
  coreContributorBucketAllocation: bigint;
  foundationBucketAllocation: bigint;
  ecosystemBucketAllocation: bigint;
};

export type InitOneCoreInstructionDataArgs = {
  coreContributorBucketAllocation: number | bigint;
  foundationBucketAllocation: number | bigint;
  ecosystemBucketAllocation: number | bigint;
};

export function getInitOneCoreInstructionDataEncoder(): Encoder<InitOneCoreInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['coreContributorBucketAllocation', getU64Encoder()],
      ['foundationBucketAllocation', getU64Encoder()],
      ['ecosystemBucketAllocation', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INIT_ONE_CORE_DISCRIMINATOR })
  );
}

export function getInitOneCoreInstructionDataDecoder(): Decoder<InitOneCoreInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['coreContributorBucketAllocation', getU64Decoder()],
    ['foundationBucketAllocation', getU64Decoder()],
    ['ecosystemBucketAllocation', getU64Decoder()],
  ]);
}

export function getInitOneCoreInstructionDataCodec(): Codec<
  InitOneCoreInstructionDataArgs,
  InitOneCoreInstructionData
> {
  return combineCodec(
    getInitOneCoreInstructionDataEncoder(),
    getInitOneCoreInstructionDataDecoder()
  );
}

export type InitOneCoreInput<
  TAccountAdmin extends string = string,
  TAccountPayer extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountCortex extends string = string,
  TAccountProtocolFeeRecipient extends string = string,
  TAccountFeeRedistributionMint extends string = string,
  TAccountLmTokenMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  /** #1 */
  admin: TransactionSigner<TAccountAdmin>;
  /** #2 */
  payer: TransactionSigner<TAccountPayer>;
  /** #3 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #4 */
  cortex: Address<TAccountCortex>;
  /** #5 */
  protocolFeeRecipient: Address<TAccountProtocolFeeRecipient>;
  /** #6 */
  feeRedistributionMint: Address<TAccountFeeRedistributionMint>;
  /** #7 */
  lmTokenMint: Address<TAccountLmTokenMint>;
  /** #8 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #9 */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** #10 */
  rent?: Address<TAccountRent>;
  coreContributorBucketAllocation: InitOneCoreInstructionDataArgs['coreContributorBucketAllocation'];
  foundationBucketAllocation: InitOneCoreInstructionDataArgs['foundationBucketAllocation'];
  ecosystemBucketAllocation: InitOneCoreInstructionDataArgs['ecosystemBucketAllocation'];
};

export function getInitOneCoreInstruction<
  TAccountAdmin extends string,
  TAccountPayer extends string,
  TAccountTransferAuthority extends string,
  TAccountCortex extends string,
  TAccountProtocolFeeRecipient extends string,
  TAccountFeeRedistributionMint extends string,
  TAccountLmTokenMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: InitOneCoreInput<
    TAccountAdmin,
    TAccountPayer,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountProtocolFeeRecipient,
    TAccountFeeRedistributionMint,
    TAccountLmTokenMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): InitOneCoreInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountPayer,
  TAccountTransferAuthority,
  TAccountCortex,
  TAccountProtocolFeeRecipient,
  TAccountFeeRedistributionMint,
  TAccountLmTokenMint,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: true,
    },
    cortex: { value: input.cortex ?? null, isWritable: true },
    protocolFeeRecipient: {
      value: input.protocolFeeRecipient ?? null,
      isWritable: false,
    },
    feeRedistributionMint: {
      value: input.feeRedistributionMint ?? null,
      isWritable: false,
    },
    lmTokenMint: { value: input.lmTokenMint ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.protocolFeeRecipient),
      getAccountMeta(accounts.feeRedistributionMint),
      getAccountMeta(accounts.lmTokenMint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getInitOneCoreInstructionDataEncoder().encode(
      args as InitOneCoreInstructionDataArgs
    ),
  } as InitOneCoreInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountPayer,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountProtocolFeeRecipient,
    TAccountFeeRedistributionMint,
    TAccountLmTokenMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedInitOneCoreInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    admin: TAccountMetas[0];
    /** #2 */
    payer: TAccountMetas[1];
    /** #3 */
    transferAuthority: TAccountMetas[2];
    /** #4 */
    cortex: TAccountMetas[3];
    /** #5 */
    protocolFeeRecipient: TAccountMetas[4];
    /** #6 */
    feeRedistributionMint: TAccountMetas[5];
    /** #7 */
    lmTokenMint: TAccountMetas[6];
    /** #8 */
    systemProgram: TAccountMetas[7];
    /** #9 */
    tokenProgram: TAccountMetas[8];
    /** #10 */
    rent: TAccountMetas[9];
  };
  data: InitOneCoreInstructionData;
};

export function parseInitOneCoreInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitOneCoreInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      payer: getNextAccount(),
      transferAuthority: getNextAccount(),
      cortex: getNextAccount(),
      protocolFeeRecipient: getNextAccount(),
      feeRedistributionMint: getNextAccount(),
      lmTokenMint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getInitOneCoreInstructionDataDecoder().decode(instruction.data),
  };
}
