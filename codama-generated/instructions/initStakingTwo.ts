/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INIT_STAKING_TWO_DISCRIMINATOR = new Uint8Array([
  117, 31, 227, 147, 59, 7, 139, 131,
]);

export function getInitStakingTwoDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_STAKING_TWO_DISCRIMINATOR
  );
}

export type InitStakingTwoInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountStaking extends string | IAccountMeta<string> = string,
  TAccountLmTokenMint extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountStakingRewardTokenVault extends
    | string
    | IAccountMeta<string> = string,
  TAccountFeeRedistributionMint extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountStaking extends string
        ? WritableAccount<TAccountStaking>
        : TAccountStaking,
      TAccountLmTokenMint extends string
        ? WritableAccount<TAccountLmTokenMint>
        : TAccountLmTokenMint,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountStakingRewardTokenVault extends string
        ? WritableAccount<TAccountStakingRewardTokenVault>
        : TAccountStakingRewardTokenVault,
      TAccountFeeRedistributionMint extends string
        ? ReadonlyAccount<TAccountFeeRedistributionMint>
        : TAccountFeeRedistributionMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitStakingTwoInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitStakingTwoInstructionDataArgs = {};

export function getInitStakingTwoInstructionDataEncoder(): Encoder<InitStakingTwoInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: INIT_STAKING_TWO_DISCRIMINATOR })
  );
}

export function getInitStakingTwoInstructionDataDecoder(): Decoder<InitStakingTwoInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitStakingTwoInstructionDataCodec(): Codec<
  InitStakingTwoInstructionDataArgs,
  InitStakingTwoInstructionData
> {
  return combineCodec(
    getInitStakingTwoInstructionDataEncoder(),
    getInitStakingTwoInstructionDataDecoder()
  );
}

export type InitStakingTwoInput<
  TAccountAdmin extends string = string,
  TAccountPayer extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountStaking extends string = string,
  TAccountLmTokenMint extends string = string,
  TAccountCortex extends string = string,
  TAccountStakingRewardTokenVault extends string = string,
  TAccountFeeRedistributionMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** #1 */
  admin: TransactionSigner<TAccountAdmin>;
  /** #2 */
  payer: TransactionSigner<TAccountPayer>;
  /** #3 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #4 */
  staking: Address<TAccountStaking>;
  /** #5 */
  lmTokenMint: Address<TAccountLmTokenMint>;
  /** #6 */
  cortex: Address<TAccountCortex>;
  /** #7 */
  stakingRewardTokenVault: Address<TAccountStakingRewardTokenVault>;
  /** #8 */
  feeRedistributionMint: Address<TAccountFeeRedistributionMint>;
  /** #9 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #10 */
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getInitStakingTwoInstruction<
  TAccountAdmin extends string,
  TAccountPayer extends string,
  TAccountTransferAuthority extends string,
  TAccountStaking extends string,
  TAccountLmTokenMint extends string,
  TAccountCortex extends string,
  TAccountStakingRewardTokenVault extends string,
  TAccountFeeRedistributionMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: InitStakingTwoInput<
    TAccountAdmin,
    TAccountPayer,
    TAccountTransferAuthority,
    TAccountStaking,
    TAccountLmTokenMint,
    TAccountCortex,
    TAccountStakingRewardTokenVault,
    TAccountFeeRedistributionMint,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitStakingTwoInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountPayer,
  TAccountTransferAuthority,
  TAccountStaking,
  TAccountLmTokenMint,
  TAccountCortex,
  TAccountStakingRewardTokenVault,
  TAccountFeeRedistributionMint,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    staking: { value: input.staking ?? null, isWritable: true },
    lmTokenMint: { value: input.lmTokenMint ?? null, isWritable: true },
    cortex: { value: input.cortex ?? null, isWritable: true },
    stakingRewardTokenVault: {
      value: input.stakingRewardTokenVault ?? null,
      isWritable: true,
    },
    feeRedistributionMint: {
      value: input.feeRedistributionMint ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.staking),
      getAccountMeta(accounts.lmTokenMint),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.stakingRewardTokenVault),
      getAccountMeta(accounts.feeRedistributionMint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getInitStakingTwoInstructionDataEncoder().encode({}),
  } as InitStakingTwoInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountPayer,
    TAccountTransferAuthority,
    TAccountStaking,
    TAccountLmTokenMint,
    TAccountCortex,
    TAccountStakingRewardTokenVault,
    TAccountFeeRedistributionMint,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedInitStakingTwoInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    admin: TAccountMetas[0];
    /** #2 */
    payer: TAccountMetas[1];
    /** #3 */
    transferAuthority: TAccountMetas[2];
    /** #4 */
    staking: TAccountMetas[3];
    /** #5 */
    lmTokenMint: TAccountMetas[4];
    /** #6 */
    cortex: TAccountMetas[5];
    /** #7 */
    stakingRewardTokenVault: TAccountMetas[6];
    /** #8 */
    feeRedistributionMint: TAccountMetas[7];
    /** #9 */
    systemProgram: TAccountMetas[8];
    /** #10 */
    tokenProgram: TAccountMetas[9];
  };
  data: InitStakingTwoInstructionData;
};

export function parseInitStakingTwoInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitStakingTwoInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      payer: getNextAccount(),
      transferAuthority: getNextAccount(),
      staking: getNextAccount(),
      lmTokenMint: getNextAccount(),
      cortex: getNextAccount(),
      stakingRewardTokenVault: getNextAccount(),
      feeRedistributionMint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getInitStakingTwoInstructionDataDecoder().decode(instruction.data),
  };
}
