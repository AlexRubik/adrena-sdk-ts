/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const EXECUTE_LIMIT_ORDER_LONG_DISCRIMINATOR = new Uint8Array([
  114, 251, 178, 6, 238, 31, 245, 245,
]);

export function getExecuteLimitOrderLongDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    EXECUTE_LIMIT_ORDER_LONG_DISCRIMINATOR
  );
}

export type ExecuteLimitOrderLongInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountCaller extends string | IAccountMeta<string> = string,
  TAccountCollateralEscrow extends string | IAccountMeta<string> = string,
  TAccountCustody extends string | IAccountMeta<string> = string,
  TAccountCustodyOracle extends string | IAccountMeta<string> = string,
  TAccountCustodyTradeOracle extends string | IAccountMeta<string> = string,
  TAccountCustodyTokenAccount extends string | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountPosition extends string | IAccountMeta<string> = string,
  TAccountLimitOrderBook extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAdrenaProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableAccount<TAccountOwner>
        : TAccountOwner,
      TAccountCaller extends string
        ? WritableSignerAccount<TAccountCaller> &
            IAccountSignerMeta<TAccountCaller>
        : TAccountCaller,
      TAccountCollateralEscrow extends string
        ? WritableAccount<TAccountCollateralEscrow>
        : TAccountCollateralEscrow,
      TAccountCustody extends string
        ? WritableAccount<TAccountCustody>
        : TAccountCustody,
      TAccountCustodyOracle extends string
        ? ReadonlyAccount<TAccountCustodyOracle>
        : TAccountCustodyOracle,
      TAccountCustodyTradeOracle extends string
        ? ReadonlyAccount<TAccountCustodyTradeOracle>
        : TAccountCustodyTradeOracle,
      TAccountCustodyTokenAccount extends string
        ? WritableAccount<TAccountCustodyTokenAccount>
        : TAccountCustodyTokenAccount,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountLimitOrderBook extends string
        ? WritableAccount<TAccountLimitOrderBook>
        : TAccountLimitOrderBook,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAdrenaProgram extends string
        ? ReadonlyAccount<TAccountAdrenaProgram>
        : TAccountAdrenaProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ExecuteLimitOrderLongInstructionData = {
  discriminator: ReadonlyUint8Array;
  id: bigint;
};

export type ExecuteLimitOrderLongInstructionDataArgs = { id: number | bigint };

export function getExecuteLimitOrderLongInstructionDataEncoder(): Encoder<ExecuteLimitOrderLongInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['id', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: EXECUTE_LIMIT_ORDER_LONG_DISCRIMINATOR,
    })
  );
}

export function getExecuteLimitOrderLongInstructionDataDecoder(): Decoder<ExecuteLimitOrderLongInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['id', getU64Decoder()],
  ]);
}

export function getExecuteLimitOrderLongInstructionDataCodec(): Codec<
  ExecuteLimitOrderLongInstructionDataArgs,
  ExecuteLimitOrderLongInstructionData
> {
  return combineCodec(
    getExecuteLimitOrderLongInstructionDataEncoder(),
    getExecuteLimitOrderLongInstructionDataDecoder()
  );
}

export type ExecuteLimitOrderLongInput<
  TAccountOwner extends string = string,
  TAccountCaller extends string = string,
  TAccountCollateralEscrow extends string = string,
  TAccountCustody extends string = string,
  TAccountCustodyOracle extends string = string,
  TAccountCustodyTradeOracle extends string = string,
  TAccountCustodyTokenAccount extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountPosition extends string = string,
  TAccountLimitOrderBook extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAdrenaProgram extends string = string,
> = {
  /** #1 */
  owner: Address<TAccountOwner>;
  /** #2 */
  caller: TransactionSigner<TAccountCaller>;
  /** #3 */
  collateralEscrow: Address<TAccountCollateralEscrow>;
  /** #4 */
  custody: Address<TAccountCustody>;
  /** #5 */
  custodyOracle: Address<TAccountCustodyOracle>;
  /** #6 */
  custodyTradeOracle: Address<TAccountCustodyTradeOracle>;
  /** #7 */
  custodyTokenAccount: Address<TAccountCustodyTokenAccount>;
  /** #8 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #9 */
  cortex: Address<TAccountCortex>;
  /** #10 */
  pool: Address<TAccountPool>;
  /** #11 */
  position: Address<TAccountPosition>;
  /** #12 */
  limitOrderBook: Address<TAccountLimitOrderBook>;
  /** #13 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #14 */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** #15 */
  adrenaProgram: Address<TAccountAdrenaProgram>;
  id: ExecuteLimitOrderLongInstructionDataArgs['id'];
};

export function getExecuteLimitOrderLongInstruction<
  TAccountOwner extends string,
  TAccountCaller extends string,
  TAccountCollateralEscrow extends string,
  TAccountCustody extends string,
  TAccountCustodyOracle extends string,
  TAccountCustodyTradeOracle extends string,
  TAccountCustodyTokenAccount extends string,
  TAccountTransferAuthority extends string,
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountPosition extends string,
  TAccountLimitOrderBook extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAdrenaProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: ExecuteLimitOrderLongInput<
    TAccountOwner,
    TAccountCaller,
    TAccountCollateralEscrow,
    TAccountCustody,
    TAccountCustodyOracle,
    TAccountCustodyTradeOracle,
    TAccountCustodyTokenAccount,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountPool,
    TAccountPosition,
    TAccountLimitOrderBook,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAdrenaProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ExecuteLimitOrderLongInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountCaller,
  TAccountCollateralEscrow,
  TAccountCustody,
  TAccountCustodyOracle,
  TAccountCustodyTradeOracle,
  TAccountCustodyTokenAccount,
  TAccountTransferAuthority,
  TAccountCortex,
  TAccountPool,
  TAccountPosition,
  TAccountLimitOrderBook,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAdrenaProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    caller: { value: input.caller ?? null, isWritable: true },
    collateralEscrow: {
      value: input.collateralEscrow ?? null,
      isWritable: true,
    },
    custody: { value: input.custody ?? null, isWritable: true },
    custodyOracle: { value: input.custodyOracle ?? null, isWritable: false },
    custodyTradeOracle: {
      value: input.custodyTradeOracle ?? null,
      isWritable: false,
    },
    custodyTokenAccount: {
      value: input.custodyTokenAccount ?? null,
      isWritable: true,
    },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    cortex: { value: input.cortex ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: true },
    limitOrderBook: { value: input.limitOrderBook ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    adrenaProgram: { value: input.adrenaProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.caller),
      getAccountMeta(accounts.collateralEscrow),
      getAccountMeta(accounts.custody),
      getAccountMeta(accounts.custodyOracle),
      getAccountMeta(accounts.custodyTradeOracle),
      getAccountMeta(accounts.custodyTokenAccount),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.limitOrderBook),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.adrenaProgram),
    ],
    programAddress,
    data: getExecuteLimitOrderLongInstructionDataEncoder().encode(
      args as ExecuteLimitOrderLongInstructionDataArgs
    ),
  } as ExecuteLimitOrderLongInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountCaller,
    TAccountCollateralEscrow,
    TAccountCustody,
    TAccountCustodyOracle,
    TAccountCustodyTradeOracle,
    TAccountCustodyTokenAccount,
    TAccountTransferAuthority,
    TAccountCortex,
    TAccountPool,
    TAccountPosition,
    TAccountLimitOrderBook,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAdrenaProgram
  >;

  return instruction;
}

export type ParsedExecuteLimitOrderLongInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    owner: TAccountMetas[0];
    /** #2 */
    caller: TAccountMetas[1];
    /** #3 */
    collateralEscrow: TAccountMetas[2];
    /** #4 */
    custody: TAccountMetas[3];
    /** #5 */
    custodyOracle: TAccountMetas[4];
    /** #6 */
    custodyTradeOracle: TAccountMetas[5];
    /** #7 */
    custodyTokenAccount: TAccountMetas[6];
    /** #8 */
    transferAuthority: TAccountMetas[7];
    /** #9 */
    cortex: TAccountMetas[8];
    /** #10 */
    pool: TAccountMetas[9];
    /** #11 */
    position: TAccountMetas[10];
    /** #12 */
    limitOrderBook: TAccountMetas[11];
    /** #13 */
    systemProgram: TAccountMetas[12];
    /** #14 */
    tokenProgram: TAccountMetas[13];
    /** #15 */
    adrenaProgram: TAccountMetas[14];
  };
  data: ExecuteLimitOrderLongInstructionData;
};

export function parseExecuteLimitOrderLongInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedExecuteLimitOrderLongInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 15) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      caller: getNextAccount(),
      collateralEscrow: getNextAccount(),
      custody: getNextAccount(),
      custodyOracle: getNextAccount(),
      custodyTradeOracle: getNextAccount(),
      custodyTokenAccount: getNextAccount(),
      transferAuthority: getNextAccount(),
      cortex: getNextAccount(),
      pool: getNextAccount(),
      position: getNextAccount(),
      limitOrderBook: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      adrenaProgram: getNextAccount(),
    },
    data: getExecuteLimitOrderLongInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
