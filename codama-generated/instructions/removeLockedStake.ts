/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ADRENA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REMOVE_LOCKED_STAKE_DISCRIMINATOR = new Uint8Array([
  198, 147, 178, 249, 220, 14, 164, 33,
]);

export function getRemoveLockedStakeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REMOVE_LOCKED_STAKE_DISCRIMINATOR
  );
}

export type RemoveLockedStakeInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountLmTokenAccount extends string | IAccountMeta<string> = string,
  TAccountStakedTokenAccount extends string | IAccountMeta<string> = string,
  TAccountRewardTokenAccount extends string | IAccountMeta<string> = string,
  TAccountStakingStakedTokenVault extends
    | string
    | IAccountMeta<string> = string,
  TAccountStakingRewardTokenVault extends
    | string
    | IAccountMeta<string> = string,
  TAccountStakingLmRewardTokenVault extends
    | string
    | IAccountMeta<string> = string,
  TAccountTransferAuthority extends string | IAccountMeta<string> = string,
  TAccountUserStaking extends string | IAccountMeta<string> = string,
  TAccountStaking extends string | IAccountMeta<string> = string,
  TAccountCortex extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountGenesisLock extends string | IAccountMeta<string> = string,
  TAccountLmTokenMint extends string | IAccountMeta<string> = string,
  TAccountStakedTokenMint extends string | IAccountMeta<string> = string,
  TAccountGovernanceTokenMint extends string | IAccountMeta<string> = string,
  TAccountFeeRedistributionMint extends string | IAccountMeta<string> = string,
  TAccountGovernanceRealm extends string | IAccountMeta<string> = string,
  TAccountGovernanceRealmConfig extends string | IAccountMeta<string> = string,
  TAccountGovernanceGoverningTokenHolding extends
    | string
    | IAccountMeta<string> = string,
  TAccountGovernanceGoverningTokenOwnerRecord extends
    | string
    | IAccountMeta<string> = string,
  TAccountGovernanceProgram extends string | IAccountMeta<string> = string,
  TAccountAdrenaProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountLmTokenAccount extends string
        ? WritableAccount<TAccountLmTokenAccount>
        : TAccountLmTokenAccount,
      TAccountStakedTokenAccount extends string
        ? WritableAccount<TAccountStakedTokenAccount>
        : TAccountStakedTokenAccount,
      TAccountRewardTokenAccount extends string
        ? WritableAccount<TAccountRewardTokenAccount>
        : TAccountRewardTokenAccount,
      TAccountStakingStakedTokenVault extends string
        ? WritableAccount<TAccountStakingStakedTokenVault>
        : TAccountStakingStakedTokenVault,
      TAccountStakingRewardTokenVault extends string
        ? WritableAccount<TAccountStakingRewardTokenVault>
        : TAccountStakingRewardTokenVault,
      TAccountStakingLmRewardTokenVault extends string
        ? WritableAccount<TAccountStakingLmRewardTokenVault>
        : TAccountStakingLmRewardTokenVault,
      TAccountTransferAuthority extends string
        ? ReadonlyAccount<TAccountTransferAuthority>
        : TAccountTransferAuthority,
      TAccountUserStaking extends string
        ? WritableAccount<TAccountUserStaking>
        : TAccountUserStaking,
      TAccountStaking extends string
        ? WritableAccount<TAccountStaking>
        : TAccountStaking,
      TAccountCortex extends string
        ? WritableAccount<TAccountCortex>
        : TAccountCortex,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountGenesisLock extends string
        ? WritableAccount<TAccountGenesisLock>
        : TAccountGenesisLock,
      TAccountLmTokenMint extends string
        ? WritableAccount<TAccountLmTokenMint>
        : TAccountLmTokenMint,
      TAccountStakedTokenMint extends string
        ? WritableAccount<TAccountStakedTokenMint>
        : TAccountStakedTokenMint,
      TAccountGovernanceTokenMint extends string
        ? WritableAccount<TAccountGovernanceTokenMint>
        : TAccountGovernanceTokenMint,
      TAccountFeeRedistributionMint extends string
        ? ReadonlyAccount<TAccountFeeRedistributionMint>
        : TAccountFeeRedistributionMint,
      TAccountGovernanceRealm extends string
        ? ReadonlyAccount<TAccountGovernanceRealm>
        : TAccountGovernanceRealm,
      TAccountGovernanceRealmConfig extends string
        ? ReadonlyAccount<TAccountGovernanceRealmConfig>
        : TAccountGovernanceRealmConfig,
      TAccountGovernanceGoverningTokenHolding extends string
        ? WritableAccount<TAccountGovernanceGoverningTokenHolding>
        : TAccountGovernanceGoverningTokenHolding,
      TAccountGovernanceGoverningTokenOwnerRecord extends string
        ? WritableAccount<TAccountGovernanceGoverningTokenOwnerRecord>
        : TAccountGovernanceGoverningTokenOwnerRecord,
      TAccountGovernanceProgram extends string
        ? ReadonlyAccount<TAccountGovernanceProgram>
        : TAccountGovernanceProgram,
      TAccountAdrenaProgram extends string
        ? ReadonlyAccount<TAccountAdrenaProgram>
        : TAccountAdrenaProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RemoveLockedStakeInstructionData = {
  discriminator: ReadonlyUint8Array;
  lockedStakeIndex: bigint;
};

export type RemoveLockedStakeInstructionDataArgs = {
  lockedStakeIndex: number | bigint;
};

export function getRemoveLockedStakeInstructionDataEncoder(): Encoder<RemoveLockedStakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['lockedStakeIndex', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REMOVE_LOCKED_STAKE_DISCRIMINATOR })
  );
}

export function getRemoveLockedStakeInstructionDataDecoder(): Decoder<RemoveLockedStakeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['lockedStakeIndex', getU64Decoder()],
  ]);
}

export function getRemoveLockedStakeInstructionDataCodec(): Codec<
  RemoveLockedStakeInstructionDataArgs,
  RemoveLockedStakeInstructionData
> {
  return combineCodec(
    getRemoveLockedStakeInstructionDataEncoder(),
    getRemoveLockedStakeInstructionDataDecoder()
  );
}

export type RemoveLockedStakeInput<
  TAccountOwner extends string = string,
  TAccountLmTokenAccount extends string = string,
  TAccountStakedTokenAccount extends string = string,
  TAccountRewardTokenAccount extends string = string,
  TAccountStakingStakedTokenVault extends string = string,
  TAccountStakingRewardTokenVault extends string = string,
  TAccountStakingLmRewardTokenVault extends string = string,
  TAccountTransferAuthority extends string = string,
  TAccountUserStaking extends string = string,
  TAccountStaking extends string = string,
  TAccountCortex extends string = string,
  TAccountPool extends string = string,
  TAccountGenesisLock extends string = string,
  TAccountLmTokenMint extends string = string,
  TAccountStakedTokenMint extends string = string,
  TAccountGovernanceTokenMint extends string = string,
  TAccountFeeRedistributionMint extends string = string,
  TAccountGovernanceRealm extends string = string,
  TAccountGovernanceRealmConfig extends string = string,
  TAccountGovernanceGoverningTokenHolding extends string = string,
  TAccountGovernanceGoverningTokenOwnerRecord extends string = string,
  TAccountGovernanceProgram extends string = string,
  TAccountAdrenaProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** #1 */
  owner: TransactionSigner<TAccountOwner>;
  /** #2 */
  lmTokenAccount: Address<TAccountLmTokenAccount>;
  /** #3 */
  stakedTokenAccount: Address<TAccountStakedTokenAccount>;
  /** #4 */
  rewardTokenAccount: Address<TAccountRewardTokenAccount>;
  /** #5 */
  stakingStakedTokenVault: Address<TAccountStakingStakedTokenVault>;
  /** #6 */
  stakingRewardTokenVault: Address<TAccountStakingRewardTokenVault>;
  /** #7 */
  stakingLmRewardTokenVault: Address<TAccountStakingLmRewardTokenVault>;
  /** #8 */
  transferAuthority: Address<TAccountTransferAuthority>;
  /** #9 */
  userStaking: Address<TAccountUserStaking>;
  /** #10 */
  staking: Address<TAccountStaking>;
  /** #11 */
  cortex: Address<TAccountCortex>;
  /** #12 */
  pool: Address<TAccountPool>;
  /** #13 */
  genesisLock: Address<TAccountGenesisLock>;
  /** #14 */
  lmTokenMint: Address<TAccountLmTokenMint>;
  /** #15 */
  stakedTokenMint: Address<TAccountStakedTokenMint>;
  /** #16 */
  governanceTokenMint: Address<TAccountGovernanceTokenMint>;
  /** #17 */
  feeRedistributionMint: Address<TAccountFeeRedistributionMint>;
  /**
   * #18
   * A realm represent one project within the governance program
   */
  governanceRealm: Address<TAccountGovernanceRealm>;
  /** #19 */
  governanceRealmConfig: Address<TAccountGovernanceRealmConfig>;
  /**
   * #20
   * Token account owned by governance program holding user's locked tokens
   */
  governanceGoverningTokenHolding: Address<TAccountGovernanceGoverningTokenHolding>;
  /**
   * #21
   * Account owned by governance storing user information
   */
  governanceGoverningTokenOwnerRecord: Address<TAccountGovernanceGoverningTokenOwnerRecord>;
  /** #22 */
  governanceProgram: Address<TAccountGovernanceProgram>;
  /** #23 */
  adrenaProgram: Address<TAccountAdrenaProgram>;
  /** #24 */
  systemProgram?: Address<TAccountSystemProgram>;
  /** #25 */
  tokenProgram?: Address<TAccountTokenProgram>;
  lockedStakeIndex: RemoveLockedStakeInstructionDataArgs['lockedStakeIndex'];
};

export function getRemoveLockedStakeInstruction<
  TAccountOwner extends string,
  TAccountLmTokenAccount extends string,
  TAccountStakedTokenAccount extends string,
  TAccountRewardTokenAccount extends string,
  TAccountStakingStakedTokenVault extends string,
  TAccountStakingRewardTokenVault extends string,
  TAccountStakingLmRewardTokenVault extends string,
  TAccountTransferAuthority extends string,
  TAccountUserStaking extends string,
  TAccountStaking extends string,
  TAccountCortex extends string,
  TAccountPool extends string,
  TAccountGenesisLock extends string,
  TAccountLmTokenMint extends string,
  TAccountStakedTokenMint extends string,
  TAccountGovernanceTokenMint extends string,
  TAccountFeeRedistributionMint extends string,
  TAccountGovernanceRealm extends string,
  TAccountGovernanceRealmConfig extends string,
  TAccountGovernanceGoverningTokenHolding extends string,
  TAccountGovernanceGoverningTokenOwnerRecord extends string,
  TAccountGovernanceProgram extends string,
  TAccountAdrenaProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof ADRENA_PROGRAM_ADDRESS,
>(
  input: RemoveLockedStakeInput<
    TAccountOwner,
    TAccountLmTokenAccount,
    TAccountStakedTokenAccount,
    TAccountRewardTokenAccount,
    TAccountStakingStakedTokenVault,
    TAccountStakingRewardTokenVault,
    TAccountStakingLmRewardTokenVault,
    TAccountTransferAuthority,
    TAccountUserStaking,
    TAccountStaking,
    TAccountCortex,
    TAccountPool,
    TAccountGenesisLock,
    TAccountLmTokenMint,
    TAccountStakedTokenMint,
    TAccountGovernanceTokenMint,
    TAccountFeeRedistributionMint,
    TAccountGovernanceRealm,
    TAccountGovernanceRealmConfig,
    TAccountGovernanceGoverningTokenHolding,
    TAccountGovernanceGoverningTokenOwnerRecord,
    TAccountGovernanceProgram,
    TAccountAdrenaProgram,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RemoveLockedStakeInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountLmTokenAccount,
  TAccountStakedTokenAccount,
  TAccountRewardTokenAccount,
  TAccountStakingStakedTokenVault,
  TAccountStakingRewardTokenVault,
  TAccountStakingLmRewardTokenVault,
  TAccountTransferAuthority,
  TAccountUserStaking,
  TAccountStaking,
  TAccountCortex,
  TAccountPool,
  TAccountGenesisLock,
  TAccountLmTokenMint,
  TAccountStakedTokenMint,
  TAccountGovernanceTokenMint,
  TAccountFeeRedistributionMint,
  TAccountGovernanceRealm,
  TAccountGovernanceRealmConfig,
  TAccountGovernanceGoverningTokenHolding,
  TAccountGovernanceGoverningTokenOwnerRecord,
  TAccountGovernanceProgram,
  TAccountAdrenaProgram,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? ADRENA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    lmTokenAccount: { value: input.lmTokenAccount ?? null, isWritable: true },
    stakedTokenAccount: {
      value: input.stakedTokenAccount ?? null,
      isWritable: true,
    },
    rewardTokenAccount: {
      value: input.rewardTokenAccount ?? null,
      isWritable: true,
    },
    stakingStakedTokenVault: {
      value: input.stakingStakedTokenVault ?? null,
      isWritable: true,
    },
    stakingRewardTokenVault: {
      value: input.stakingRewardTokenVault ?? null,
      isWritable: true,
    },
    stakingLmRewardTokenVault: {
      value: input.stakingLmRewardTokenVault ?? null,
      isWritable: true,
    },
    transferAuthority: {
      value: input.transferAuthority ?? null,
      isWritable: false,
    },
    userStaking: { value: input.userStaking ?? null, isWritable: true },
    staking: { value: input.staking ?? null, isWritable: true },
    cortex: { value: input.cortex ?? null, isWritable: true },
    pool: { value: input.pool ?? null, isWritable: true },
    genesisLock: { value: input.genesisLock ?? null, isWritable: true },
    lmTokenMint: { value: input.lmTokenMint ?? null, isWritable: true },
    stakedTokenMint: { value: input.stakedTokenMint ?? null, isWritable: true },
    governanceTokenMint: {
      value: input.governanceTokenMint ?? null,
      isWritable: true,
    },
    feeRedistributionMint: {
      value: input.feeRedistributionMint ?? null,
      isWritable: false,
    },
    governanceRealm: {
      value: input.governanceRealm ?? null,
      isWritable: false,
    },
    governanceRealmConfig: {
      value: input.governanceRealmConfig ?? null,
      isWritable: false,
    },
    governanceGoverningTokenHolding: {
      value: input.governanceGoverningTokenHolding ?? null,
      isWritable: true,
    },
    governanceGoverningTokenOwnerRecord: {
      value: input.governanceGoverningTokenOwnerRecord ?? null,
      isWritable: true,
    },
    governanceProgram: {
      value: input.governanceProgram ?? null,
      isWritable: false,
    },
    adrenaProgram: { value: input.adrenaProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.lmTokenAccount),
      getAccountMeta(accounts.stakedTokenAccount),
      getAccountMeta(accounts.rewardTokenAccount),
      getAccountMeta(accounts.stakingStakedTokenVault),
      getAccountMeta(accounts.stakingRewardTokenVault),
      getAccountMeta(accounts.stakingLmRewardTokenVault),
      getAccountMeta(accounts.transferAuthority),
      getAccountMeta(accounts.userStaking),
      getAccountMeta(accounts.staking),
      getAccountMeta(accounts.cortex),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.genesisLock),
      getAccountMeta(accounts.lmTokenMint),
      getAccountMeta(accounts.stakedTokenMint),
      getAccountMeta(accounts.governanceTokenMint),
      getAccountMeta(accounts.feeRedistributionMint),
      getAccountMeta(accounts.governanceRealm),
      getAccountMeta(accounts.governanceRealmConfig),
      getAccountMeta(accounts.governanceGoverningTokenHolding),
      getAccountMeta(accounts.governanceGoverningTokenOwnerRecord),
      getAccountMeta(accounts.governanceProgram),
      getAccountMeta(accounts.adrenaProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getRemoveLockedStakeInstructionDataEncoder().encode(
      args as RemoveLockedStakeInstructionDataArgs
    ),
  } as RemoveLockedStakeInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountLmTokenAccount,
    TAccountStakedTokenAccount,
    TAccountRewardTokenAccount,
    TAccountStakingStakedTokenVault,
    TAccountStakingRewardTokenVault,
    TAccountStakingLmRewardTokenVault,
    TAccountTransferAuthority,
    TAccountUserStaking,
    TAccountStaking,
    TAccountCortex,
    TAccountPool,
    TAccountGenesisLock,
    TAccountLmTokenMint,
    TAccountStakedTokenMint,
    TAccountGovernanceTokenMint,
    TAccountFeeRedistributionMint,
    TAccountGovernanceRealm,
    TAccountGovernanceRealmConfig,
    TAccountGovernanceGoverningTokenHolding,
    TAccountGovernanceGoverningTokenOwnerRecord,
    TAccountGovernanceProgram,
    TAccountAdrenaProgram,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedRemoveLockedStakeInstruction<
  TProgram extends string = typeof ADRENA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** #1 */
    owner: TAccountMetas[0];
    /** #2 */
    lmTokenAccount: TAccountMetas[1];
    /** #3 */
    stakedTokenAccount: TAccountMetas[2];
    /** #4 */
    rewardTokenAccount: TAccountMetas[3];
    /** #5 */
    stakingStakedTokenVault: TAccountMetas[4];
    /** #6 */
    stakingRewardTokenVault: TAccountMetas[5];
    /** #7 */
    stakingLmRewardTokenVault: TAccountMetas[6];
    /** #8 */
    transferAuthority: TAccountMetas[7];
    /** #9 */
    userStaking: TAccountMetas[8];
    /** #10 */
    staking: TAccountMetas[9];
    /** #11 */
    cortex: TAccountMetas[10];
    /** #12 */
    pool: TAccountMetas[11];
    /** #13 */
    genesisLock: TAccountMetas[12];
    /** #14 */
    lmTokenMint: TAccountMetas[13];
    /** #15 */
    stakedTokenMint: TAccountMetas[14];
    /** #16 */
    governanceTokenMint: TAccountMetas[15];
    /** #17 */
    feeRedistributionMint: TAccountMetas[16];
    /**
     * #18
     * A realm represent one project within the governance program
     */

    governanceRealm: TAccountMetas[17];
    /** #19 */
    governanceRealmConfig: TAccountMetas[18];
    /**
     * #20
     * Token account owned by governance program holding user's locked tokens
     */

    governanceGoverningTokenHolding: TAccountMetas[19];
    /**
     * #21
     * Account owned by governance storing user information
     */

    governanceGoverningTokenOwnerRecord: TAccountMetas[20];
    /** #22 */
    governanceProgram: TAccountMetas[21];
    /** #23 */
    adrenaProgram: TAccountMetas[22];
    /** #24 */
    systemProgram: TAccountMetas[23];
    /** #25 */
    tokenProgram: TAccountMetas[24];
  };
  data: RemoveLockedStakeInstructionData;
};

export function parseRemoveLockedStakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRemoveLockedStakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 25) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      lmTokenAccount: getNextAccount(),
      stakedTokenAccount: getNextAccount(),
      rewardTokenAccount: getNextAccount(),
      stakingStakedTokenVault: getNextAccount(),
      stakingRewardTokenVault: getNextAccount(),
      stakingLmRewardTokenVault: getNextAccount(),
      transferAuthority: getNextAccount(),
      userStaking: getNextAccount(),
      staking: getNextAccount(),
      cortex: getNextAccount(),
      pool: getNextAccount(),
      genesisLock: getNextAccount(),
      lmTokenMint: getNextAccount(),
      stakedTokenMint: getNextAccount(),
      governanceTokenMint: getNextAccount(),
      feeRedistributionMint: getNextAccount(),
      governanceRealm: getNextAccount(),
      governanceRealmConfig: getNextAccount(),
      governanceGoverningTokenHolding: getNextAccount(),
      governanceGoverningTokenOwnerRecord: getNextAccount(),
      governanceProgram: getNextAccount(),
      adrenaProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getRemoveLockedStakeInstructionDataDecoder().decode(instruction.data),
  };
}
