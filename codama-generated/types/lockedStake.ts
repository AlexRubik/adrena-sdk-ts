/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type LockedStake = {
  amount: bigint;
  stakeTime: bigint;
  claimTime: bigint;
  endTime: bigint;
  lockDuration: bigint;
  rewardMultiplier: number;
  lmRewardMultiplier: number;
  voteMultiplier: number;
  qualifiedForRewardsInResolvedRoundCount: number;
  amountWithRewardMultiplier: bigint;
  amountWithLmRewardMultiplier: bigint;
  resolved: number;
  padding2: ReadonlyUint8Array;
  id: bigint;
  earlyExit: number;
  padding3: ReadonlyUint8Array;
  earlyExitFee: bigint;
  isGenesis: number;
  padding4: ReadonlyUint8Array;
  genesisClaimTime: bigint;
};

export type LockedStakeArgs = {
  amount: number | bigint;
  stakeTime: number | bigint;
  claimTime: number | bigint;
  endTime: number | bigint;
  lockDuration: number | bigint;
  rewardMultiplier: number;
  lmRewardMultiplier: number;
  voteMultiplier: number;
  qualifiedForRewardsInResolvedRoundCount: number;
  amountWithRewardMultiplier: number | bigint;
  amountWithLmRewardMultiplier: number | bigint;
  resolved: number;
  padding2: ReadonlyUint8Array;
  id: number | bigint;
  earlyExit: number;
  padding3: ReadonlyUint8Array;
  earlyExitFee: number | bigint;
  isGenesis: number;
  padding4: ReadonlyUint8Array;
  genesisClaimTime: number | bigint;
};

export function getLockedStakeEncoder(): Encoder<LockedStakeArgs> {
  return getStructEncoder([
    ['amount', getU64Encoder()],
    ['stakeTime', getI64Encoder()],
    ['claimTime', getI64Encoder()],
    ['endTime', getI64Encoder()],
    ['lockDuration', getU64Encoder()],
    ['rewardMultiplier', getU32Encoder()],
    ['lmRewardMultiplier', getU32Encoder()],
    ['voteMultiplier', getU32Encoder()],
    ['qualifiedForRewardsInResolvedRoundCount', getU32Encoder()],
    ['amountWithRewardMultiplier', getU64Encoder()],
    ['amountWithLmRewardMultiplier', getU64Encoder()],
    ['resolved', getU8Encoder()],
    ['padding2', fixEncoderSize(getBytesEncoder(), 7)],
    ['id', getU64Encoder()],
    ['earlyExit', getU8Encoder()],
    ['padding3', fixEncoderSize(getBytesEncoder(), 7)],
    ['earlyExitFee', getU64Encoder()],
    ['isGenesis', getU8Encoder()],
    ['padding4', fixEncoderSize(getBytesEncoder(), 7)],
    ['genesisClaimTime', getI64Encoder()],
  ]);
}

export function getLockedStakeDecoder(): Decoder<LockedStake> {
  return getStructDecoder([
    ['amount', getU64Decoder()],
    ['stakeTime', getI64Decoder()],
    ['claimTime', getI64Decoder()],
    ['endTime', getI64Decoder()],
    ['lockDuration', getU64Decoder()],
    ['rewardMultiplier', getU32Decoder()],
    ['lmRewardMultiplier', getU32Decoder()],
    ['voteMultiplier', getU32Decoder()],
    ['qualifiedForRewardsInResolvedRoundCount', getU32Decoder()],
    ['amountWithRewardMultiplier', getU64Decoder()],
    ['amountWithLmRewardMultiplier', getU64Decoder()],
    ['resolved', getU8Decoder()],
    ['padding2', fixDecoderSize(getBytesDecoder(), 7)],
    ['id', getU64Decoder()],
    ['earlyExit', getU8Decoder()],
    ['padding3', fixDecoderSize(getBytesDecoder(), 7)],
    ['earlyExitFee', getU64Decoder()],
    ['isGenesis', getU8Decoder()],
    ['padding4', fixDecoderSize(getBytesDecoder(), 7)],
    ['genesisClaimTime', getI64Decoder()],
  ]);
}

export function getLockedStakeCodec(): Codec<LockedStakeArgs, LockedStake> {
  return combineCodec(getLockedStakeEncoder(), getLockedStakeDecoder());
}
