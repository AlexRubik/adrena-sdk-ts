/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type NextStakingRound = {
  totalStake: bigint;
  padding1: ReadonlyUint8Array;
  lmTotalStake: bigint;
};

export type NextStakingRoundArgs = {
  totalStake: number | bigint;
  padding1: ReadonlyUint8Array;
  lmTotalStake: number | bigint;
};

export function getNextStakingRoundEncoder(): Encoder<NextStakingRoundArgs> {
  return getStructEncoder([
    ['totalStake', getU64Encoder()],
    ['padding1', fixEncoderSize(getBytesEncoder(), 16)],
    ['lmTotalStake', getU64Encoder()],
  ]);
}

export function getNextStakingRoundDecoder(): Decoder<NextStakingRound> {
  return getStructDecoder([
    ['totalStake', getU64Decoder()],
    ['padding1', fixDecoderSize(getBytesDecoder(), 16)],
    ['lmTotalStake', getU64Decoder()],
  ]);
}

export function getNextStakingRoundCodec(): Codec<
  NextStakingRoundArgs,
  NextStakingRound
> {
  return combineCodec(
    getNextStakingRoundEncoder(),
    getNextStakingRoundDecoder()
  );
}
